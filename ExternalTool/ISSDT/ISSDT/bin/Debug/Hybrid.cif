svgfile "Image.svg";
group SVS8: //EnteringTrafficSign
  controllable c_r, c_rg, c_g,
               c_block_on, c_block_off,
               c_emergencystop;
  automaton ActuatorRG:
    location Red:
      initial;
      edge c_rg            goto RedGreen;
    location RedGreen:
      edge c_r             goto Red;
      edge c_g             goto Green;
      edge c_emergencystop goto Red;
    location Green:
      edge c_r             goto Red;
      edge c_emergencystop goto Red;
  end
  automaton ActuatorBlock:
    location On:
      initial;
      edge c_block_off goto Off;
    location Off:
      edge c_block_on  goto On;
  end
  automaton RedSensor:
    uncontrollable u_on, u_off;
    location On:
      initial;
      edge u_off goto Off;
    location Off:
      edge u_on  goto On;
  end
  automaton GreenSensor:
    uncontrollable u_on, u_off;
    location On:
      edge u_off goto Off;
    location Off:
      initial;
      edge u_on  goto On;
  end
  automaton BlockSensor:
    uncontrollable u_on, u_off;
    location On:
      initial;
      edge u_off goto Off;
    location Off:
      edge u_on  goto On;
  end

  automaton PhysicalRelations:
    location: initial;
      edge RedSensor.u_on    when ActuatorRG.Red or ActuatorRG.RedGreen;
      edge RedSensor.u_off   when ActuatorRG.Green;
      edge GreenSensor.u_on  when ActuatorRG.Green or ActuatorRG.RedGreen;
      edge GreenSensor.u_off when ActuatorRG.Red;
      edge BlockSensor.u_on  when ActuatorBlock.On;
      edge BlockSensor.u_off when ActuatorBlock.Off;
  end

  alg bool RedAspect      = RedSensor.On  and GreenSensor.Off and BlockSensor.Off;
  alg bool RedGreenAspect = RedSensor.On  and GreenSensor.On  and BlockSensor.Off;
  alg bool GreenAspect    = RedSensor.Off and GreenSensor.On  and BlockSensor.Off;
  alg bool BlockAspect    = RedSensor.Off and GreenSensor.On  and BlockSensor.On;
  alg bool RedOn          = RedSensor.On;
  alg bool GreenOn        = GreenSensor.On;
  alg bool BlockOn        = BlockSensor.On;

  svgout id "SVS8.red"   attr "fill" value if RedSensor.On:   "red"   else "grey" end;
  svgout id "SVS8.green" attr "fill" value if GreenSensor.On: "green" else "grey" end;
  svgout id "SVS8.block" attr "fill" value if BlockSensor.On: "red"   else "grey" end;
end
group SVS7: //EnteringTrafficSign
  controllable c_r, c_rg, c_g,
               c_block_on, c_block_off,
               c_emergencystop;
  automaton ActuatorRG:
    location Red:
      initial;
      edge c_rg            goto RedGreen;
    location RedGreen:
      edge c_r             goto Red;
      edge c_g             goto Green;
      edge c_emergencystop goto Red;
    location Green:
      edge c_r             goto Red;
      edge c_emergencystop goto Red;
  end
  automaton ActuatorBlock:
    location On:
      initial;
      edge c_block_off goto Off;
    location Off:
      edge c_block_on  goto On;
  end
  automaton RedSensor:
    uncontrollable u_on, u_off;
    location On:
      initial;
      edge u_off goto Off;
    location Off:
      edge u_on  goto On;
  end
  automaton GreenSensor:
    uncontrollable u_on, u_off;
    location On:
      edge u_off goto Off;
    location Off:
      initial;
      edge u_on  goto On;
  end
  automaton BlockSensor:
    uncontrollable u_on, u_off;
    location On:
      initial;
      edge u_off goto Off;
    location Off:
      edge u_on  goto On;
  end

  automaton PhysicalRelations:
    location: initial;
      edge RedSensor.u_on    when ActuatorRG.Red or ActuatorRG.RedGreen;
      edge RedSensor.u_off   when ActuatorRG.Green;
      edge GreenSensor.u_on  when ActuatorRG.Green or ActuatorRG.RedGreen;
      edge GreenSensor.u_off when ActuatorRG.Red;
      edge BlockSensor.u_on  when ActuatorBlock.On;
      edge BlockSensor.u_off when ActuatorBlock.Off;
  end

  alg bool RedAspect      = RedSensor.On  and GreenSensor.Off and BlockSensor.Off;
  alg bool RedGreenAspect = RedSensor.On  and GreenSensor.On  and BlockSensor.Off;
  alg bool GreenAspect    = RedSensor.Off and GreenSensor.On  and BlockSensor.Off;
  alg bool BlockAspect    = RedSensor.Off and GreenSensor.On  and BlockSensor.On;
  alg bool RedOn          = RedSensor.On;
  alg bool GreenOn        = GreenSensor.On;
  alg bool BlockOn        = BlockSensor.On;

  svgout id "SVS7.red"   attr "fill" value if RedSensor.On:   "red"   else "grey" end;
  svgout id "SVS7.green" attr "fill" value if GreenSensor.On: "green" else "grey" end;
  svgout id "SVS7.block" attr "fill" value if BlockSensor.On: "red"   else "grey" end;
end
group SVS6: //EnteringTrafficSign
  controllable c_r, c_rg, c_g,
               c_block_on, c_block_off,
               c_emergencystop;
  automaton ActuatorRG:
    location Red:
      initial;
      edge c_rg            goto RedGreen;
    location RedGreen:
      edge c_r             goto Red;
      edge c_g             goto Green;
      edge c_emergencystop goto Red;
    location Green:
      edge c_r             goto Red;
      edge c_emergencystop goto Red;
  end
  automaton ActuatorBlock:
    location On:
      initial;
      edge c_block_off goto Off;
    location Off:
      edge c_block_on  goto On;
  end
  automaton RedSensor:
    uncontrollable u_on, u_off;
    location On:
      initial;
      edge u_off goto Off;
    location Off:
      edge u_on  goto On;
  end
  automaton GreenSensor:
    uncontrollable u_on, u_off;
    location On:
      edge u_off goto Off;
    location Off:
      initial;
      edge u_on  goto On;
  end
  automaton BlockSensor:
    uncontrollable u_on, u_off;
    location On:
      initial;
      edge u_off goto Off;
    location Off:
      edge u_on  goto On;
  end

  automaton PhysicalRelations:
    location: initial;
      edge RedSensor.u_on    when ActuatorRG.Red or ActuatorRG.RedGreen;
      edge RedSensor.u_off   when ActuatorRG.Green;
      edge GreenSensor.u_on  when ActuatorRG.Green or ActuatorRG.RedGreen;
      edge GreenSensor.u_off when ActuatorRG.Red;
      edge BlockSensor.u_on  when ActuatorBlock.On;
      edge BlockSensor.u_off when ActuatorBlock.Off;
  end

  alg bool RedAspect      = RedSensor.On  and GreenSensor.Off and BlockSensor.Off;
  alg bool RedGreenAspect = RedSensor.On  and GreenSensor.On  and BlockSensor.Off;
  alg bool GreenAspect    = RedSensor.Off and GreenSensor.On  and BlockSensor.Off;
  alg bool BlockAspect    = RedSensor.Off and GreenSensor.On  and BlockSensor.On;
  alg bool RedOn          = RedSensor.On;
  alg bool GreenOn        = GreenSensor.On;
  alg bool BlockOn        = BlockSensor.On;

  svgout id "SVS6.red"   attr "fill" value if RedSensor.On:   "red"   else "grey" end;
  svgout id "SVS6.green" attr "fill" value if GreenSensor.On: "green" else "grey" end;
  svgout id "SVS6.block" attr "fill" value if BlockSensor.On: "red"   else "grey" end;
end
group SVS5: //EnteringTrafficSign
  controllable c_r, c_rg, c_g,
               c_block_on, c_block_off,
               c_emergencystop;
  automaton ActuatorRG:
    location Red:
      initial;
      edge c_rg            goto RedGreen;
    location RedGreen:
      edge c_r             goto Red;
      edge c_g             goto Green;
      edge c_emergencystop goto Red;
    location Green:
      edge c_r             goto Red;
      edge c_emergencystop goto Red;
  end
  automaton ActuatorBlock:
    location On:
      initial;
      edge c_block_off goto Off;
    location Off:
      edge c_block_on  goto On;
  end
  automaton RedSensor:
    uncontrollable u_on, u_off;
    location On:
      initial;
      edge u_off goto Off;
    location Off:
      edge u_on  goto On;
  end
  automaton GreenSensor:
    uncontrollable u_on, u_off;
    location On:
      edge u_off goto Off;
    location Off:
      initial;
      edge u_on  goto On;
  end
  automaton BlockSensor:
    uncontrollable u_on, u_off;
    location On:
      initial;
      edge u_off goto Off;
    location Off:
      edge u_on  goto On;
  end

  automaton PhysicalRelations:
    location: initial;
      edge RedSensor.u_on    when ActuatorRG.Red or ActuatorRG.RedGreen;
      edge RedSensor.u_off   when ActuatorRG.Green;
      edge GreenSensor.u_on  when ActuatorRG.Green or ActuatorRG.RedGreen;
      edge GreenSensor.u_off when ActuatorRG.Red;
      edge BlockSensor.u_on  when ActuatorBlock.On;
      edge BlockSensor.u_off when ActuatorBlock.Off;
  end

  alg bool RedAspect      = RedSensor.On  and GreenSensor.Off and BlockSensor.Off;
  alg bool RedGreenAspect = RedSensor.On  and GreenSensor.On  and BlockSensor.Off;
  alg bool GreenAspect    = RedSensor.Off and GreenSensor.On  and BlockSensor.Off;
  alg bool BlockAspect    = RedSensor.Off and GreenSensor.On  and BlockSensor.On;
  alg bool RedOn          = RedSensor.On;
  alg bool GreenOn        = GreenSensor.On;
  alg bool BlockOn        = BlockSensor.On;

  svgout id "SVS5.red"   attr "fill" value if RedSensor.On:   "red"   else "grey" end;
  svgout id "SVS5.green" attr "fill" value if GreenSensor.On: "green" else "grey" end;
  svgout id "SVS5.block" attr "fill" value if BlockSensor.On: "red"   else "grey" end;
end
group SVS2: //EnteringTrafficSign
  controllable c_r, c_rg, c_g,
               c_block_on, c_block_off,
               c_emergencystop;
  automaton ActuatorRG:
    location Red:
      initial;
      edge c_rg            goto RedGreen;
    location RedGreen:
      edge c_r             goto Red;
      edge c_g             goto Green;
      edge c_emergencystop goto Red;
    location Green:
      edge c_r             goto Red;
      edge c_emergencystop goto Red;
  end
  automaton ActuatorBlock:
    location On:
      initial;
      edge c_block_off goto Off;
    location Off:
      edge c_block_on  goto On;
  end
  automaton RedSensor:
    uncontrollable u_on, u_off;
    location On:
      initial;
      edge u_off goto Off;
    location Off:
      edge u_on  goto On;
  end
  automaton GreenSensor:
    uncontrollable u_on, u_off;
    location On:
      edge u_off goto Off;
    location Off:
      initial;
      edge u_on  goto On;
  end
  automaton BlockSensor:
    uncontrollable u_on, u_off;
    location On:
      initial;
      edge u_off goto Off;
    location Off:
      edge u_on  goto On;
  end

  automaton PhysicalRelations:
    location: initial;
      edge RedSensor.u_on    when ActuatorRG.Red or ActuatorRG.RedGreen;
      edge RedSensor.u_off   when ActuatorRG.Green;
      edge GreenSensor.u_on  when ActuatorRG.Green or ActuatorRG.RedGreen;
      edge GreenSensor.u_off when ActuatorRG.Red;
      edge BlockSensor.u_on  when ActuatorBlock.On;
      edge BlockSensor.u_off when ActuatorBlock.Off;
  end

  alg bool RedAspect      = RedSensor.On  and GreenSensor.Off and BlockSensor.Off;
  alg bool RedGreenAspect = RedSensor.On  and GreenSensor.On  and BlockSensor.Off;
  alg bool GreenAspect    = RedSensor.Off and GreenSensor.On  and BlockSensor.Off;
  alg bool BlockAspect    = RedSensor.Off and GreenSensor.On  and BlockSensor.On;
  alg bool RedOn          = RedSensor.On;
  alg bool GreenOn        = GreenSensor.On;
  alg bool BlockOn        = BlockSensor.On;

  svgout id "SVS2.red"   attr "fill" value if RedSensor.On:   "red"   else "grey" end;
  svgout id "SVS2.green" attr "fill" value if GreenSensor.On: "green" else "grey" end;
  svgout id "SVS2.block" attr "fill" value if BlockSensor.On: "red"   else "grey" end;
end
group SVS3: //EnteringTrafficSign
  controllable c_r, c_rg, c_g,
               c_block_on, c_block_off,
               c_emergencystop;
  automaton ActuatorRG:
    location Red:
      initial;
      edge c_rg            goto RedGreen;
    location RedGreen:
      edge c_r             goto Red;
      edge c_g             goto Green;
      edge c_emergencystop goto Red;
    location Green:
      edge c_r             goto Red;
      edge c_emergencystop goto Red;
  end
  automaton ActuatorBlock:
    location On:
      initial;
      edge c_block_off goto Off;
    location Off:
      edge c_block_on  goto On;
  end
  automaton RedSensor:
    uncontrollable u_on, u_off;
    location On:
      initial;
      edge u_off goto Off;
    location Off:
      edge u_on  goto On;
  end
  automaton GreenSensor:
    uncontrollable u_on, u_off;
    location On:
      edge u_off goto Off;
    location Off:
      initial;
      edge u_on  goto On;
  end
  automaton BlockSensor:
    uncontrollable u_on, u_off;
    location On:
      initial;
      edge u_off goto Off;
    location Off:
      edge u_on  goto On;
  end

  automaton PhysicalRelations:
    location: initial;
      edge RedSensor.u_on    when ActuatorRG.Red or ActuatorRG.RedGreen;
      edge RedSensor.u_off   when ActuatorRG.Green;
      edge GreenSensor.u_on  when ActuatorRG.Green or ActuatorRG.RedGreen;
      edge GreenSensor.u_off when ActuatorRG.Red;
      edge BlockSensor.u_on  when ActuatorBlock.On;
      edge BlockSensor.u_off when ActuatorBlock.Off;
  end

  alg bool RedAspect      = RedSensor.On  and GreenSensor.Off and BlockSensor.Off;
  alg bool RedGreenAspect = RedSensor.On  and GreenSensor.On  and BlockSensor.Off;
  alg bool GreenAspect    = RedSensor.Off and GreenSensor.On  and BlockSensor.Off;
  alg bool BlockAspect    = RedSensor.Off and GreenSensor.On  and BlockSensor.On;
  alg bool RedOn          = RedSensor.On;
  alg bool GreenOn        = GreenSensor.On;
  alg bool BlockOn        = BlockSensor.On;

  svgout id "SVS3.red"   attr "fill" value if RedSensor.On:   "red"   else "grey" end;
  svgout id "SVS3.green" attr "fill" value if GreenSensor.On: "green" else "grey" end;
  svgout id "SVS3.block" attr "fill" value if BlockSensor.On: "red"   else "grey" end;
end
group Bridge: //RotatingBridge
  controllable c_open, c_close, c_stop,
               c_emergencystop;

  automaton Actuator:
    cont position = 10.0 der if Opening and position > 0.0 : -1.0
                           elif Closing and position < 10.0: +1.0
                           else                               0.0 end;
    location Idle:
      initial;
      edge c_open  goto Opening;
      edge c_close goto Closing;
    location Opening:
      edge c_stop, c_emergencystop goto Idle;
    location Closing:
      edge c_stop, c_emergencystop goto Idle;
  end
  automaton Sensors:
    uncontrollable u_open_on, u_open_off, u_closed_on, u_closed_off;
    location Open:
      edge u_open_off   goto Intermediate;
    location Intermediate:
      edge u_open_on    goto Open;
      edge u_closed_on  goto Closed;
    location Closed:
      initial;
      edge u_closed_off goto Intermediate;
  end
  automaton PhysicalRelations:
    location: initial;
      edge Sensors.u_open_on    when Actuator.position <= 0.0;
      edge Sensors.u_open_off   when Actuator.position >  0.0;
      edge Sensors.u_closed_on  when Actuator.position >= 10.0;
      edge Sensors.u_closed_off when Actuator.position <  10.0;
  end
  alg bool Open   = Sensors.Open;
  alg bool Closed = Sensors.Closed;
  alg bool Moving = not Actuator.Idle;

  svgout id "Bridge.rotate" attr "transform" value fmt("rotate(%s)", scale(Actuator.position, 10, 0, 0, 90));

  requirement c_stop needs (Actuator.Opening and Sensors.Open) or
                           (Actuator.Closing and Sensors.Closed);
  requirement c_close needs not Closed;
  requirement c_open  needs not Open;
end
group SVS4: //EnteringTrafficSign
  controllable c_r, c_rg, c_g,
               c_block_on, c_block_off,
               c_emergencystop;
  automaton ActuatorRG:
    location Red:
      initial;
      edge c_rg            goto RedGreen;
    location RedGreen:
      edge c_r             goto Red;
      edge c_g             goto Green;
      edge c_emergencystop goto Red;
    location Green:
      edge c_r             goto Red;
      edge c_emergencystop goto Red;
  end
  automaton ActuatorBlock:
    location On:
      initial;
      edge c_block_off goto Off;
    location Off:
      edge c_block_on  goto On;
  end
  automaton RedSensor:
    uncontrollable u_on, u_off;
    location On:
      initial;
      edge u_off goto Off;
    location Off:
      edge u_on  goto On;
  end
  automaton GreenSensor:
    uncontrollable u_on, u_off;
    location On:
      edge u_off goto Off;
    location Off:
      initial;
      edge u_on  goto On;
  end
  automaton BlockSensor:
    uncontrollable u_on, u_off;
    location On:
      initial;
      edge u_off goto Off;
    location Off:
      edge u_on  goto On;
  end

  automaton PhysicalRelations:
    location: initial;
      edge RedSensor.u_on    when ActuatorRG.Red or ActuatorRG.RedGreen;
      edge RedSensor.u_off   when ActuatorRG.Green;
      edge GreenSensor.u_on  when ActuatorRG.Green or ActuatorRG.RedGreen;
      edge GreenSensor.u_off when ActuatorRG.Red;
      edge BlockSensor.u_on  when ActuatorBlock.On;
      edge BlockSensor.u_off when ActuatorBlock.Off;
  end

  alg bool RedAspect      = RedSensor.On  and GreenSensor.Off and BlockSensor.Off;
  alg bool RedGreenAspect = RedSensor.On  and GreenSensor.On  and BlockSensor.Off;
  alg bool GreenAspect    = RedSensor.Off and GreenSensor.On  and BlockSensor.Off;
  alg bool BlockAspect    = RedSensor.Off and GreenSensor.On  and BlockSensor.On;
  alg bool RedOn          = RedSensor.On;
  alg bool GreenOn        = GreenSensor.On;
  alg bool BlockOn        = BlockSensor.On;

  svgout id "SVS4.red"   attr "fill" value if RedSensor.On:   "red"   else "grey" end;
  svgout id "SVS4.green" attr "fill" value if GreenSensor.On: "green" else "grey" end;
  svgout id "SVS4.block" attr "fill" value if BlockSensor.On: "red"   else "grey" end;
end
group SVS1: //EnteringTrafficSign
  controllable c_r, c_rg, c_g,
               c_block_on, c_block_off,
               c_emergencystop;
  automaton ActuatorRG:
    location Red:
      initial;
      edge c_rg            goto RedGreen;
    location RedGreen:
      edge c_r             goto Red;
      edge c_g             goto Green;
      edge c_emergencystop goto Red;
    location Green:
      edge c_r             goto Red;
      edge c_emergencystop goto Red;
  end
  automaton ActuatorBlock:
    location On:
      initial;
      edge c_block_off goto Off;
    location Off:
      edge c_block_on  goto On;
  end
  automaton RedSensor:
    uncontrollable u_on, u_off;
    location On:
      initial;
      edge u_off goto Off;
    location Off:
      edge u_on  goto On;
  end
  automaton GreenSensor:
    uncontrollable u_on, u_off;
    location On:
      edge u_off goto Off;
    location Off:
      initial;
      edge u_on  goto On;
  end
  automaton BlockSensor:
    uncontrollable u_on, u_off;
    location On:
      initial;
      edge u_off goto Off;
    location Off:
      edge u_on  goto On;
  end

  automaton PhysicalRelations:
    location: initial;
      edge RedSensor.u_on    when ActuatorRG.Red or ActuatorRG.RedGreen;
      edge RedSensor.u_off   when ActuatorRG.Green;
      edge GreenSensor.u_on  when ActuatorRG.Green or ActuatorRG.RedGreen;
      edge GreenSensor.u_off when ActuatorRG.Red;
      edge BlockSensor.u_on  when ActuatorBlock.On;
      edge BlockSensor.u_off when ActuatorBlock.Off;
  end

  alg bool RedAspect      = RedSensor.On  and GreenSensor.Off and BlockSensor.Off;
  alg bool RedGreenAspect = RedSensor.On  and GreenSensor.On  and BlockSensor.Off;
  alg bool GreenAspect    = RedSensor.Off and GreenSensor.On  and BlockSensor.Off;
  alg bool BlockAspect    = RedSensor.Off and GreenSensor.On  and BlockSensor.On;
  alg bool RedOn          = RedSensor.On;
  alg bool GreenOn        = GreenSensor.On;
  alg bool BlockOn        = BlockSensor.On;

  svgout id "SVS1.red"   attr "fill" value if RedSensor.On:   "red"   else "grey" end;
  svgout id "SVS1.green" attr "fill" value if GreenSensor.On: "green" else "grey" end;
  svgout id "SVS1.block" attr "fill" value if BlockSensor.On: "red"   else "grey" end;
end
group BB1: //BoomBarrier
  controllable c_open, c_close, c_stop,
               c_emergencystop;

  automaton Actuator:
    cont position = 0.0 der if Opening and position > 0.0 : -1.0
                          elif Closing and position < 10.0: +1.0
                          else                               0.0 end;
    location Idle:
      initial;
      edge c_open  goto Opening;
      edge c_close goto Closing;
    location Opening:
      edge c_stop, c_emergencystop goto Idle;
    location Closing:
      edge c_stop, c_emergencystop goto Idle;
  end
  automaton Sensors:
    uncontrollable u_open_on, u_open_off, u_closed_on, u_closed_off;
    location Open:
      initial;
      edge u_open_off   goto Intermediate;
    location Intermediate:
      edge u_open_on    goto Open;
      edge u_closed_on  goto Closed;
    location Closed:
      edge u_closed_off goto Intermediate;
  end
  automaton PhysicalRelations:
    location: initial;
      edge Sensors.u_open_on    when Actuator.position <= 0.0;
      edge Sensors.u_open_off   when Actuator.position >  0.0;
      edge Sensors.u_closed_on  when Actuator.position >= 10.0;
      edge Sensors.u_closed_off when Actuator.position <  10.0;
  end
  alg bool Open   = Sensors.Open;
  alg bool Closed = Sensors.Closed;
  alg bool Moving = not Actuator.Idle;

  svgout id "BB1.movement" attr "width" value scale(Actuator.position, 0, 10, 150, 0.1);
  requirement c_stop needs (Actuator.Opening and Sensors.Open) or
                           (Actuator.Closing and Sensors.Closed);
  requirement c_close needs not Closed;
  requirement c_open  needs not Open;
end
group BB2: //BoomBarrier
  controllable c_open, c_close, c_stop,
               c_emergencystop;

  automaton Actuator:
    cont position = 0.0 der if Opening and position > 0.0 : -1.0
                          elif Closing and position < 10.0: +1.0
                          else                               0.0 end;
    location Idle:
      initial;
      edge c_open  goto Opening;
      edge c_close goto Closing;
    location Opening:
      edge c_stop, c_emergencystop goto Idle;
    location Closing:
      edge c_stop, c_emergencystop goto Idle;
  end
  automaton Sensors:
    uncontrollable u_open_on, u_open_off, u_closed_on, u_closed_off;
    location Open:
      initial;
      edge u_open_off   goto Intermediate;
    location Intermediate:
      edge u_open_on    goto Open;
      edge u_closed_on  goto Closed;
    location Closed:
      edge u_closed_off goto Intermediate;
  end
  automaton PhysicalRelations:
    location: initial;
      edge Sensors.u_open_on    when Actuator.position <= 0.0;
      edge Sensors.u_open_off   when Actuator.position >  0.0;
      edge Sensors.u_closed_on  when Actuator.position >= 10.0;
      edge Sensors.u_closed_off when Actuator.position <  10.0;
  end
  alg bool Open   = Sensors.Open;
  alg bool Closed = Sensors.Closed;
  alg bool Moving = not Actuator.Idle;

  svgout id "BB2.movement" attr "width" value scale(Actuator.position, 0, 10, 150, 0.1);
  requirement c_stop needs (Actuator.Opening and Sensors.Open) or
                           (Actuator.Closing and Sensors.Closed);
  requirement c_close needs not Closed;
  requirement c_open  needs not Open;
end
group STS1: //StopSign
  controllable c_on, c_off;
  plant automaton Actuator:
    location On:
      initial; marked;
      edge c_off goto Off;
    location Off:
      edge c_on  goto On;
  end
  plant automaton Sensor:
    uncontrollable u_on, u_off;
    location On:
      initial; marked;
      edge u_off goto Off;
    location Off:
      edge u_on  goto On;
  end
  plant automaton PhysicalRelations:
    location: initial; marked;
      edge Sensor.u_on  when Actuator.On;
      edge Sensor.u_off when Actuator.Off;
  end
  alg bool On  = Sensor.On;
  alg bool Off = Sensor.Off;

  svgout id "STS1.lamp" attr "fill" value if Sensor.On: "red" else "grey" end;
end
group STS2: //StopSign
  controllable c_on, c_off;
  plant automaton Actuator:
    location On:
      initial; marked;
      edge c_off goto Off;
    location Off:
      edge c_on  goto On;
  end
  plant automaton Sensor:
    uncontrollable u_on, u_off;
    location On:
      initial; marked;
      edge u_off goto Off;
    location Off:
      edge u_on  goto On;
  end
  plant automaton PhysicalRelations:
    location: initial; marked;
      edge Sensor.u_on  when Actuator.On;
      edge Sensor.u_off when Actuator.Off;
  end
  alg bool On  = Sensor.On;
  alg bool Off = Sensor.Off;

  svgout id "STS2.lamp" attr "fill" value if Sensor.On: "red" else "grey" end;
end
group STS3: //StopSign
  controllable c_on, c_off;
  plant automaton Actuator:
    location On:
      initial; marked;
      edge c_off goto Off;
    location Off:
      edge c_on  goto On;
  end
  plant automaton Sensor:
    uncontrollable u_on, u_off;
    location On:
      initial; marked;
      edge u_off goto Off;
    location Off:
      edge u_on  goto On;
  end
  plant automaton PhysicalRelations:
    location: initial; marked;
      edge Sensor.u_on  when Actuator.On;
      edge Sensor.u_off when Actuator.Off;
  end
  alg bool On  = Sensor.On;
  alg bool Off = Sensor.Off;

  svgout id "STS3.lamp" attr "fill" value if Sensor.On: "red" else "grey" end;
end
group STS4: //StopSign
  controllable c_on, c_off;
  plant automaton Actuator:
    location On:
      initial; marked;
      edge c_off goto Off;
    location Off:
      edge c_on  goto On;
  end
  plant automaton Sensor:
    uncontrollable u_on, u_off;
    location On:
      initial; marked;
      edge u_off goto Off;
    location Off:
      edge u_on  goto On;
  end
  plant automaton PhysicalRelations:
    location: initial; marked;
      edge Sensor.u_on  when Actuator.On;
      edge Sensor.u_off when Actuator.Off;
  end
  alg bool On  = Sensor.On;
  alg bool Off = Sensor.Off;

  svgout id "STS4.lamp" attr "fill" value if Sensor.On: "red" else "grey" end;
end
group STS5: //StopSign
  controllable c_on, c_off;
  plant automaton Actuator:
    location On:
      initial; marked;
      edge c_off goto Off;
    location Off:
      edge c_on  goto On;
  end
  plant automaton Sensor:
    uncontrollable u_on, u_off;
    location On:
      initial; marked;
      edge u_off goto Off;
    location Off:
      edge u_on  goto On;
  end
  plant automaton PhysicalRelations:
    location: initial; marked;
      edge Sensor.u_on  when Actuator.On;
      edge Sensor.u_off when Actuator.Off;
  end
  alg bool On  = Sensor.On;
  alg bool Off = Sensor.Off;

  svgout id "STS5.lamp" attr "fill" value if Sensor.On: "red" else "grey" end;
end
