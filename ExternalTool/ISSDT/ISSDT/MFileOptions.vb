Imports System.Runtime.Remoting.Messaging
Imports System.Text
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq
Imports System.Linq
Imports System.Net
Imports Microsoft.VisualBasic.Devices
Imports System.Security.Policy
Imports Newtonsoft
Imports System.Security.Cryptography
Imports System.Runtime.InteropServices.ComTypes
Imports System.Runtime.Remoting.Contexts
''' <summary>
''' This module contains all code related to saving and opening files and the info button and new file button.
''' </summary>
Module MFileOptions
    Dim workingFileName As String
    Dim canvasPlant As CCanvas
    Dim changedAfterSave As Boolean

    ''' <summary>
    ''' Initializes the MFileOptions module.
    ''' </summary>
    ''' <param name="newCanvasPlant">The canvas to draw the plant on.</param>
    ''' <param name="newChangedAfterSave">The variable that represents if a save is necessary.</param>
    Public Sub Initialize(ByRef newCanvasPlant As CCanvas, ByRef newChangedAfterSave As Boolean)
        canvasPlant = newCanvasPlant
        changedAfterSave = newChangedAfterSave

        AddHandler ISSDT.InfoToolStripMenuItem.Click, AddressOf InfoToolStripMenuItem_Click
        AddHandler ISSDT.OpenToolStripMenuItem.Click, AddressOf OpenToolStripMenuItem_Click
        AddHandler ISSDT.SaveToolStripMenuItem.Click, AddressOf SaveToolStripMenuItem_Click
        AddHandler ISSDT.SaveAsToolStripMenuItem.Click, AddressOf SaveAsToolStripMenuItem_Click
        AddHandler ISSDT.NewToolStripMenuItem.Click, AddressOf NewToolStripMenuItem_Click
    End Sub

    Private Sub InfoToolStripMenuItem_Click()
        MsgBox("This application is used to create a JSON file that can be used to create a Digital Twin of a waterlock", vbOKOnly + vbInformation, "Info")
    End Sub

    ''' <summary>
    ''' This method lets the user open a file from windows explorer. If the current model is not saved, a confirmation is requested.
    ''' </summary>
    Private Sub OpenToolStripMenuItem_Click()
        If changedAfterSave Then
            Select Case MsgBox("Are you sure? All unsaved progress will be lost.", MsgBoxStyle.YesNoCancel, "Confirm")
                Case MsgBoxResult.Cancel, MsgBoxResult.No
                    Exit Sub
            End Select
        End If

        ISSDT.OpenFileDialog.ShowDialog()
        workingFileName = ISSDT.OpenFileDialog.FileName
        If String.IsNullOrEmpty(workingFileName) Then
            MsgBox("FileName error, please correct.", vbCritical, "Error")
            Exit Sub
        End If
        ClearCanvas()
        OpenRoutine(workingFileName)
    End Sub

    ''' <summary>
    ''' This method creates a model from a loaded file.
    ''' </summary>
    ''' <param name="fileName">The file to load.</param>
    Private Sub OpenRoutine(fileName As String)
        Dim requirementPart As Boolean = False
        Using MyReader As New FileIO.TextFieldParser(fileName)
            MyReader.TextFieldType = FileIO.FieldType.Delimited
            MyReader.SetDelimiters(",")

            Dim currentRow As String()
            While Not MyReader.EndOfData
                Try
                    currentRow = MyReader.ReadFields()
                    If currentRow(0) = "<Requirements>" Then
                        requirementPart = True
                        Continue While
                    End If


                    Dim comp As CComponent = CreateComponent(currentRow)
                    comp.canvas.Controls.Add(comp)

                Catch ex As FileIO.MalformedLineException
                    MsgBox("File error, please correct.", vbCritical, "Error")
                End Try
            End While
        End Using
    End Sub

    ''' <summary>
    ''' Creates a component from a string generated by the save file routine.
    ''' </summary>
    ''' <param name="compString">The string that represents the component.</param>
    ''' <returns>The component.</returns>
    Private Function CreateComponent(compString As String()) As CComponent
        Dim name As String = compString(0)
        Dim compType As ComponentTypesEnum = compString(1)
        Dim location As Point = New Point(compString(2), compString(3))
        Dim canvas As CCanvas = canvasPlant
        Dim size As Size = New Size(compString(4), compString(5))
        Dim rotation As Integer = compString(6)
        Dim color As Color = Color.FromArgb(compString(7))

        Select Case compType
            Case ComponentTypesEnum.Square
                Dim compSquare = New Square(name, compType, location, canvas, size, color)
                Return compSquare

            Case ComponentTypesEnum.TextLabel
                Dim compTextLabel = New TextLabel(name, compType, location, canvas, size, color)
                compTextLabel.Text = compString(9)
                Return compTextLabel

            Case ComponentTypesEnum.MitreGate
                Dim compMitreGate = New MitreGate(name, compType, location, canvas, size, rotation, color)
                Return compMitreGate

            Case ComponentTypesEnum.TL_Entering
                Dim compTL_Entering = New TL_Entering(name, compType, location, canvas, size, rotation, color)
                Return compTL_Entering

            Case ComponentTypesEnum.TL_Leaving
                Dim compTL_Leaving = New TL_Leaving(name, compType, location, canvas, size, rotation, color)
                Return compTL_Leaving

            Case ComponentTypesEnum.LockWall
                Dim compLockWall = New LockWall(name, compType, location, canvas, size, rotation, color)
                Return compLockWall

            Case ComponentTypesEnum.Water
                Dim compWater = New Water(name, compType, location, canvas, size, rotation, color)
                Return compWater

            Case ComponentTypesEnum.Quay
                Dim compQuay = New Quay(name, compType, location, canvas, size, rotation, color)
                Return compQuay

            Case Else
                'Something went wrong.
                Return Nothing

        End Select
    End Function

    Private Sub SaveToolStripMenuItem_Click()
        SaveRoutine(workingFileName)
    End Sub

    Private Sub SaveAsToolStripMenuItem_Click()
        SaveRoutine("")
    End Sub

    ''' <summary>
    ''' This method saves the canvas to a file. 
    ''' </summary>
    ''' <param name="fileName"></param>
    Public Sub SaveRoutine(fileName As String)
        If String.IsNullOrEmpty(fileName) Then
            ISSDT.SaveFileDialog.ShowDialog()
            workingFileName = ISSDT.SaveFileDialog.FileName
            If String.IsNullOrEmpty(workingFileName) Then Exit Sub
        End If

        Dim saveFile As IO.StreamWriter
        saveFile = IO.File.CreateText(workingFileName)

        For Each comp As CComponent In canvasPlant.Controls.OfType(Of CComponent)()
            SaveComponent(comp, saveFile)
        Next

        saveFile.Close()
        changedAfterSave = False
    End Sub

    ''' <summary>
    ''' Saves the component information as a line in a file.
    ''' </summary>
    ''' <param name="comp">The component to save.</param>
    ''' <param name="saveFile">The file to save to.</param>
    Private Sub SaveComponent(comp As CComponent, saveFile As IO.StreamWriter)
        'Name, Type, Location.X, Location.Y, Size.Width, Size.Height, Rotation, Color.
        saveFile.Write(comp.Name + ", " + Convert.ToInt32(comp.Type).ToString + ", " + comp.Location.X.ToString + ", " _
                               + comp.Location.Y.ToString + ", " + comp.Size.Width.ToString + ", " + comp.Size.Height.ToString _
                               + ", " + comp.Rotation.ToString + ", " + comp.BackColor.ToArgb.ToString)


        'Component specific save options.
        Select Case comp.GetType
            Case GetType(Square)
                Dim compSquare As Square = DirectCast(comp, Square)

            Case GetType(TextLabel)
                Dim compTextLabel As TextLabel = DirectCast(comp, TextLabel)
                saveFile.Write(", " + compTextLabel.Text)

                'Case GetType(RotatingBridge)
                '    Dim compRotatingBridge As RotatingBridge = DirectCast(comp, RotatingBridge)

            Case Else
                MsgBox("Error undefined component type: " + comp.GetType.ToString, MsgBoxStyle.Critical)
        End Select
        saveFile.WriteLine()
    End Sub

    ''' <summary>
    ''' This method clears the canvas. If the current canvas is not saved, a confirmation is requested.
    ''' </summary>
    Private Sub NewToolStripMenuItem_Click()
        If changedAfterSave Then
            Select Case MsgBox("Are you sure? All unsaved progress will be lost.", MsgBoxStyle.YesNoCancel, "Confirm")
                Case MsgBoxResult.Cancel, MsgBoxResult.No
                    Exit Sub
            End Select
        End If
        ClearCanvas()
    End Sub

    ''' <summary>
    ''' This method removes all the component from the canvas.
    ''' </summary>
    Private Sub ClearCanvas()
        canvasPlant.Controls.Clear()

        ISSDT.canvasPlant.ResetActive()

    End Sub

    ''' <summary>
    ''' This method saves the canvas to a file. 
    ''' </summary>
    ''' <param name="fileName"></param>
    Public Sub ExtractJSON(fileName As String)

        Dim name = InputBox("Enter a name for this configuration", "Name")

        If name = "" Then
            name = "MyConfiguration" + Date.Now.ToString("MMddyyyy")
        End If

        Dim cluster As Integer
        Dim dummycluster = InputBox(Prompt:="To which cluster does this configuration belong?", DefaultResponse:=5)

        If dummycluster = "" Or dummycluster = "5" Then
            cluster = 5
        End If


        Dim tempvarposition = New Newtonsoft.Json.Linq.JArray({0, 0, 0})
        Dim tempvarname = "Template"
        Dim tempvarempty = New Newtonsoft.Json.Linq.JArray({})




        If String.IsNullOrEmpty(fileName) Then
            ISSDT.SaveFileDialogJSON.ShowDialog()
            workingFileName = ISSDT.SaveFileDialogJSON.FileName

            If String.IsNullOrEmpty(workingFileName) Then Exit Sub
        End If



        'Initialize Json data
        Dim initJson As String = Newtonsoft.Json.Linq.JObject.FromObject(New With {
            .name = name,
            .cluster = cluster,
            .waterways = New Newtonsoft.Json.Linq.JArray({})
        }).ToString


        'Parse jObject
        Dim initial As Newtonsoft.Json.Linq.JObject = Nothing
        Try
            initial = Newtonsoft.Json.Linq.JObject.Parse(initJson)
        Catch ex As Exception
            initial = New Newtonsoft.Json.Linq.JObject()
        End Try


        'Define general waterway Json structure
        Dim waterwaysinit1 As Newtonsoft.Json.Linq.JObject = New Newtonsoft.Json.Linq.JObject
        waterwaysinit1.Add(New Newtonsoft.Json.Linq.JProperty("position", tempvarposition))
        waterwaysinit1.Add(New Newtonsoft.Json.Linq.JProperty("name", "Waterway1"))
        waterwaysinit1.Add(New Newtonsoft.Json.Linq.JProperty("doors", tempvarempty))
        waterwaysinit1.Add(New Newtonsoft.Json.Linq.JProperty("traffic_lights", tempvarempty))
        waterwaysinit1.Add(New Newtonsoft.Json.Linq.JProperty("walls", tempvarempty))
        waterwaysinit1.Add(New Newtonsoft.Json.Linq.JProperty("water", tempvarempty))
        waterwaysinit1.Add(New Newtonsoft.Json.Linq.JProperty("embankments", tempvarempty))

        Dim waterwaysinit2 As Newtonsoft.Json.Linq.JObject = New Newtonsoft.Json.Linq.JObject
        waterwaysinit2.Add(New Newtonsoft.Json.Linq.JProperty("position", tempvarposition))
        waterwaysinit2.Add(New Newtonsoft.Json.Linq.JProperty("name", "Waterway2"))
        waterwaysinit2.Add(New Newtonsoft.Json.Linq.JProperty("doors", tempvarempty))
        waterwaysinit2.Add(New Newtonsoft.Json.Linq.JProperty("traffic_lights", tempvarempty))
        waterwaysinit2.Add(New Newtonsoft.Json.Linq.JProperty("walls", tempvarempty))
        waterwaysinit2.Add(New Newtonsoft.Json.Linq.JProperty("water", tempvarempty))
        waterwaysinit2.Add(New Newtonsoft.Json.Linq.JProperty("embankments", tempvarempty))

        Dim waterwaysinit3 As Newtonsoft.Json.Linq.JObject = New Newtonsoft.Json.Linq.JObject
        waterwaysinit3.Add(New Newtonsoft.Json.Linq.JProperty("position", tempvarposition))
        waterwaysinit3.Add(New Newtonsoft.Json.Linq.JProperty("name", "Waterway3"))
        waterwaysinit3.Add(New Newtonsoft.Json.Linq.JProperty("doors", tempvarempty))
        waterwaysinit3.Add(New Newtonsoft.Json.Linq.JProperty("traffic_lights", tempvarempty))
        waterwaysinit3.Add(New Newtonsoft.Json.Linq.JProperty("walls", tempvarempty))
        waterwaysinit3.Add(New Newtonsoft.Json.Linq.JProperty("water", tempvarempty))
        waterwaysinit3.Add(New Newtonsoft.Json.Linq.JProperty("embankments", tempvarempty))

        Dim waterwaysinit4 As Newtonsoft.Json.Linq.JObject = New Newtonsoft.Json.Linq.JObject
        waterwaysinit4.Add(New Newtonsoft.Json.Linq.JProperty("position", tempvarposition))
        waterwaysinit4.Add(New Newtonsoft.Json.Linq.JProperty("name", "Waterway4"))
        waterwaysinit4.Add(New Newtonsoft.Json.Linq.JProperty("doors", tempvarempty))
        waterwaysinit4.Add(New Newtonsoft.Json.Linq.JProperty("traffic_lights", tempvarempty))
        waterwaysinit4.Add(New Newtonsoft.Json.Linq.JProperty("walls", tempvarempty))
        waterwaysinit4.Add(New Newtonsoft.Json.Linq.JProperty("water", tempvarempty))
        waterwaysinit4.Add(New Newtonsoft.Json.Linq.JProperty("embankments", tempvarempty))

        Dim waterwaysinit5 As Newtonsoft.Json.Linq.JObject = New Newtonsoft.Json.Linq.JObject
        waterwaysinit5.Add(New Newtonsoft.Json.Linq.JProperty("position", tempvarposition))
        waterwaysinit5.Add(New Newtonsoft.Json.Linq.JProperty("name", "Waterway5"))
        waterwaysinit5.Add(New Newtonsoft.Json.Linq.JProperty("doors", tempvarempty))
        waterwaysinit5.Add(New Newtonsoft.Json.Linq.JProperty("traffic_lights", tempvarempty))
        waterwaysinit5.Add(New Newtonsoft.Json.Linq.JProperty("walls", tempvarempty))
        waterwaysinit5.Add(New Newtonsoft.Json.Linq.JProperty("water", tempvarempty))
        waterwaysinit5.Add(New Newtonsoft.Json.Linq.JProperty("embankments", tempvarempty))


        'Add general waterway Json structure
        Dim waterway As JArray = initial("waterways")


        Dim activate1 = False
        Dim activate2 = False
        Dim activate3 = False
        Dim activate4 = False
        Dim activate5 = False


        For Each row As DataGridViewRow In ISSDT.DGVoverview.Rows
            If row.Cells(0).Value = 1 And Not activate1 Then
                waterway.Add(waterwaysinit1)
                activate1 = True
            ElseIf row.Cells(0).Value = 2 And Not activate2 Then
                waterway.Add(waterwaysinit2)
                activate2 = True
            ElseIf row.Cells(0).Value = 3 And Not activate3 Then
                waterway.Add(waterwaysinit3)
                activate3 = True
            ElseIf row.Cells(0).Value = 4 And Not activate4 Then
                waterway.Add(waterwaysinit4)
                activate4 = True
            ElseIf row.Cells(0).Value = 5 And Not activate5 Then
                waterway.Add(waterwaysinit5)
                activate5 = True
            End If
        Next





        For Each comp As CComponent In canvasPlant.Controls.OfType(Of CComponent)()

            Dim waterwaysinit = waterwaysinit1
            For Each row As DataGridViewRow In ISSDT.DGVoverview.Rows
                If row.Cells(1).Value = comp.Name Then
                    If row.Cells(0).Value = 1 Then
                        waterwaysinit = waterwaysinit1
                    ElseIf row.Cells(0).Value = 2 Then
                        waterwaysinit = waterwaysinit2
                    ElseIf row.Cells(0).Value = 3 Then
                        waterwaysinit = waterwaysinit3
                    ElseIf row.Cells(0).Value = 4 Then
                        waterwaysinit = waterwaysinit4
                    ElseIf row.Cells(0).Value = 5 Then
                        waterwaysinit = waterwaysinit5
                    End If

                End If
            Next


            Dim rotation = 1
            If comp.Rotation = 0 Then
                rotation = 1
            ElseIf comp.Rotation = 90 Then
                rotation = 1
            ElseIf comp.Rotation = 180 Then
                rotation = -1
            ElseIf comp.Rotation = 270 Then
                rotation = -1
            End If


            If Convert.ToInt32(comp.Type).ToString = MComponentTypes.ComponentTypesEnum.MitreGate Then

                Dim door As Newtonsoft.Json.Linq.JObject = New Newtonsoft.Json.Linq.JObject
                door.Add(New Newtonsoft.Json.Linq.JProperty("type", 0))
                door.Add(New Newtonsoft.Json.Linq.JProperty("direction", rotation))
                door.Add(New Newtonsoft.Json.Linq.JProperty("width", comp.Size.Height))
                door.Add(New Newtonsoft.Json.Linq.JProperty("name", comp.Name.ToString))
                door.Add(New Newtonsoft.Json.Linq.JProperty("position", New Newtonsoft.Json.Linq.JArray({comp.Location.Y, 0, comp.Location.X})))

                'Add general doors Json structure
                Dim doors As JArray = waterwaysinit("doors")
                doors.Add(door)

            ElseIf Convert.ToInt32(comp.Type).ToString = MComponentTypes.ComponentTypesEnum.TL_Entering Then

                'Define general traffic light Json structure template
                Dim TL As Newtonsoft.Json.Linq.JObject = New Newtonsoft.Json.Linq.JObject
                TL.Add(New Newtonsoft.Json.Linq.JProperty("type", 0))
                TL.Add(New Newtonsoft.Json.Linq.JProperty("direction", rotation))
                TL.Add(New Newtonsoft.Json.Linq.JProperty("scale", comp.Size.Height))
                TL.Add(New Newtonsoft.Json.Linq.JProperty("name", comp.Name.ToString))
                TL.Add(New Newtonsoft.Json.Linq.JProperty("position", New Newtonsoft.Json.Linq.JArray({comp.Location.Y, 150, comp.Location.X})))

                'Add general traffic light Json structure
                Dim TLs As JArray = waterwaysinit("traffic_lights")
                TLs.Add(TL)

            ElseIf Convert.ToInt32(comp.Type).ToString = MComponentTypes.ComponentTypesEnum.TL_Leaving Then

                'Define general traffic light Json structure template
                Dim TL As Newtonsoft.Json.Linq.JObject = New Newtonsoft.Json.Linq.JObject
                TL.Add(New Newtonsoft.Json.Linq.JProperty("type", 1))
                TL.Add(New Newtonsoft.Json.Linq.JProperty("direction", rotation))
                TL.Add(New Newtonsoft.Json.Linq.JProperty("scale", comp.Size.Height))
                TL.Add(New Newtonsoft.Json.Linq.JProperty("name", comp.Name.ToString))
                TL.Add(New Newtonsoft.Json.Linq.JProperty("position", New Newtonsoft.Json.Linq.JArray({comp.Location.Y, 150, comp.Location.X})))

                'Add general traffic light Json structure
                Dim TLs As JArray = waterwaysinit("traffic_lights")
                TLs.Add(TL)

            ElseIf Convert.ToInt32(comp.Type).ToString = MComponentTypes.ComponentTypesEnum.LockWall Then

                'Define general wall Json structure template
                Dim wall As Newtonsoft.Json.Linq.JObject = New Newtonsoft.Json.Linq.JObject
                wall.Add(New Newtonsoft.Json.Linq.JProperty("direction", rotation))
                wall.Add(New Newtonsoft.Json.Linq.JProperty("length", comp.Size.Height))
                wall.Add(New Newtonsoft.Json.Linq.JProperty("position", New Newtonsoft.Json.Linq.JArray({comp.Location.Y, comp.Location.X, 0})))

                'Add general wall Json structure
                Dim walls As JArray = waterwaysinit("walls")
                walls.Add(wall)

            ElseIf Convert.ToInt32(comp.Type).ToString = MComponentTypes.ComponentTypesEnum.Water Then

                'Define general water Json structure template
                Dim water As Newtonsoft.Json.Linq.JObject = New Newtonsoft.Json.Linq.JObject
                water.Add(New Newtonsoft.Json.Linq.JProperty("length", comp.Size.Width))
                water.Add(New Newtonsoft.Json.Linq.JProperty("width", comp.Size.Height))
                water.Add(New Newtonsoft.Json.Linq.JProperty("position", New Newtonsoft.Json.Linq.JArray({CInt(comp.Location.Y * 1.5), 100, CInt(comp.Location.X * 1.75)})))

                'Add general water Json structure
                Dim waters As JArray = waterwaysinit("water")
                waters.Add(water)

            ElseIf Convert.ToInt32(comp.Type).ToString = MComponentTypes.ComponentTypesEnum.Quay Then

                Dim embankment As Newtonsoft.Json.Linq.JObject = New Newtonsoft.Json.Linq.JObject
                embankment.Add(New Newtonsoft.Json.Linq.JProperty("length", comp.Size.Width))
                embankment.Add(New Newtonsoft.Json.Linq.JProperty("width", comp.Size.Height))
                embankment.Add(New Newtonsoft.Json.Linq.JProperty("height", CDbl(comp.Size.Height.ToString)))
                embankment.Add(New Newtonsoft.Json.Linq.JProperty("position", New Newtonsoft.Json.Linq.JArray({CDbl((comp.Location.Y * 1.1).ToString), comp.Size.Height * 1.75, CInt(comp.Location.X * 1.75)})))

                'Add general water Json structure
                Dim embankments As JArray = waterwaysinit("embankments")
                embankments.Add(embankment)

            End If


        Next

        'Saving
        'MsgBox(initial.ToString(Newtonsoft.Json.Formatting.Indented))
        IO.File.WriteAllText(workingFileName, initial.ToString(Newtonsoft.Json.Formatting.Indented))

        changedAfterSave = False

    End Sub

End Module
