Imports System.Runtime.Remoting.Messaging
Imports System.Text
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq
Imports System.Linq
Imports System.Net
Imports Microsoft.VisualBasic.Devices
Imports System.Security.Policy
Imports Newtonsoft
''' <summary>
''' This module contains all code related to saving and opening files and the info button and new file button.
''' </summary>
Module MFileOptions
    Dim workingFileName As String
    Dim canvasPlant As CCanvas
    Dim canvasGUI As CCanvas
    Dim requirements As DataGridView
    Dim changedAfterSave As Boolean

    ''' <summary>
    ''' Initializes the MFileOptions module.
    ''' </summary>
    ''' <param name="newCanvasPlant">The canvas to draw the plant on.</param>
    ''' <param name="newCanvasGUI">The canvas to draw the GUI on.</param>
    ''' <param name="newRequirements">The DataGrid where the requirements are defined.</param>
    ''' <param name="newChangedAfterSave">The variable that represents if a save is necessary.</param>
    Public Sub Initialize(ByRef newCanvasPlant As CCanvas, ByRef newCanvasGUI As CCanvas, ByRef newRequirements As DataGridView, ByRef newChangedAfterSave As Boolean)
        canvasPlant = newCanvasPlant
        canvasGUI = newCanvasGUI
        requirements = newRequirements
        changedAfterSave = newChangedAfterSave

        AddHandler ISSDT.InfoToolStripMenuItem.Click, AddressOf InfoToolStripMenuItem_Click
        AddHandler ISSDT.OpenToolStripMenuItem.Click, AddressOf OpenToolStripMenuItem_Click
        AddHandler ISSDT.SaveToolStripMenuItem.Click, AddressOf SaveToolStripMenuItem_Click
        AddHandler ISSDT.SaveAsToolStripMenuItem.Click, AddressOf SaveAsToolStripMenuItem_Click
        AddHandler ISSDT.NewToolStripMenuItem.Click, AddressOf NewToolStripMenuItem_Click
    End Sub

    Private Sub InfoToolStripMenuItem_Click()
        MsgBox("This application acts as a proof-of-concept for modeling of infrastructural systems via templates", vbOKOnly + vbInformation, "Info")
    End Sub

    ''' <summary>
    ''' This method lets the user open a file from windows explorer. If the current model is not saved, a confirmation is requested.
    ''' </summary>
    Private Sub OpenToolStripMenuItem_Click()
        If changedAfterSave Then
            Select Case MsgBox("Are you sure? All unsaved progress will be lost.", MsgBoxStyle.YesNoCancel, "Confirm")
                Case MsgBoxResult.Cancel, MsgBoxResult.No
                    Exit Sub
            End Select
        End If

        ISSDT.OpenFileDialog.ShowDialog()
        workingFileName = ISSDT.OpenFileDialog.FileName
        If String.IsNullOrEmpty(workingFileName) Then
            MsgBox("FileName error, please correct.", vbCritical, "Error")
            Exit Sub
        End If
        ClearCanvas()
        OpenRoutine(workingFileName)
    End Sub

    ''' <summary>
    ''' This method creates a model from a loaded file.
    ''' </summary>
    ''' <param name="fileName">The file to load.</param>
    Private Sub OpenRoutine(fileName As String)
        Dim requirementPart As Boolean = False
        Using MyReader As New FileIO.TextFieldParser(fileName)
            MyReader.TextFieldType = FileIO.FieldType.Delimited
            MyReader.SetDelimiters(",")

            Dim currentRow As String()
            While Not MyReader.EndOfData
                Try
                    currentRow = MyReader.ReadFields()
                    If currentRow(0) = "<Requirements>" Then
                        requirementPart = True
                        Continue While
                    End If

                    If Not requirementPart Then
                        Dim comp As CComponent = CreateComponent(currentRow)
                        comp.canvas.Controls.Add(comp)
                    Else
                        AddRequirement(currentRow(0), currentRow(1), currentRow(2) + " ", currentRow(3))
                    End If

                Catch ex As FileIO.MalformedLineException
                    MsgBox("File error, please correct.", vbCritical, "Error")
                End Try
            End While
        End Using
    End Sub

    ''' <summary>
    ''' Creates a component from a string generated by the save file routine.
    ''' </summary>
    ''' <param name="compString">The string that represents the component.</param>
    ''' <returns>The component.</returns>
    Private Function CreateComponent(compString As String()) As CComponent
        Dim name As String = compString(0)
        Dim compType As ComponentTypesEnum = compString(1)
        Dim location As Point = New Point(compString(2), compString(3))
        Dim canvas As CCanvas = IntToComponentCanvas(compString(4))
        Dim size As Size = New Size(compString(5), compString(6))
        Dim rotation As Integer = compString(7)
        Dim color As Color = Color.FromArgb(compString(8))

        Select Case compType
            Case ComponentTypesEnum.StopSign
                Dim compStopSign = New StopSign(name, compType, location, canvas, size, rotation, color)
                compStopSign.standAlone = compString(9)
                compStopSign.actuator = compString(10)
                Return compStopSign

            Case ComponentTypesEnum.ApproachSign
                Dim compApproachSign = New ApproachSign(name, compType, location, canvas, size, rotation, color)
                compApproachSign.StandAlone = compString(9)
                compApproachSign.Actuator = compString(10)
                Return compApproachSign

            Case ComponentTypesEnum.BoomBarrier
                Dim compBoomBarrier = New BoomBarrier(name, compType, location, canvas, size, rotation, color)
                compBoomBarrier.barrierLights = compString(9)
                compBoomBarrier.BarrierLightsActuator = compString(10)
                Return compBoomBarrier

            Case ComponentTypesEnum.EnteringTrafficSign
                Dim compEnteringTrafficSign = New EnteringTrafficSign(name, compType, location, canvas, size, rotation, color)
                compEnteringTrafficSign.ControlledVia = compString(9)
                Return compEnteringTrafficSign

            Case ComponentTypesEnum.LeavingTrafficSign
                Dim compLeavingTrafficSign = New LeavingTrafficSign(name, compType, location, canvas, size, rotation, color)
                compLeavingTrafficSign.ControlledVia = compString(9)
                Return compLeavingTrafficSign

            Case ComponentTypesEnum.RotatingBridge
                Dim compRotatingBridge = New RotatingBridge(name, compType, location, canvas, size, rotation, color)
                Return compRotatingBridge

            Case ComponentTypesEnum.GUILeavingTrafficSign
                Dim compGUILeavingTrafficSign = New GUILeavingTrafficSign(name, compType, location, canvas, size, rotation, color)
                compGUILeavingTrafficSign.Green = compString(9)
                Return compGUILeavingTrafficSign

            Case ComponentTypesEnum.GUIEnteringTrafficSign
                Dim compGUIEnteringTrafficSign = New GUIEnteringTrafficSign(name, compType, location, canvas, size, rotation, color)
                compGUIEnteringTrafficSign.Green = compString(9)
                compGUIEnteringTrafficSign.RedGreen = compString(10)
                Return compGUIEnteringTrafficSign

            Case ComponentTypesEnum.GUIRotatingBridge
                Dim compGUIRotatingBridge = New GUIRotatingBridge(name, compType, location, canvas, size, rotation, color)
                compGUIRotatingBridge.Bridge = compString(9)
                Return compGUIRotatingBridge

            Case ComponentTypesEnum.GUIStopSign
                Dim compGUIStopSign = New GUIStopSign(name, compType, location, canvas, size, rotation, color)
                compGUIStopSign.ActivatedCondition = compString(9)
                Return compGUIStopSign

            Case ComponentTypesEnum.GUIBoomBarrier
                Dim compGUIBoombarrier = New GUIBoomBarrier(name, compType, location, canvas, size, rotation, color)
                compGUIBoombarrier.BoomBarrier = compString(9)
                Return compGUIBoombarrier

            Case ComponentTypesEnum.GUIBridgeWindow
                Dim compGUIBridgeWindow = New GUIBridgeWindow(name, compType, location, canvas, size, rotation, color)
                compGUIBridgeWindow.LTStopped = compString(9)
                compGUIBridgeWindow.LTReleased = compString(10)
                compGUIBridgeWindow.BBClosed = compString(11)
                compGUIBridgeWindow.BBOpen = compString(12)
                compGUIBridgeWindow.BBStopped = compString(13)
                compGUIBridgeWindow.BOpen = compString(14)
                compGUIBridgeWindow.BClosed = compString(15)
                compGUIBridgeWindow.BStopped = compString(16)
                Return compGUIBridgeWindow

            Case ComponentTypesEnum.Square
                Dim compSquare = New Square(name, compType, location, canvas, size, color)
                Return compSquare

            Case ComponentTypesEnum.Timer
                Dim compTimer = New Timer(name, compType, location, canvas, size, rotation, color)
                compTimer.duration = compString(9)
                compTimer.startCondition = compString(10)
                compTimer.stopCondition = compString(11)
                Return compTimer

            Case ComponentTypesEnum.Actuator
                Dim compActuator = New Actuator(name, compType, location, canvas, size, rotation, color)
                Return compActuator

            Case ComponentTypesEnum.Sensor
                Dim compSensor = New Sensor(name, compType, location, canvas, size, rotation, color)
                Return compSensor

            Case ComponentTypesEnum.StopSignDouble
                Dim compStopSignDouble = New StopSignDouble(name, compType, location, canvas, size, rotation, color)
                compStopSignDouble.standAlone = compString(9)
                compStopSignDouble.actuator = compString(10)
                Return compStopSignDouble

            Case ComponentTypesEnum.DrawBridge
                Dim compDrawBridge = New DrawBridge(name, compType, location, canvas, size, rotation, color)
                Return compDrawBridge

            Case ComponentTypesEnum.TextLabel
                Dim compTextLabel = New TextLabel(name, compType, location, canvas, size, color)
                compTextLabel.Text = compString(9)
                Return compTextLabel

            Case Else
                'Something went wrong.
                Return Nothing

        End Select
    End Function

    Private Sub SaveToolStripMenuItem_Click()
        SaveRoutine(workingFileName)
    End Sub

    Private Sub SaveAsToolStripMenuItem_Click()
        SaveRoutine("")
    End Sub

    ''' <summary>
    ''' This method saves the canvas to a file. 
    ''' </summary>
    ''' <param name="fileName"></param>
    Public Sub SaveRoutine(fileName As String)
        If String.IsNullOrEmpty(fileName) Then
            ISSDT.SaveFileDialog.ShowDialog()
            workingFileName = ISSDT.SaveFileDialog.FileName
            If String.IsNullOrEmpty(workingFileName) Then Exit Sub
        End If

        Dim saveFile As IO.StreamWriter
        saveFile = IO.File.CreateText(workingFileName)

        For Each comp As CComponent In canvasPlant.Controls.OfType(Of CComponent)().Concat(canvasGUI.Controls.OfType(Of CComponent)())
            SaveComponent(comp, saveFile)
        Next

        saveFile.WriteLine("<Requirements>")

        For Each req As DataGridViewRow In requirements.Rows
            SaveRequirement(req, saveFile)
        Next

        saveFile.Close()
        changedAfterSave = False
    End Sub

    ''' <summary>
    ''' Saves the component information as a line in a file.
    ''' </summary>
    ''' <param name="comp">The component to save.</param>
    ''' <param name="saveFile">The file to save to.</param>
    Private Sub SaveComponent(comp As CComponent, saveFile As IO.StreamWriter)
        'Name, Type, Location.X, Location.Y, Canvas(0 = plant, 1 = GUI), Size.Width, Size.Height, Rotation, Color.
        saveFile.Write(comp.Name + ", " + Convert.ToInt32(comp.Type).ToString + ", " + comp.Location.X.ToString + ", " _
                               + comp.Location.Y.ToString + ", " + ComponentCanvasToInt(comp).ToString + ", " + comp.Size.Width.ToString + ", " + comp.Size.Height.ToString _
                               + ", " + comp.Rotation.ToString + ", " + comp.BackColor.ToArgb.ToString)


        'Component specific save options.
        Select Case comp.GetType
            Case GetType(StopSign)
                Dim compStopSign As StopSign = DirectCast(comp, StopSign)
                saveFile.Write(", " + compStopSign.standAlone.ToString + ", " + compStopSign.actuator)

            Case GetType(ApproachSign)
                Dim compApproachSign As ApproachSign = DirectCast(comp, ApproachSign)
                saveFile.Write(", " + compApproachSign.StandAlone.ToString + ", " + compApproachSign.Actuator)

            Case GetType(BoomBarrier)
                Dim compBoomBarrier As BoomBarrier = DirectCast(comp, BoomBarrier)
                saveFile.Write(", " + compBoomBarrier.barrierLights + ", " + compBoomBarrier.BarrierLightsActuator)

            Case GetType(EnteringTrafficSign)
                Dim compEnteringTrafficSign As EnteringTrafficSign = DirectCast(comp, EnteringTrafficSign)
                saveFile.Write(", " + compEnteringTrafficSign.ControlledVia)

            Case GetType(LeavingTrafficSign)
                Dim compLeavingTrafficSign As LeavingTrafficSign = DirectCast(comp, LeavingTrafficSign)
                saveFile.Write(", " + compLeavingTrafficSign.ControlledVia)

            Case GetType(RotatingBridge)
                Dim compRotatingBridge As RotatingBridge = DirectCast(comp, RotatingBridge)

            Case GetType(GUILeavingTrafficSign)
                Dim compGUILeavingTrafficSign As GUILeavingTrafficSign = DirectCast(comp, GUILeavingTrafficSign)
                saveFile.Write(", " + compGUILeavingTrafficSign.Green)

            Case GetType(GUIEnteringTrafficSign)
                Dim compGUIEnteringTrafficSign As GUIEnteringTrafficSign = DirectCast(comp, GUIEnteringTrafficSign)
                saveFile.Write(", " + compGUIEnteringTrafficSign.Green + ", " + compGUIEnteringTrafficSign.RedGreen)

            Case GetType(GUIRotatingBridge)
                Dim compGUIRotatingBridge As GUIRotatingBridge = DirectCast(comp, GUIRotatingBridge)
                saveFile.Write(", " + compGUIRotatingBridge.Bridge)

            Case GetType(GUIStopSign)
                Dim compGUIStopSign As GUIStopSign = DirectCast(comp, GUIStopSign)
                saveFile.Write(", " + compGUIStopSign.ActivatedCondition)

            Case GetType(GUIBoomBarrier)
                Dim compGUIBoomBarrier As GUIBoomBarrier = DirectCast(comp, GUIBoomBarrier)
                saveFile.Write(", " + compGUIBoomBarrier.BoomBarrier)

            Case GetType(GUIBridgeWindow)
                Dim compGUIBridgeWindow As GUIBridgeWindow = DirectCast(comp, GUIBridgeWindow)
                saveFile.Write(", " + compGUIBridgeWindow.LTStopped + ", " + compGUIBridgeWindow.LTReleased + ", " + compGUIBridgeWindow.BBClosed +
                               ", " + compGUIBridgeWindow.BBOpen + ", " + compGUIBridgeWindow.BBStopped + ", " + compGUIBridgeWindow.BOpen +
                               ", " + compGUIBridgeWindow.BClosed + ", " + compGUIBridgeWindow.BStopped)

            Case GetType(Square)
                Dim compSquare As Square = DirectCast(comp, Square)

            Case GetType(Timer)
                Dim compTimer As Timer = DirectCast(comp, Timer)
                saveFile.Write(", " + compTimer.duration + ", " + compTimer.startCondition + ", " + compTimer.stopCondition)

            Case GetType(Actuator)
                Dim compActuator As Actuator = DirectCast(comp, Actuator)

            Case GetType(Sensor)
                Dim compActuator As Sensor = DirectCast(comp, Sensor)

            Case GetType(StopSignDouble)
                Dim compStopSignDouble As StopSignDouble = DirectCast(comp, StopSignDouble)
                saveFile.Write(", " + compStopSignDouble.standAlone.ToString + ", " + compStopSignDouble.actuator)

            Case GetType(DrawBridge)
                Dim compDrawBridge As DrawBridge = DirectCast(comp, DrawBridge)

            Case GetType(TextLabel)
                Dim compTextLabel As TextLabel = DirectCast(comp, TextLabel)
                saveFile.Write(", " + compTextLabel.Text)

            Case Else
                MsgBox("Error undefined component type: " + comp.GetType.ToString, MsgBoxStyle.Critical)
        End Select
        saveFile.WriteLine()
    End Sub

    ''' <summary>
    ''' Save the requirement information as a line in a file.
    ''' </summary>
    ''' <param name="req">The requirement to save.</param>
    ''' <param name="saveFile">The file to save to.</param>
    Private Sub SaveRequirement(req As DataGridViewRow, saveFile As IO.StreamWriter)
        saveFile.WriteLine(req.Cells(0).Value + ", " + req.Cells(1).Value.ToString + ", " + req.Cells(2).Value + ", " + req.Cells(3).Value.ToString)
    End Sub

    ''' <summary>
    ''' Returns the component parent as an Integer.
    ''' </summary>
    ''' <param name="comp">The component to get the parent for</param>
    ''' <returns>0 = canvasPlant, 1 = canvasGUI, and 2 otherwise.</returns>
    Private Function ComponentCanvasToInt(comp As CComponent) As Int16
        If comp.Parent Is ISSDT.canvasPlant Then
            Return 0
        ElseIf comp.Parent Is ISSDT.canvasGUI Then
            Return 1
        Else
            Return 2
        End If
    End Function

    ''' <summary>
    ''' Returns the canvas represented by the integer value.
    ''' </summary>
    ''' <param name="i">The integer value.</param>
    ''' <returns>0 -> canvasPlant, 1 -> canvasGUI, else -> nothing.</returns>
    Private Function IntToComponentCanvas(i As Int16) As CCanvas
        If i = 0 Then
            Return canvasPlant
        ElseIf i = 1 Then
            Return canvasGUI
        Else
            Return Nothing
        End If
    End Function

    ''' <summary>
    ''' This method clears the canvas. If the current canvas is not saved, a confirmation is requested.
    ''' </summary>
    Private Sub NewToolStripMenuItem_Click()
        If changedAfterSave Then
            Select Case MsgBox("Are you sure? All unsaved progress will be lost.", MsgBoxStyle.YesNoCancel, "Confirm")
                Case MsgBoxResult.Cancel, MsgBoxResult.No
                    Exit Sub
            End Select
        End If
        ClearCanvas()
    End Sub

    ''' <summary>
    ''' This method removes all the component from the canvas.
    ''' </summary>
    Private Sub ClearCanvas()
        canvasPlant.Controls.Clear()
        canvasGUI.Controls.Clear()

        ISSDT.canvasPlant.ResetActive()
        ISSDT.canvasGUI.ResetActive()

        requirements.Rows.Clear()
    End Sub

    ''' <summary>
    ''' This method saves the canvas to a file. 
    ''' </summary>
    ''' <param name="fileName"></param>
    Public Sub ExtractJSON(fileName As String)

        If String.IsNullOrEmpty(fileName) Then
            ISSDT.SaveFileDialogJSON.ShowDialog()
            workingFileName = ISSDT.SaveFileDialogJSON.FileName

            If String.IsNullOrEmpty(workingFileName) Then Exit Sub
        End If



        'Initialize Json data
        Dim initJson As String = Newtonsoft.Json.Linq.JObject.FromObject(New With {
            .name = "Prinses_Marijkesluis",
            .cluster = 5,
            .waterways = New Newtonsoft.Json.Linq.JArray({})
        }).ToString





        'Data to store

        'saveFile.WriteLine("Name, Type, Location.X, Location.Y, Canvas(0 = plant, 1 = GUI), Size.Width, Size.Height, Rotation, Color")

        'For Each comp As CComponent In canvasPlant.Controls.OfType(Of CComponent)().Concat(canvasGUI.Controls.OfType(Of CComponent)())
        '    'Name, Type, Location.X, Location.Y, Canvas(0 = plant, 1 = GUI), Size.Width, Size.Height, Rotation, Color.
        '    saveFile.WriteLine(comp.Name + ", " + Convert.ToInt32(comp.Type).ToString + ", " + comp.Location.X.ToString + ", " _
        '                           + comp.Location.Y.ToString + ", " + ComponentCanvasToInt(comp).ToString + ", " + comp.Size.Width.ToString + ", " + comp.Size.Height.ToString _
        '                           + ", " + comp.Rotation.ToString + ", " + comp.BackColor.ToArgb.ToString)
        'Next



        'create JSON Object
        Dim oError As Newtonsoft.Json.Linq.JObject = New Newtonsoft.Json.Linq.JObject
        oError.Add(New Newtonsoft.Json.Linq.JProperty("Error", "Help"))
        oError.Add(New Newtonsoft.Json.Linq.JProperty("URL", "URL"))

        'Create jArray

        'New Newtonsoft.Json.Linq.JArray({itm.ActionRequest, itm.QueryState})




        'Parse jObject
        Dim jParams As Newtonsoft.Json.Linq.JObject = Nothing
        Try
            jParams = Newtonsoft.Json.Linq.JObject.Parse(initJson)
        Catch ex As Exception
            jParams = New Newtonsoft.Json.Linq.JObject()
        End Try



        'add
        jParams.Add("DeviceId", 123)





        'Saving
        MsgBox(jParams.ToString(Newtonsoft.Json.Formatting.Indented))
        IO.File.WriteAllText(workingFileName, jParams.ToString(Newtonsoft.Json.Formatting.Indented))


        changedAfterSave = False

    End Sub

End Module
