<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Core</name>
    </assembly>
    <members>
        <member name="M:u040.prespective.core.scenechangetracking.components.TransformGroupDiff.checkHistoriesTheSame(u040.prespective.core.topology.GroupHistoryData,u040.prespective.core.topology.GroupHistoryData)">
            <summary>
            checks if the history data values are the same
            </summary>
            <param name="hist1"></param>
            <param name="hist2"></param>
            <returns></returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.TransformGroupDiff.applyChanges(u040.prespective.core.topology.AGroupMeshScriptBase)">
            <summary>
            applies the changes to the group
            </summary>
            <param group="_group"></param>
            <returns>if successfull</returns>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.components.MaterialRecord">
            <summary>
            @CLASS : MaterialRecord
            
            @ABOUT : record material
                     
            @AUTHOR : Tymen (Unit040)
            
            @VERSION : 1.00 - Implemented beta build(18-03-2020)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MaterialRecord.Present">
            <summary>
            if rigid body present
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MaterialRecord.Colour">
            <summary>
            colour of the material
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MaterialRecord.MaterialName">
            <summary>
            name of the material
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MaterialRecord.ShaderName">
            <summary>
            name of the shader of the material
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MaterialRecord.MaterialPath">
            <summary>
            stored path of the material
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.MaterialRecord.#ctor">
            <summary>
            empty constructor
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.MaterialRecord.#ctor(UnityEngine.Material)">
            <summary>
            constructor
            </summary>
            <param name="_mat">material</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.MaterialRecord.CheckForChanges(UnityEngine.Material)">
            <summary>
            if their are changes compared to this record
            </summary>
            <param name="_mat">material</param>
            <returns>if changes</returns>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.components.MaterialChangeRecord">
            <summary>
            @CLASS : MaterialChangeRecord
            
            @ABOUT : record material changes
                     
            @AUTHOR : Tymen (Unit040)
            
            @VERSION : 1.00 - Implemented beta build(18-03-2020)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MaterialChangeRecord.State">
            <summary>
            instance state (new, present, removed)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MaterialChangeRecord.Present">
            <summary>
            if rigid body present
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MaterialChangeRecord.ColourChanged">
            <summary>
            if the colour was changed
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MaterialChangeRecord.Colour">
            <summary>
            colour of the material if changed
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MaterialChangeRecord.MaterialNameChanged">
            <summary>
            material name changed
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MaterialChangeRecord.ShaderNameChanged">
            <summary>
            name of the shader of the material if changed
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MaterialChangeRecord.MaterialPathChanged">
            <summary>
            stored path of the material if changed
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.MaterialChangeRecord.#ctor">
            <summary>
            empty constructor
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.MaterialChangeRecord.#ctor(UnityEngine.Material)">
            <summary>
            constructor
            </summary>
            <param name="_mat">rigid body</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.MaterialChangeRecord.#ctor(UnityEngine.Material,u040.prespective.core.scenechangetracking.components.MaterialRecord)">
            <summary>
            constructor
            </summary>
            <param name="_mat">rigid body</param>
            <param name="_record">compare record</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.MaterialChangeRecord.createNew(UnityEngine.Material@,System.Exception@)">
            <summary>
            creates new material
            </summary>
            <param name="_mat">created material</param>
            <param name="_error">exception</param>
            <returns>if successful</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.MaterialChangeRecord.applyChanges(UnityEngine.Material@,System.Exception@)">
            <summary>
            applies changes to material
            </summary>
            <param name="_mat">material</param>
            <param name="_error">exception</param>
            <returns>if successful</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:u040.prespective.core.scenechangetracking.components.MeshRendererRecording.makeMaterial(u040.prespective.core.scenechangetracking.components.MaterialData)" -->
        <!-- Badly formed XML comment ignored for member "M:u040.prespective.core.scenechangetracking.components.MeshRendererRecording.setRecordedValues(UnityEngine.Material,u040.prespective.core.scenechangetracking.components.MaterialData)" -->
        <member name="M:u040.prespective.core.scenechangetracking.components.MeshRendererDiff.checkIfMaterialDataTheSame(u040.prespective.core.scenechangetracking.components.MaterialData,u040.prespective.core.scenechangetracking.components.MaterialData)">
            <summary>
            checks if the material date is the same
            </summary>
            <param name="_frommd"></param>
            <param name="_tomd"></param>
            <returns>if the same</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:u040.prespective.core.scenechangetracking.components.MeshRendererDiff.makeDiffRecordOfData3``1(``0[],``0[])" -->
        <!-- Badly formed XML comment ignored for member "M:u040.prespective.core.scenechangetracking.components.MeshRendererDiff.makeDiffRecordOfData4``1(``0[],``0[],u040.prespective.core.scenechangetracking.ComponentDiff.CheckSameAction{``0})" -->
        <member name="M:u040.prespective.core.scenechangetracking.components.MeshRendererDiff.applyChanges(UnityEngine.MeshRenderer)">
            <summary>
            applies the diff to the mesh renderer
            </summary>
            <param meshrenderer="_mr"></param>
            <returns>if successfull</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.MaterialData.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Int32,UnityEngine.Color)">
            <summary>
            String serialization using the u040 serializer requires a constructor setting all fields at activation time
            </summary>
            <param name="_shaderName"></param>
            <param name="_srcBlend"></param>
            <param name="_dstBlend"></param>
            <param name="_zWrite"></param>
            <param name="_alphaTest"></param>
            <param name="_alphaBlend"></param>
            <param name="_alphaPreMultiply"></param>
            <param name="_renderQueue"></param>
            <param name="_mainColor"></param>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.components.TransformRecording">
            <summary>
            Record class for recording a UnityEngine.Transform component
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.TransformRecording.localPosition">
            <summary>
            The local position of the recorded transform
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.TransformRecording.localRotation">
            <summary>
            The local rotation of the recorded transform
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.TransformRecording.localScale">
            <summary>
            The local scale of the recorded transform
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.TransformRecording.globalPosition">
            <summary>
            The global position of the recorded transform (lookup only)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.TransformRecording.globalRotation">
            <summary>
            The global rotation of the recorded transform (lookup only)
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.TransformRecording.#ctor">
            <summary>
            Empty constructor for serialization
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.TransformRecording.#ctor(UnityEngine.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Create a new Transform recording from a targeted transform
            </summary>
            <param name="_target">the target transform (forwarded as UnityEngine.Object)</param>
            <param name="_settings">optional settings</param>
        </member>
        <member name="P:u040.prespective.core.scenechangetracking.components.TransformRecording.ComponentType">
            <summary>
            Reference to the specific component type this recording manages
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.TransformRecording.getDiffFromComp(UnityEngine.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Create a diff between this recording and a target Transform instance
            </summary>
            <param name="_target">the target transform instance (forwarded as UnityEngine.Object)</param>
            <param name="_settings">optional settings to apply</param>
            <returns></returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.TransformRecording.getDiff(u040.prespective.core.scenechangetracking.ComponentRecording,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Create a diff between this recording and another recording
            </summary>
            <param name="_recording">the opposing recording (may be null in the event of a create or remove)</param>
            <param name="_settings">optional settings to apply</param>
            <returns></returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.TransformRecording.Playback(UnityEngine.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Playback this recording on a target transform
            
            use 'USE_GLOBAL_TRANSFORM_RECORDING' to apply the globally recorded transform values, otherwise defaults to setting
            the local values
            </summary>
            <param name="_target"></param>
            <param name="_settings"></param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.TransformRecording.Record(UnityEngine.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Record the target transform 
            </summary>
            <param name="_target">target transform (forwarded as UnityEngine.Object)</param>
            <param name="_settings">optional settings to apply</param>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.components.TransformDiff">
            <summary>
            Diff specifically for transform recordings
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.TransformDiff.localPositionDelta">
            <summary>
            The delta local position change
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.TransformDiff.localRotationDelta">
            <summary>
            The delta local rotation change
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.TransformDiff.localScaleDelta">
            <summary>
            The delta local scale change
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.TransformDiff.globalPositionDelta">
            <summary>
            The delta global position change
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.TransformDiff.globalRotationDelta">
            <summary>
            The delta global rotation change
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.TransformDiff.#ctor">
            <summary>
            Empty constructor for direct value injection and serialization
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.TransformDiff.#ctor(u040.prespective.core.scenechangetracking.components.TransformRecording,u040.prespective.core.scenechangetracking.components.TransformRecording,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Create a new Transform Diff
            </summary>
            <param name="_from">the starting transform state</param>
            <param name="_to">the resulting transform state</param>
            <param name="_settings">optional settings</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.TransformDiff.getChangedFields">
            <summary>
            Retrieve the fields that have changed in this diff
            </summary>
            <returns></returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.TransformDiff.Reverse">
            <summary>
            Reverse this diff (results in a diff going back to the start state)
            </summary>
            <returns></returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.TransformDiff.Diff(u040.prespective.core.scenechangetracking.ComponentDiff,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Get the delta diff between this diff and another diff
            </summary>
            <param name="_toDiff"></param>
            <param name="_settings"></param>
            <returns></returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.TransformDiff.Append(u040.prespective.core.scenechangetracking.ComponentDiff,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Append another diff to this diff
            </summary>
            <param name="_toAppend">the diff to append</param>
            <param name="_settings">the settings to apply</param>
            <returns></returns>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.components.MeshRendererRecord">
            <summary>
            @CLASS : MeshRendererRecord
            
            @ABOUT : record mesh renderer
                     
            @AUTHOR : Tymen (Unit040)
            
            @VERSION : 1.00 - Implemented beta build(18-03-2020)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MeshRendererRecord.Present">
            <summary>
            if rigid body present
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MeshRendererRecord.StoreMaterials">
            <summary>
            if materials must be stored
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MeshRendererRecord.ShadowCastingMode">
            <summary>
            shadow casting mode
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MeshRendererRecord.ReceiveShadows">
            <summary>
            receive shadows
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MeshRendererRecord.LigthProbes">
            <summary>
            light probes type
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MeshRendererRecord.ReflectionProbes">
            <summary>
            reflection probe type
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MeshRendererRecord.MotionVector">
            <summary>
            motion vector
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MeshRendererRecord.DynamicOcclusion">
            <summary>
            if use dynamic occlusion
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MeshRendererRecord.Materials">
            <summary>
            materials of the mesh renderer
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.MeshRendererRecord.#ctor">
            <summary>
            empty constructor
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.MeshRendererRecord.#ctor(UnityEngine.MeshRenderer,System.Boolean)">
            <summary>
            constructor
            </summary>
            <param name="_mr">mesh renderer</param>
            <param name="_storeMaterials">if materials should be stored</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.MeshRendererRecord.CheckForChanges(UnityEngine.MeshRenderer)">
            <summary>
            if their are changes compared to this record
            </summary>
            <param name="_mr">mesh renderer</param>
            <returns>if changes</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.MeshRendererRecord.GetChanges(UnityEngine.MeshRenderer)">
            <summary>
            gets changes compare to this record
            </summary>
            <param name="_mr">mesh renderer</param>
            <returns>changes data</returns>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.components.MeshRendererChangeRecord">
            <summary>
            @CLASS : MeshRendererChangeRecord
            
            @ABOUT : record mesh renderer changes
                     
            @AUTHOR : Tymen (Unit040)
            
            @VERSION : 1.00 - Implemented beta build(18-03-2020)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MeshRendererChangeRecord.State">
            <summary>
            instance state (new, present, removed)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MeshRendererChangeRecord.StoreMaterials">
            <summary>
            if materials must be stored
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MeshRendererChangeRecord.Present">
            <summary>
            if rigid body present
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MeshRendererChangeRecord.ShadowCastingMode">
            <summary>
            shadow casting mode
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MeshRendererChangeRecord.ReceiveShadows">
            <summary>
            receive shadows
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MeshRendererChangeRecord.LigthProbes">
            <summary>
            light probes type
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MeshRendererChangeRecord.ReflectionProbes">
            <summary>
            reflection probe type
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MeshRendererChangeRecord.MotionVector">
            <summary>
            motion vector
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MeshRendererChangeRecord.DynamicOcclusion">
            <summary>
            if use dynamic occlusion
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MeshRendererChangeRecord.MaterialsChangeData">
            <summary>
            change data of the materials of the mesh renderer
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.MeshRendererChangeRecord.#ctor">
            <summary>
            empty constructor
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.MeshRendererChangeRecord.#ctor(UnityEngine.MeshRenderer,System.Boolean)">
            <summary>
            constructor
            </summary>
            <param name="_mr">mesh renderer</param>
            <param name="_storeMaterials">if materials should be stored</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.MeshRendererChangeRecord.#ctor(UnityEngine.MeshRenderer,u040.prespective.core.scenechangetracking.components.MeshRendererRecord)">
            <summary>
            constructor
            </summary>
            <param name="_mr">mesh renderer</param>
            <param name="_record">compare record</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.MeshRendererChangeRecord.ApplyChanges(UnityEngine.GameObject,System.Exception@)">
            <summary>
            applies changes to game object
            </summary>
            <param name="_go">game object</param>
            <param name="_error">exceptions</param>
            <returns>if successful</returns>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.components.RigidBodyRecord">
            <summary>
            @CLASS : RigidBodyRecord
            
            @ABOUT : records rigid body data
                     
            @AUTHOR : Tymen (Unit040)
            
            @VERSION : 1.00 - Implemented beta build(18-03-2020)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.RigidBodyRecord.Present">
            <summary>
            if rigid body present
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.RigidBodyRecord.Mass">
            <summary>
            mass
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.RigidBodyRecord.Drag">
            <summary>
            drag
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.RigidBodyRecord.AngularDrag">
            <summary>
            angular drag
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.RigidBodyRecord.Gravity">
            <summary>
            if uses gravity
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.RigidBodyRecord.IsKinematic">
            <summary>
            is kinematic
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.RigidBodyRecord.Interpolate">
            <summary>
            type of interpolation
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.RigidBodyRecord.CollisionDectectionMode">
            <summary>
            type of detection mode
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.RigidBodyRecord.Constraints">
            <summary>
            constrains on the degrees of freedom
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.RigidBodyRecord.#ctor">
            <summary>
            empty constructor
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.RigidBodyRecord.#ctor(UnityEngine.Rigidbody)">
            <summary>
            constructor
            </summary>
            <param name="_rig">rigid body</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.RigidBodyRecord.CheckForChanges(UnityEngine.Rigidbody)">
            <summary>
            if their are changes compared to this record
            </summary>
            <param name="_rig">rigid body</param>
            <returns>if changes</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.RigidBodyRecord.GetChanges(UnityEngine.Rigidbody)">
            <summary>
            gets changes compare to this record
            </summary>
            <param name="_rig">rigid body</param>
            <returns>changes data</returns>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.components.RigidBodyChangeRecord">
            <summary>
            @CLASS : RigidBodyChangeRecord
            
            @ABOUT : records the rigid body changes and reapplies them
                     
            @AUTHOR : Tymen (Unit040)
            
            @VERSION : 1.00 - Implemented beta build(18-03-2020)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.RigidBodyChangeRecord.State">
            <summary>
            instance state (new, present, removed)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.RigidBodyChangeRecord.Present">
            <summary>
            if rigid body present
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.RigidBodyChangeRecord.DifferenceMass">
            <summary>
            difference in mass
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.RigidBodyChangeRecord.DifferenceDrag">
            <summary>
            difference drag
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.RigidBodyChangeRecord.DifferenceAngularDrag">
            <summary>
            difference angular drag
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.RigidBodyChangeRecord.Gravity">
            <summary>
            if uses gravity
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.RigidBodyChangeRecord.IsKinematic">
            <summary>
            is kinematic
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.RigidBodyChangeRecord.Interpolate">
            <summary>
            type of interpolation
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.RigidBodyChangeRecord.CollisionDectectionMode">
            <summary>
            type of detection mode
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.RigidBodyChangeRecord.Constraints">
            <summary>
            constrains on the degrees of freedom
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.RigidBodyChangeRecord.#ctor">
            <summary>
            empty constructor
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.RigidBodyChangeRecord.#ctor(UnityEngine.Rigidbody)">
            <summary>
            constructor
            </summary>
            <param name="_rig">rigid body</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.RigidBodyChangeRecord.#ctor(UnityEngine.Rigidbody,u040.prespective.core.scenechangetracking.components.RigidBodyRecord)">
            <summary>
            constructor
            </summary>
            <param name="_rig">rigid body</param>
            <param name="_record">compare record</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.RigidBodyChangeRecord.ApplyChanges(UnityEngine.GameObject,System.Exception@)">
            <summary>
            applies changes to game object
            </summary>
            <param name="_go">game object</param>
            <param name="_error">exceptions</param>
            <returns>if successful</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.MeshFilterRecording.applyExplictMesh(UnityEngine.MeshFilter,UnityEngine.Mesh)">
            <summary>
            creates a new mesh from data and stores it
            </summary>
            <returns>new mesh</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.MeshFilterDiff.getDiffMesh(u040.prespective.core.scenechangetracking.components.MeshFilterRecording,u040.prespective.core.scenechangetracking.components.MeshFilterRecording)">
            <summary>
            gets the difference between 2 mesh recordings
            </summary>
            <param name="_from"></param>
            <param name="_to"></param>
            <returns>if changed</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:u040.prespective.core.scenechangetracking.components.MeshFilterDiff.makeDiffRecordOfDataDT``1(``0[],``0[])" -->
        <!-- Badly formed XML comment ignored for member "M:u040.prespective.core.scenechangetracking.components.MeshFilterDiff.makeDiffRecordOfDataKV``1(System.Collections.Generic.List{``0[]},System.Collections.Generic.List{``0[]})" -->
        <!-- Badly formed XML comment ignored for member "M:u040.prespective.core.scenechangetracking.components.MeshFilterDiff.applyChanges(UnityEngine.MeshFilter)" -->
        <!-- Badly formed XML comment ignored for member "M:u040.prespective.core.scenechangetracking.components.MeshFilterDiff.applyExplicit(UnityEngine.MeshFilter)" -->
        <!-- Badly formed XML comment ignored for member "M:u040.prespective.core.scenechangetracking.components.MeshFilterDiff.processDiffRecord``1(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.KeyValuePair{u040.prespective.core.scenechangetracking.DiffOperation,``0}},``0[])" -->
        <!-- Badly formed XML comment ignored for member "M:u040.prespective.core.scenechangetracking.components.MeshFilterDiff.processDiffRecord``1(System.Collections.Generic.Dictionary{System.Collections.Generic.KeyValuePair{System.Int32,System.Int32},System.Collections.Generic.KeyValuePair{u040.prespective.core.scenechangetracking.DiffOperation,``0}},System.Collections.Generic.List{System.Collections.Generic.List{``0}})" -->
        <member name="T:u040.prespective.core.scenechangetracking.components.MeshFilterRecord">
            <summary>
            @CLASS : MeshFilterRecord
            
            @ABOUT : records mesh filter data
                     
            @AUTHOR : Tymen (Unit040)
            
            @VERSION : 1.00 - Implemented beta build(18-03-2020)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MeshFilterRecord.Present">
            <summary>
            if rigid body present
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MeshFilterRecord.MeshPath">
            <summary>
            path the mesh is stored
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MeshFilterRecord.TypeOfMesh">
            <summary>
            type of mesh
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.MeshFilterRecord.#ctor">
            <summary>
            empty constructor
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.MeshFilterRecord.#ctor(UnityEngine.MeshFilter)">
            <summary>
            constructor
            </summary>
            <param name="_mf">mesh filter</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.MeshFilterRecord.CheckForChanges(UnityEngine.MeshFilter)">
            <summary>
            if their are changes compared to this record
            </summary>
            <param name="_mf">mesh filter</param>
            <returns>if changes</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.MeshFilterRecord.GetChanges(UnityEngine.MeshFilter)">
            <summary>
            gets changes compare to this record
            </summary>
            <param name="_mf">mesh filter</param>
            <returns>changes data</returns>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.components.MeshFilterChangeRecord">
            <summary>
            @CLASS : MeshFilterChangeRecord
            
            @ABOUT : records the mesh filter changes and reapplies them
                     
            @AUTHOR : Tymen (Unit040)
            
            @VERSION : 1.00 - Implemented beta build(18-03-2020)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MeshFilterChangeRecord.State">
            <summary>
            instance state (new, present, removed)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MeshFilterChangeRecord.Present">
            <summary>
            if rigid body present
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MeshFilterChangeRecord.MeshPathChanged">
            <summary>
            the mesh path changed to
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.components.MeshFilterChangeRecord.TypeOfMeshChanged">
            <summary>
            type of mesh
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.MeshFilterChangeRecord.#ctor">
            <summary>
            empty constructor
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.MeshFilterChangeRecord.#ctor(UnityEngine.MeshFilter)">
            <summary>
            constructor
            </summary>
            <param name="_mf">mesh filter</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.MeshFilterChangeRecord.#ctor(UnityEngine.MeshFilter,u040.prespective.core.scenechangetracking.components.MeshFilterRecord)">
            <summary>
            constructor
            </summary>
            <param name="_mf">mesh filter</param>
            <param name="_record">compare record</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.components.MeshFilterChangeRecord.ApplyChanges(UnityEngine.GameObject,System.Exception@)">
            <summary>
            applies changes to game object
            </summary>
            <param name="_go">game object</param>
            <param name="_error">exceptions</param>
            <returns>if successful</returns>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.serialization.PREPlayPRESetOverride">
            <summary>
            By overriding 'ObjectRecordingMappingOverride' we mark this as a mapping with rules regarding the recording of components
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.serialization.PREPlayPRESetOverride.#ctor">
            <summary>
            Override must have a default constructor
            </summary>
        </member>
        <member name="P:u040.prespective.core.scenechangetracking.serialization.PREPlayPRESetOverride.recordingOverrides">
            <summary>
            This list is used to inject new Component Recording Rules clientside
            </summary>
        </member>
        <member name="P:u040.prespective.core.scenechangetracking.serialization.PREPlayPRESetOverride.recordingFilterOverrides">
            <summary>
            This list is used to inject new recording filter rules clientside (Not yet implemented)
            </summary>
        </member>
        <member name="P:u040.prespective.core.scenechangetracking.serialization.ZFTransformRecording.localPosition">
            <summary>
            The local position of the recorded transform
            </summary>
        </member>
        <member name="P:u040.prespective.core.scenechangetracking.serialization.ZFTransformRecording.localRotation">
            <summary>
            The local rotation of the recorded transform
            </summary>
        </member>
        <member name="P:u040.prespective.core.scenechangetracking.serialization.ZFTransformRecording.localScale">
            <summary>
            The local scale of the recorded transform
            </summary>
        </member>
        <member name="P:u040.prespective.core.scenechangetracking.serialization.ZFTransformRecording.globalPosition">
            <summary>
            The global position of the recorded transform (lookup only)
            </summary>
        </member>
        <member name="P:u040.prespective.core.scenechangetracking.serialization.ZFTransformRecording.globalRotation">
            <summary>
            The global rotation of the recorded transform (lookup only)
            </summary>
        </member>
        <member name="P:u040.prespective.core.scenechangetracking.serialization.ZFGameObjectRecording.name">
            <summary>
            The name of the GameObject at the time of recording
            </summary>
        </member>
        <member name="P:u040.prespective.core.scenechangetracking.serialization.ZFGameObjectRecording.transformPath">
            <summary>
            The path to the PREset transform root object (not necassarily the root of the scene!)
            </summary>
        </member>
        <member name="P:u040.prespective.core.scenechangetracking.serialization.ZFGameObjectRecording.parentTransformPath">
            <summary>
            path from this parent object to the PREset transform root object (not necassarily the root of the scene!)
            </summary>
        </member>
        <member name="P:u040.prespective.core.scenechangetracking.serialization.ZFGameObjectRecording.isActive">
            <summary>
            Whether this GameObject is active
            </summary>
        </member>
        <member name="P:u040.prespective.core.scenechangetracking.serialization.ZFGameObjectRecording.siblingIndex">
            <summary>
            this sibling index this gameobject holds within its parent
            </summary>
        </member>
        <member name="P:u040.prespective.core.scenechangetracking.serialization.ZFGameObjectRecording.componentRecordings">
            <summary>
            List with componentRecordings
            
            NOTE : Component Recordings are based on a abstract class, so serialization must be done manually
            </summary>
        </member>
        <member name="P:u040.prespective.core.scenechangetracking.serialization.ZFGameObjectRecording.componentRecordingSerialized">
            <summary>
            Serialization field used to store a serialized variant of the component recording
            (Component recordings are based on an abstract class, for which Unity doesn't support serialization)
            </summary>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.serialization.ZfColliderData">
            <summary>
            Dataclass used for serializing Collider data in the scene
            TODO: this feature needs to be TRL reviewed
            
            <para>Copyright (c) 2015-2023 Prespective, Unit040 Beheer B.V. All Rights Reserved. See License.txt in the project Prespective folder for license information.</para>
            </summary>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.serialization.ZfColliderData.ColliderType">
            <summary>
            The type of collider serialized
            </summary>
        </member>
        <member name="P:u040.prespective.core.scenechangetracking.serialization.ZfColliderData.CType">
            <summary>
            The type of collider
            </summary>
        </member>
        <member name="P:u040.prespective.core.scenechangetracking.serialization.ZfColliderData.IsTrigger">
            <summary>
            Whether or not this collider is a trigger
            </summary>
        </member>
        <member name="P:u040.prespective.core.scenechangetracking.serialization.ZfColliderData.Enabled">
            <summary>
            Whether or not this collider is enabled
            </summary>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.SceneChangeTrackingRecording">
            <summary>
            Recording masterclass for storing the state of a GameObject Hierarchy
            (Used by Static Scenarios and PREMirror)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.SceneChangeTrackingRecording.recordedGameObjects">
            <summary>
            Contains the recorded game objects part of this recording (flattened hierarchy)
            </summary>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.PREsetDiff">
            <summary>
            Highest level diffing class to determine the changes between 2 PREset Recordings
            (Used by Static Scenarios (auto-transitioning) and PREMirror(updating the base state))
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.PREsetDiff.appliedDiffOperation">
            <summary>
            The diff operation performed by this diff (PREset Diff can only be NONE or CHANGED)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.PREsetDiff.settings">
            <summary>
            Contains the settings that were used to create this diff
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.PREsetDiff.preSetOperations">
            <summary>
            Contains the (hierarchy) operations that should be executed before applying the gameObjectDiffs
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.PREsetDiff.gameObjectDiffs">
            <summary>
            Contains the gameObject diffs executed locally per GameObject, 
            
            NOTE: that keys represent the GameObject paths from the parent object
            after applying the preSetOperations!
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.PREsetDiff.#ctor">
            <summary>
            Empty constructor for serialization
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.PREsetDiff.#ctor(u040.prespective.core.scenechangetracking.SceneChangeTrackingRecording,u040.prespective.core.scenechangetracking.SceneChangeTrackingRecording,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Create a PREset diff from 2 recordings
            </summary>
            <param name="_from">the recording for the start state</param>
            <param name="_to">the recording for the end state</param>
            <param name="_settings">optional settings to be applied in creating the diff</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.PREsetDiff.generateHierarchyOperations(u040.prespective.core.scenechangetracking.SceneChangeTrackingRecording,u040.prespective.core.scenechangetracking.SceneChangeTrackingRecording,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Create custom hierarchical operations to fit the from operation to the to operation 
            (e.g. intermediate group object that should block actions from being applied)
            </summary>
            <param name="_from"></param>
            <param name="_to"></param>
            <param name="_settings"></param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.PREsetDiff.matchGameObjectDiffs(u040.prespective.core.scenechangetracking.SceneChangeTrackingRecording,u040.prespective.core.scenechangetracking.SceneChangeTrackingRecording,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Find the best match between two GameObjectRecordings, and generate the resulting diffs
            </summary>
            <param name="_from"></param>
            <param name="_to"></param>
            <param name="_settings"></param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.PREsetDiff.AppendDiff(u040.prespective.core.scenechangetracking.PREsetDiff)">
            <summary>
            Update this diff with another diff (creating a single diff with the result of both)
            </summary>
            <param name="_otherDiff">the diff to append</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.PREsetDiff.ApplyDiff(UnityEngine.Transform,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Apply this PreSet Diff onto a root object
            </summary>
            <param name="_preSetRootObject"></param>
            <param name="_settings"></param>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.ComponentDiff">
            <summary>
            Abstract setup of a diff between the component recording 'from' to the recording 'to'
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.ComponentDiff.appliedDiffOperation">
            <summary>
            Operation applied in this diff; a NONE diff is empty and the default state
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.ComponentDiff.from">
            <summary>
            Recording (component state) this diff starts from
            (if this diff is created through deserialization this field may be empty)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.ComponentDiff.to">
            <summary>
            Recording (component state) this diff ends up in
            (if this diff is created through deserialization this field may be empty)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.ComponentDiff.settings">
            <summary>
            Settings applied when this diff was created
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.ComponentDiff.#ctor">
            <summary>
            Empty constructor for direct value injection and serialization
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.ComponentDiff.#ctor(u040.prespective.core.scenechangetracking.ComponentRecording,u040.prespective.core.scenechangetracking.ComponentRecording,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Default overriden constructor for a Component Diff; registers from, to and settings
            </summary>
            <param name="_from">Recording (component state) this diff starts from</param>
            <param name="_to">Recording (component state) this diff ends up in</param>
            <param name="_settings">Settings applied when this diff was created</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.ComponentDiff.getChangedFields">
            <summary>
            Retrieve a list of changed fields in this diff
            (Used for UX reporting)
            </summary>
            <returns></returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.ComponentDiff.Reverse">
            <summary>
            Reverse this Diff
            (Allows you to go from the result state to the start state)
            </summary>
            <returns>a reversed variant of this diff</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.ComponentDiff.Diff(u040.prespective.core.scenechangetracking.ComponentDiff,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Get a component diff describing the difference between this diff and another diff
            (Allows you to extract changes between 2 diffs)
            </summary>
            <param name="_toDiff">the component diff to evaluate for changes</param>
            <returns></returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.ComponentDiff.Append(u040.prespective.core.scenechangetracking.ComponentDiff,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Get a diff with the result of adding 2 diffs
            </summary>
            <param name="_toAppend"></param>
            <returns></returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.ComponentDiff.ApplyDiff(UnityEngine.GameObject,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Apply this diff on a gameobject to get to the result state
            </summary>
            <param name="_owner">gameobject we want this component diff to be applied onto</param>
            <param name="_settings">settings to be applied</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:u040.prespective.core.scenechangetracking.ComponentDiff.makeDiffRecordOfData``1(System.Collections.Generic.List{``0[]},System.Collections.Generic.List{``0[]})" -->
        <!-- Badly formed XML comment ignored for member "M:u040.prespective.core.scenechangetracking.ComponentDiff.makeDiffRecordOfData``1(``0[],``0[])" -->
        <!-- Badly formed XML comment ignored for member "M:u040.prespective.core.scenechangetracking.ComponentDiff.makeDiffRecordOfData``1(``0[],``0[],u040.prespective.core.scenechangetracking.ComponentDiff.CheckSameAction{``0})" -->
        <member name="T:u040.prespective.core.scenechangetracking.colliders.CapsuleColliderData">
            <summary>
            @CLASS : CapsuleColliderData
            
            @ABOUT : record capsule collider data
                     
            @AUTHOR : Tymen (Unit040)
            
            @VERSION : 1.00 - Implemented beta build(30-10-2019)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.CapsuleColliderData.Centre">
            <summary>
            centre of the capsule
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.CapsuleColliderData.Radius">
            <summary>
            radius of the capsule
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.CapsuleColliderData.Height">
            <summary>
            height of the capsule
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.CapsuleColliderData.Direction">
            <summary>
            direction of the capsule
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.CapsuleColliderData.#ctor">
            <summary>
            empty constructor
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.CapsuleColliderData.#ctor(UnityEngine.CapsuleCollider)">
            <summary>
            constructor
            </summary>
            <param name="_col">capsule collider</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.CapsuleColliderData.CheckForChanges(UnityEngine.CapsuleCollider)">
            <summary>
            if capsule collider has changes
            </summary>
            <param name="_col">capsule collider to compare to</param>
            <returns>if changes</returns>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.colliders.CapsuleColliderChangedData">
            <summary>
            @CLASS : CapsuleColliderChangedData
            
            @ABOUT : records the capsule collider changes and can reapply them
                     
            @AUTHOR : Tymen (Unit040)
            
            @VERSION : 1.00 - Implemented beta build(30-10-2019)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.CapsuleColliderChangedData.CentreChange">
            <summary>
            change in centre position
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.CapsuleColliderChangedData.RadiusChange">
            <summary>
            change in radius
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.CapsuleColliderChangedData.HeightChange">
            <summary>
            change in height
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.CapsuleColliderChangedData.DirectionChange">
            <summary>
            change in direction
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.CapsuleColliderChangedData.#ctor">
            <summary>
            empty constructor
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.CapsuleColliderChangedData.#ctor(UnityEngine.CapsuleCollider)">
            <summary>
            constructor
            </summary>
            <param name="_col">capsule collider</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.CapsuleColliderChangedData.#ctor(UnityEngine.CapsuleCollider,u040.prespective.core.scenechangetracking.colliders.ColliderData)">
            <summary>
            constructor
            </summary>
            <param name="_col">capsule collider</param>
            <param name="_record">collider record</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.CapsuleColliderChangedData.fillValuesWithCollider(UnityEngine.CapsuleCollider)">
            <summary>
            fills the values of the changed record completely with colliders values
            </summary>
            <param name="_col">capsule collider</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.CapsuleColliderChangedData.ApplyChanges(UnityEngine.CapsuleCollider,System.Exception@)">
            <summary>
            apply stored changes to capsule collider
            </summary>
            <param name="_capsule">capsule collider</param>
            <param name="_error">exception</param>
            <returns>if successful</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.CapsuleColliderChangedData.CreateNew(UnityEngine.GameObject,System.Exception@)">
            <summary>
            creates new capsule collider form values here
            </summary>
            <param name="_go">game object to give new capsule collider</param>
            <param name="_error">exception</param>
            <returns>if successful</returns>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.colliders.SphereColliderData">
            <summary>
            @CLASS : SphereColliderData
            
            @ABOUT : record sphere collider data
                     
            @AUTHOR : Tymen (Unit040)
            
            @VERSION : 1.00 - Implemented beta build(30-10-2019)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.SphereColliderData.Centre">
            <summary>
            centre of the sphere
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.SphereColliderData.Radius">
            <summary>
            radius of the sphere
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.SphereColliderData.#ctor">
            <summary>
            empty constructor
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.SphereColliderData.#ctor(UnityEngine.SphereCollider)">
            <summary>
            constructor
            </summary>
            <param name="_col">sphere collider</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.SphereColliderData.CheckForChanges(UnityEngine.SphereCollider)">
            <summary>
            if sphere collider has changes
            </summary>
            <param name="_col">sphere collider to compare to</param>
            <returns>if changes</returns>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.colliders.SphereColliderChangedData">
            <summary>
            @CLASS : SphereColliderChangedData
            
            @ABOUT : records the sphere collider changes and can reapply them
                     
            @AUTHOR : Tymen (Unit040)
            
            @VERSION : 1.00 - Implemented beta build(30-10-2019)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.SphereColliderChangedData.CentreChange">
            <summary>
            change in centre position
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.SphereColliderChangedData.RadiusChange">
            <summary>
            change in radius
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.SphereColliderChangedData.#ctor">
            <summary>
            empty constructor
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.SphereColliderChangedData.#ctor(UnityEngine.SphereCollider)">
            <summary>
            constructor
            </summary>
            <param name="_col">sphere collider</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.SphereColliderChangedData.#ctor(UnityEngine.SphereCollider,u040.prespective.core.scenechangetracking.colliders.ColliderData)">
            <summary>
            constructor
            </summary>
            <param name="_col">sphere collider</param>
            <param name="_record">collider record</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.SphereColliderChangedData.fillValuesWithCollider(UnityEngine.SphereCollider)">
            <summary>
            fills the values of the changed record completely with colliders values
            </summary>
            <param name="_col">sphere collider</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.SphereColliderChangedData.ApplyChanges(UnityEngine.SphereCollider,System.Exception@)">
            <summary>
            apply stored changes to sphere collider
            </summary>
            <param name="_sphere">sphere collider</param>
            <param name="_error">exception</param>
            <returns>if successful</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.SphereColliderChangedData.CreateNew(UnityEngine.GameObject,System.Exception@)">
            <summary>
            creates new sphere collider form values here
            </summary>
            <param name="_go">game object to give new sphere collider</param>
            <param name="_error">exception</param>
            <returns>if successful</returns>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.colliders.ColliderChangeRecord">
            <summary>
            @CLASS : ColliderChangeRecord
            
            @ABOUT : record colliders changes
                     
            @AUTHOR : Tymen (Unit040)
            
            @VERSION : 1.00 - Implemented beta build(30-10-2019)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.ColliderChangeRecord.CollidersChangedData">
            <summary>
            collider changed data
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.ColliderChangeRecord.#ctor">
            <summary>
            empty constructor
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.ColliderChangeRecord.#ctor(UnityEngine.Transform)">
            <summary>
            constructor
            </summary>
            <param name="_t">transform</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.ColliderChangeRecord.#ctor(UnityEngine.Transform,u040.prespective.core.scenechangetracking.colliders.ColliderRecord)">
            <summary>
            constructor
            </summary>
            <param name="_t">transform</param>
            <param name="_cr">collider record to compare to</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.ColliderChangeRecord.ApplyChanges(UnityEngine.GameObject,System.Exception@)">
            <summary>
            applies the changes of the colliders
            </summary>
            <param name="_goNew">game object to get collider</param>
            <param name="_error">exception</param>
            <returns>if successful</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.ColliderChangeRecord.applyChangesPresent(UnityEngine.GameObject,UnityEngine.Collider,u040.prespective.core.scenechangetracking.colliders.ColliderChangedData,System.Exception@)">
            <summary>
            apply changes to already existing collider
            </summary>
            <param name="_goNew">game object to get collider</param>
            <param name="_col">collider</param>
            <param name="_ccd">collider change data</param>
            <param name="_error">exception</param>
            <returns>if successful</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.ColliderChangeRecord.createNew(UnityEngine.GameObject,u040.prespective.core.scenechangetracking.colliders.ColliderChangedData,System.Exception@)">
            <summary>
            creates a new collider from its data
            </summary>
            <param name="_goNew">game object to get collider</param>
            <param name="_ccd">collider change data</param>
            <param name="_error">exception</param>
            <returns>if successful</returns>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.colliders.ColliderRecord">
            <summary>
            @CLASS : ColliderRecord
            
            @ABOUT : record colliders
                     
            @AUTHOR : Tymen (Unit040)
            
            @VERSION : 1.00 - Implemented beta build(30-10-2019)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.ColliderRecord.ColliderData">
            <summary>
            colliders data
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.ColliderRecord.#ctor">
            <summary>
            empty constructor
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.ColliderRecord.#ctor(UnityEngine.Transform)">
            <summary>
            constructor
            </summary>
            <param name="_t">transform</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.ColliderRecord.CheckForChanges(UnityEngine.Transform)">
            <summary>
            checks if their are changes between record and transform
            </summary>
            <param name="_t">transform</param>
            <returns>if changes</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.ColliderRecord.GetChanges(UnityEngine.Transform)">
            <summary>
            gets changes of colliders compared to this record
            </summary>
            <param name="_t">transform</param>
            <returns>changes</returns>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.colliders.BoxColliderData">
            <summary>
            @CLASS : BoxColliderData
            
            @ABOUT : record box collider data
                     
            @AUTHOR : Tymen (Unit040)
            
            @VERSION : 1.00 - Implemented beta build(29-10-2019)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.BoxColliderData.Centre">
            <summary>
            centre box
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.BoxColliderData.Size">
            <summary>
            size box
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.BoxColliderData.#ctor">
            <summary>
            empty constructor
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.BoxColliderData.#ctor(UnityEngine.BoxCollider)">
            <summary>
            constructor
            </summary>
            <param name="_col">box collider</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.BoxColliderData.CheckForChanges(UnityEngine.BoxCollider)">
            <summary>
            if box collider has changes
            </summary>
            <param name="_col">box collider to compare to</param>
            <returns>if changes</returns>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.colliders.BoxColliderChangedData">
            <summary>
            @CLASS : BoxColliderChangedData
            
            @ABOUT : records the box collider changes and can reapply them
                     
            @AUTHOR : Tymen (Unit040)
            
            @VERSION : 1.00 - Implemented beta build(29-10-2019)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.BoxColliderChangedData.CentreChange">
            <summary>
            change in centre position
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.BoxColliderChangedData.SizeChange">
            <summary>
            change in size
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.BoxColliderChangedData.#ctor">
            <summary>
            empty constructor
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.BoxColliderChangedData.#ctor(UnityEngine.BoxCollider)">
            <summary>
            constructor
            </summary>
            <param name="_col">box collider</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.BoxColliderChangedData.#ctor(UnityEngine.BoxCollider,u040.prespective.core.scenechangetracking.colliders.ColliderData)">
            <summary>
            constructor
            </summary>
            <param name="_col">box collider</param>
            <param name="_record">collider record</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.BoxColliderChangedData.fillValuesWithCollider(UnityEngine.BoxCollider)">
            <summary>
            fills the values of the changed record completely with colliders values
            </summary>
            <param name="_col">box collider</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.BoxColliderChangedData.ApplyChanges(UnityEngine.BoxCollider,System.Exception@)">
            <summary>
            apply stored changes to box collider
            </summary>
            <param name="_box">box collider</param>
            <param name="_error">exception</param>
            <returns>if successful</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.BoxColliderChangedData.CreateNew(UnityEngine.GameObject,System.Exception@)">
            <summary>
            creates new box collider form values here
            </summary>
            <param name="_go">game object to give new box collider</param>
            <param name="_error">exception</param>
            <returns>if successful</returns>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.PhysicsMaterialRecord.Present">
            <summary>
            if rigid body present
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.PhysicsMaterialRecord.PhysicsMaterialPath">
            <summary>
            physics material asset path
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.PhysicsMaterialRecord.Name">
            <summary>
            name of physics material;
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.PhysicsMaterialRecord.DynamicFriction">
            <summary>
            dynamic friction
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.PhysicsMaterialRecord.StaticFriction">
            <summary>
            static friction
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.PhysicsMaterialRecord.Bounciness">
            <summary>
            bounciness
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.PhysicsMaterialRecord.FrictionCombine">
            <summary>
            friction combine method
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.PhysicsMaterialRecord.BounceCombine">
            <summary>
            bounciness combine method
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.PhysicsMaterialRecord.#ctor">
            <summary>
            empty constructor
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.PhysicsMaterialRecord.#ctor(UnityEngine.PhysicMaterial)">
            <summary>
            constructor
            </summary>
            <param name="_pm">physics material</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.PhysicsMaterialRecord.CheckForChanges(UnityEngine.PhysicMaterial)">
            <summary>
            if their are changes compared to this record
            </summary>
            <param name="_pm">physics material</param>
            <returns>if changes</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.PhysicsMaterialRecord.GetChanges(UnityEngine.PhysicMaterial)">
            <summary>
            gets changes compare to this record
            </summary>
            <param name="_pm">physics material</param>
            <returns>changes data</returns>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.PhysicsMaterialChangeRecord.State">
            <summary>
            instance state (new, present, removed)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.PhysicsMaterialChangeRecord.Present">
            <summary>
            if rigid body present
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.PhysicsMaterialChangeRecord.PathChanged">
            <summary>
            if file path was changed
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.PhysicsMaterialChangeRecord.PhysicsMaterialPathChanged">
            <summary>
            physics material asset path changed
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.PhysicsMaterialChangeRecord.NewName">
            <summary>
            new name of physics material
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.PhysicsMaterialChangeRecord.DynamicFrictionChanged">
            <summary>
            dynamic friction changed
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.PhysicsMaterialChangeRecord.StaticFrictionChanged">
            <summary>
            static friction changed
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.PhysicsMaterialChangeRecord.BouncinessChanged">
            <summary>
            bounciness changed
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.PhysicsMaterialChangeRecord.FrictionCombine">
            <summary>
            friction combine method
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.PhysicsMaterialChangeRecord.BounceCombine">
            <summary>
            bounciness combine method
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.PhysicsMaterialChangeRecord.#ctor">
            <summary>
            empty constructor
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.PhysicsMaterialChangeRecord.#ctor(UnityEngine.PhysicMaterial)">
            <summary>
            constructor
            </summary>
            <param name="_pm">physics material</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.PhysicsMaterialChangeRecord.#ctor(UnityEngine.PhysicMaterial,u040.prespective.core.scenechangetracking.colliders.PhysicsMaterialRecord)">
            <summary>
            constructor
            </summary>
            <param name="_pm">physics material</param>
            <param name="_record">compare record</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.PhysicsMaterialChangeRecord.ApplyChanges(UnityEngine.PhysicMaterial@,System.Exception@)">
            <summary>
            applies changes to game object
            </summary>
            <param name="_pm">physics material</param>
            <param name="_error">exceptions</param>
            <returns>if successful</returns>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.colliders.MeshColliderData">
            <summary>
            @CLASS : MeshColliderData
            
            @ABOUT : record mesh collider data
                     
            @AUTHOR : Tymen (Unit040)
            
            @VERSION : 1.00 - Implemented beta build(30-10-2019)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.MeshColliderData.Convex">
            <summary>
            mesh is convex
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.MeshColliderData.CookingOptions">
            <summary>
            cooking options
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.MeshColliderData.#ctor">
            <summary>
            empty constructor
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.MeshColliderData.#ctor(UnityEngine.MeshCollider)">
            <summary>
            constructor
            </summary>
            <param name="_col">mesh collider</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.MeshColliderData.CheckForChanges(UnityEngine.MeshCollider)">
            <summary>
            if mesh collider has changes
            </summary>
            <param name="_col">mesh collider to compare to</param>
            <returns>if changes</returns>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.colliders.MeshColliderChangedData">
            <summary>
            @CLASS : MeshColliderChangedData
            
            @ABOUT : records the mesh collider changes and can reapply them
                     
            @AUTHOR : Tymen (Unit040)
            
            @VERSION : 1.00 - Implemented beta build(30-10-2019)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.MeshColliderChangedData.Convex">
            <summary>
            mesh is convex
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.MeshColliderChangedData.CookingOptions">
            <summary>
            cooking options
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.MeshColliderChangedData.#ctor">
            <summary>
            empty constructor
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.MeshColliderChangedData.#ctor(UnityEngine.MeshCollider)">
            <summary>
            constructor
            </summary>
            <param name="_col">mesh collider</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.MeshColliderChangedData.#ctor(UnityEngine.MeshCollider,u040.prespective.core.scenechangetracking.colliders.ColliderData)">
            <summary>
            constructor
            </summary>
            <param name="_col">mesh collider</param>
            <param name="_record">collider record</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.MeshColliderChangedData.fillValuesWithCollider(UnityEngine.MeshCollider)">
            <summary>
            fills the values of the changed record completely with colliders values
            </summary>
            <param name="_col">mesh collider</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.MeshColliderChangedData.ApplyChanges(UnityEngine.MeshCollider,System.Exception@)">
            <summary>
            apply stored changes to mesh collider
            </summary>
            <param name="_mesh">mesh collider</param>
            <param name="_error">exception</param>
            <returns>if successful</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.MeshColliderChangedData.CreateNew(UnityEngine.GameObject,System.Exception@)">
            <summary>
            creates new mesh collider form values here
            </summary>
            <param name="_go">game object to give new mesh collider</param>
            <param name="_error">exception</param>
            <returns>if successful</returns>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.colliders.ColliderType">
            <summary>
            collider types
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.ColliderData.CType">
            <summary>
            collider type (none, box, sphere, .....)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.ColliderData.IsTrigger">
            <summary>
            collider is trigger
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.ColliderData.Enabled">
            <summary>
            collider is enabled
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.ColliderData.PhysicsMaterialData">
            <summary>
            physics material record
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.ColliderData.#ctor">
            <summary>
            empty constructor
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.ColliderData.#ctor(UnityEngine.Collider)">
            <summary>
            constructor
            </summary>
            <param name="_col">collider</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.ColliderData.CheckType(UnityEngine.Collider)">
            <summary>
            checks if type is the same
            </summary>
            <param name="_col">collider</param>
            <returns>if the same type</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.ColliderData.CheckForChangesBaseCollider(UnityEngine.Collider)">
            <summary>
            check if changes in base collider
            </summary>
            <param name="_col">collider</param>
            <returns>if changes</returns>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.ColliderChangedData.CTypeChanged">
            <summary>
            collider type changed (none, box, sphere, .....)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.ColliderChangedData.State">
            <summary>
            instance state (new, present, removed)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.ColliderChangedData.IsTrigger">
            <summary>
            collider is trigger
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.ColliderChangedData.Enabled">
            <summary>
            collider is enabled
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.colliders.ColliderChangedData.PhysicsMaterialDataChanged">
            <summary>
            physics material changed record
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.ColliderChangedData.#ctor">
            <summary>
            empty constructor
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.ColliderChangedData.#ctor(UnityEngine.Collider)">
            <summary>
            constructor
            </summary>
            <param name="_col">collider</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.ColliderChangedData.#ctor(UnityEngine.Collider,u040.prespective.core.scenechangetracking.colliders.ColliderData)">
            <summary>
            constructor
            </summary>
            <param name="_col">collider</param>
            <param name="_record">collider</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.colliders.ColliderChangedData.ApplyChangesToBaseCollider(UnityEngine.Collider,System.Exception@)">
            <summary>
            applies changes back to base collider
            </summary>
            <param name="_col">collider</param>
            <param name="_error">exception</param>
            <returns>if successful</returns>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.GameObjectRecording">
            <summary>
            Recording of a single GameObject (part of a PREset Recording, which stores the entire stored hierarchy)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.GameObjectRecording.name">
            <summary>
            The name of the GameObject at the time of recording
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.GameObjectRecording.transformPath">
            <summary>
            The path to the PREset transform root object (not necassarily the root of the scene!)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.GameObjectRecording.parentTransformPath">
            <summary>
            path from this parent object to the PREset transform root object (not necassarily the root of the scene!)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.GameObjectRecording.isActive">
            <summary>
            Whether this GameObject is active
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.GameObjectRecording.siblingIndex">
            <summary>
            this sibling index this gameobject holds within its parent
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.GameObjectRecording.componentRecordings">
            <summary>
            List with componentRecordings
            
            NOTE : Component Recordings are based on a abstract class, so serialization must be done manually
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.GameObjectRecording.componentRecordingSerialized">
            <summary>
            Serialization field used to store a serialized variant of the component recording
            (Component recordings are based on an abstract class, for which Unity doesn't support serialization)
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.GameObjectRecording.#ctor">
            <summary>
            Empty constructor for serialization
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.GameObjectRecording.#ctor(UnityEngine.GameObject,UnityEngine.Transform,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates a new recording
            </summary>
            <param name="_go">gameobject to base this recording on</param>
            <param name="_recordingRoot">transform signifying the root of this PREset recording (needn't be the scene root)</param>
            <param name="_settings">settings to be applied when recording</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.GameObjectRecording.Record(UnityEngine.GameObject,UnityEngine.Transform,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Create a Recording of a single gameobject
            </summary>
            <param name="_go">the gameobject instance to record</param>
            <param name="_recordingRoot">transform signifying the root of this PREset recording (needn't be the scene root)</param>
            <param name="_settings">settings to be applied when recording</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.GameObjectRecording.PlayBack(UnityEngine.GameObject,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Playback a Recording onto a single gameobject
            </summary>
            <param name="_go">the gameobject onto which the recording is played back</param>
            <param name="_settings">settings to be applied when playing back</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.GameObjectRecording.getDiff(UnityEngine.GameObject,UnityEngine.Transform,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Create a diff between this recording and the current state of a game object
            (first creates a recording, than diffs between the 2 recordings)
            </summary>
            <param name="_go">gameobject to diff against</param>
            <param name="_preSetRoot">root object of the PREset recording</param>
            <param name="_settings">settings to use while diffing</param>
            <returns>resulting diff</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.GameObjectRecording.getDiff(u040.prespective.core.scenechangetracking.GameObjectRecording,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Create a diff between this and another recording
            </summary>
            <param name="_go">other recording to diff against</param>
            <param name="_settings">settings to use while diffing</param>
            <returns>resulting diff</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.GameObjectRecording.OnBeforeSerialize">
            <summary>
            Forwarded to serialize the polymorphic ComponentRecordings before unity serializes (otherwise the data will be lost in playmode/ scene unloading)
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.GameObjectRecording.OnAfterDeserialize">
            <summary>
            Forwarded to deserialize the polymorphic ComponentRecordings before unity serializes (otherwise the data will be lost in playmode/ scene unloading)
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.GameObjectRecording.serializeBytes">
            <summary>
            Serialize this recording to bytes 
            (Placeholder for Koen)
            </summary>
            <returns></returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.GameObjectRecording.deserializeBytes(System.Byte[])">
            <summary>
            Deserialize this recording from bytes
            (Placeholder for Koen)
            </summary>
            <param name="_data"></param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.GameObjectRecording.getTypedComponentRecording``1(``0@)">
            <summary>
            Retrieve a typed component recording from this recording
            </summary>
            <typeparam name="T">the recording type we're looking for</typeparam>
            <param name="_result">the found recording</param>
            <returns>whether a recording of the type T was found</returns>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.GameObjectDiff">
            <summary>
            A diff describing the difference between 2 GameObject recordings
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.GameObjectDiff.appliedDiffOperation">
            <summary>
            The Diff Operation that was applied (NONE when empty)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.GameObjectDiff.from">
            <summary>
            The starting gameObject recording
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.GameObjectDiff.to">
            <summary>
            The resulting gameobject recording
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.GameObjectDiff.componentDiffs">
            <summary>
            Generated component Diffs applied on this GameObjectDiff
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.GameObjectDiff.getTypedComponentDiff``1(``0@)">
            <summary>
            Retrieve a typed component recording from this recording
            </summary>
            <typeparam name="T">the recording type we're looking for</typeparam>
            <param name="_result">the found recording</param>
            <returns>whether a recording of the type T was found</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.GameObjectDiff.#ctor">
            <summary>
            Empty constructor for serialization
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.GameObjectDiff.#ctor(u040.prespective.core.scenechangetracking.GameObjectRecording,u040.prespective.core.scenechangetracking.GameObjectRecording,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Create a new GameObject diff between a _from and _to recording
            </summary>
            <param name="_from">recording of the gameObject starting state</param>
            <param name="_to">recording of the gameObject result state</param>
            <param name="_settings">settings to be applied in creating the diff</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.GameObjectDiff.GenerateComponentDiffs(u040.prespective.core.scenechangetracking.GameObjectRecording,u040.prespective.core.scenechangetracking.GameObjectRecording,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generate the component diffs to go from state '_from' to state '_to'
            </summary>
            <param name="_from">recording of the gameObject starting state</param>
            <param name="_to">recording of the gameObject result state</param>
            <param name="_settings">settings to be applied in creating the diff</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.GameObjectDiff.getChangedFields">
            <summary>
            Retrieve a list of changed fields in this diff
            (Used for UX reporting)
            </summary>
            <returns></returns>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.GameObjectDiff._bufferedTransform">
            <summary>
            Store the last set transform (saves processing in editor)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.GameObjectDiff._bufferedrootObject">
            <summary>
            store the last forwarded root object (recognize root changes)
            </summary>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.BaseTransformRecord">
            <summary>
            @CLASS : BaseTransformRecord
            
            @ABOUT : Creates a transform record of transform and does the matching of transform records
                     
            @AUTHOR : Tymen (Unit040)
            
            @VERSION : 1.00 - Implemented beta build(16-03-2020)
            @VERSION : 1.10 - Added rigid body, mesh filter and mesh renderer(18-03-2020)
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.BaseTransformRecord.#ctor">
            <summary>
            empty constructor
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.BaseTransformRecord.#ctor(UnityEngine.Transform,UnityEngine.Transform,System.Boolean,System.Boolean)">
            <summary>
            constructor
            </summary>
            <param name="_t">transform of record</param>
            <param name="_head">head of the recording</param>
            <param name="_storeMaterials">if materials should be stored</param>
            <param name="_storeMeshes">if meshes should be stored</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.BaseTransformRecord.CheckForChanges(UnityEngine.Transform,UnityEngine.Transform)">
            <summary>
            checks if changes have occurred
            </summary>
            <param name="_t">transform</param>
            <param name="_head">head of the recording</param>
            <returns>change occurred</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.BaseTransformRecord.CheckPrefectMatch(u040.prespective.core.scenechangetracking.BaseTransformRecord)">
            <summary>
            checks if their is a perfect match
            </summary>
            <param name="_compareTransformRecord">compare transform record</param>
            <returns>if prefect match</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.BaseTransformRecord.transformMatch(u040.prespective.core.scenechangetracking.BaseTransformRecord)">
            <summary>
            checks if their is a transform orientation match between transform records
            </summary>
            <param name="_compareTransformRecord">compare transform record</param>
            <returns>if match</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.BaseTransformRecord.GetBestMatch(System.Collections.Generic.List{u040.prespective.core.scenechangetracking.BaseTransformRecord})">
            <summary>
            finds the best match to this transform record
            </summary>
            <param name="_transRecords">transform records</param>
            <returns>best match transform record</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.BaseTransformRecord.GetBestMatch(System.Collections.Generic.List{u040.prespective.core.scenechangetracking.BaseTransformRecord},System.Boolean[])">
            <summary>
            finds the best match to this transform record
            </summary>
            <param name="_transRecords">transform records</param>
            <param name="_found">already used transform records</param>
            <returns>index of best match</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.BaseTransformRecord.processMatches(System.Collections.Generic.List{u040.prespective.core.scenechangetracking.BaseTransformRecord},System.Boolean[])">
            <summary>
            creates the matches data of remaining transform records to transform record
            </summary>
            <param name="_transformRecords">transform records</param>
            <param name="_found">already used transform records</param>
            <returns>match data</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.BaseTransformRecord.findBestMatch(System.Collections.Generic.List{u040.prespective.core.scenechangetracking.BaseTransformRecord.MatchData})">
            <summary>
            finds the best match for transform record from match data
            </summary>
            <param name="_matchData">match data</param>
            <returns>index best match</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.BaseTransformRecord.ToString">
            <summary>
            makes string description of class data
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.BaseTransformRecord.MatchData.#ctor(System.Int32,u040.prespective.core.scenechangetracking.BaseTransformRecord,u040.prespective.core.scenechangetracking.BaseTransformRecord)">
            <summary>
            constructor
            </summary>
            <param name="_i">compare transform record index=</param>
            <param name="_record">transform record</param>
            <param name="_compareRecord">transform record to compare to</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:u040.prespective.core.scenechangetracking.storage.SceneChangeTrackingRecordingStore" -->
        <member name="F:u040.prespective.core.scenechangetracking.storage.SceneChangeTrackingRecordingStore.recording">
            <summary>
            The actual recording data
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.storage.SceneChangeTrackingRecordingStore.thumbBytes">
            <summary>
            Optional thumbnail image displaying the scene object of the orginal recording
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.storage.SceneChangeTrackingRecordingStore._thumb">
            <summary>
            Texture2D's cannot be serialized, so store as bytes
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.storage.SceneChangeTrackingRecordingStore._lock">
            <summary>
            Since (De-)Serialization may be runned on a off-thread we need to lock the setting/getting of our serialized data
            </summary>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.PreHistoryOperations">
            <summary>
            enum for the types of changes stored here
            </summary>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.SaveChangesData">
            <summary>
            @CLASS : SaveChangesData
            
            @ABOUT : Stored changed data for prehistory
                     
            @AUTHOR : Tymen (Unit040)
            
            @VERSION : 1.00 - Implemented beta build(30-10-2019)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.SaveChangesData.type">
            <summary>
            operations type
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.SaveChangesData.changes">
            <summary>
            serialized stored changes
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.SaveChangesData.transformpath">
            <summary>
            transform path need to apply to
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.SaveChangesData.#ctor(u040.prespective.core.scenechangetracking.PreHistoryOperations,System.String[],System.String)">
            <summary>
            constructor
            </summary>
            <param name="_type">type of history change</param>
            <param name="_changeRecords">recorded changes serialized</param>
            <param name="_transformPath">transpath of transform change was done from</param>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.ComponentRecording">
            <summary>
            abstract baseclass for all component recording classes
            </summary>
        </member>
        <member name="P:u040.prespective.core.scenechangetracking.ComponentRecording.ComponentType">
            <summary>
            Explicit mapping of this recording onto a single component type
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.ComponentRecording.Record(UnityEngine.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="_target"></param>
            <param name="_settings"></param>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.TransformInstancingState">
            <summary>
            enum to indicated the instance state of the transform
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.SceneChangeTrackingUtility.GetTransformPaths(UnityEngine.GameObject[],System.String[]@)">
            <summary>
            gets the history and transform paths of game objects
            </summary>
            <param name="_ngo">game objects</param>
            <param name="_ntp">transform paths</param>
            <returns>prehistory</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.SceneChangeTrackingUtility.GetTransformPathAndCheckSamePrehistory(UnityEngine.Transform,u040.prespective.core.scenechangetracking.ASceneChangeTrackingBase,System.String@)">
            <summary>
            get transform path of transform and checks if in the same prehistory
            </summary>
            <param name="_t">transform</param>
            <param name="_hist">prehistory to compare to</param>
            <param name="_tp">transform path found</param>
            <returns>if successful</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.SceneChangeTrackingUtility.FindTransformFromTransformPath(System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,UnityEngine.Transform}})">
            <summary>
            finds transform connected to transform path
            </summary>
            <param name="transformpath">transform path</param>
            <param name="_connections">transform transform path pairs</param>
            <returns>transform</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.SceneChangeTrackingUtility.FindIndexTransformPath(System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,UnityEngine.Transform}})">
            <summary>
            finds the index of the transform path
            </summary>
            <param name="transformpath">transform path</param>
            <param name="_connections">transform-transform path pairs</param>
            <returns>index</returns>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.OnReapplyChangesAction">
            <summary>
            delegate to do the reapply changes
            </summary>
            <param name="_connections">transform path transform connections</param>
            <param name="_scd">data to do the change</param>
            <param name="_error">exceptions</param>
            <returns>if successful</returns>
        </member>
        <member name="T:u040.prespective.core.scenechangetracking.BaseTransformChangeRecord">
            <summary>
            @CLASS : BaseTransformChangeRecord
            
            @ABOUT : records the transform changes and can reapply them
                     
            @AUTHOR : Tymen (Unit040)
            
            @VERSION : 1.00 - Implemented beta build(16-03-2020)
            @VERSION : 1.10 - Added rigid body mesh filter and mesh renderer(18-03-2020)
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.BaseTransformChangeRecord.#ctor">
            <summary>
            empty constructor
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.BaseTransformChangeRecord.#ctor(u040.prespective.core.scenechangetracking.TransformInstancingState,UnityEngine.Transform,u040.prespective.core.scenechangetracking.BaseTransformRecord,UnityEngine.Transform,System.Boolean,System.Boolean)">
            <summary>
            constructor
            </summary>
            <param name="_tis">the type of instance state</param>
            <param name="_t">the transform the change is applied on</param>
            <param name="_tr">the transforms previously transform record</param>
            <param name="_head">head of recording</param>
            <param name="_storeMaterials">if materials should be stored</param>
            <param name="_storeMeshes">if meshes should be stored</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.BaseTransformChangeRecord.getChanges(UnityEngine.Transform,u040.prespective.core.scenechangetracking.BaseTransformRecord,UnityEngine.Transform,System.Boolean)">
            <summary>
            gets the changes found here and updates the stored values
            </summary>
            <param name="_t">transform</param>
            <param name="_tr">transform record</param>v
            <param name="_head">head of recording</param>
            <param name="_storeMeshes">if meshes should be stored</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.BaseTransformChangeRecord.getChangesNew(UnityEngine.Transform,UnityEngine.Transform,System.Boolean,System.Boolean)">
            <summary>
            gets changes because creating a new transform
            </summary>
            <param name="_tNew">new transform</param>
            <param name="_head">head of recording</param>
            <param name="_storeMaterials">if materials should be stored</param>
            <param name="_storeMeshes">if meshes should be stored</param>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.BaseTransformChangeRecord.ApplyChanges(UnityEngine.Transform,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,UnityEngine.Transform}}@,System.Exception@)">
            <summary>
            applies the changes stored here
            </summary>
            <param name="_head">head of recording</param>
            <param name="_connections">transform path transforms connection</param>
            <param name="_error">exceptions</param>
            <returns>if successful</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.BaseTransformChangeRecord.setChanges(UnityEngine.Transform,UnityEngine.Transform,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,UnityEngine.Transform}}@,System.Exception@)">
            <summary>
            sets the changes to the transform
            </summary>
            <param name="_t">transform</param>
            <param name="_head">head of recording</param>
            <param name="_connections">transform path transforms connection</param>
            <param name="_error">exceptions</param>
            <returns>if successful</returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.BaseTransformChangeRecord.fillCreated(UnityEngine.GameObject,UnityEngine.Transform,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,UnityEngine.Transform}}@,System.Exception@)">
            <summary>
            fills the newly created game object
            </summary>
            <param name="_newGO">new game object that is created</param>
            <param name="_head">head of recording</param>
            <param name="_connections">transform path transforms connection</param>
            <param name="_error">exceptions</param>
            <returns>if successful</returns>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.ObjectRecordingUtility.BaseComponentType">
            <summary>
            Closure with the type of the UnityEngine.Component (performance increase)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.ObjectRecordingUtility.DEFAULT_OBJECT_RECORDING_TYPEMAP">
            <summary>
            Default typemap to use for Component Recording
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.ObjectRecordingUtility._GEN_OBJECT_RECORDING_TYPEMAP">
            <summary>
            Buffered Recording typemap (allows for lazy loading this mapping)
            </summary>
        </member>
        <member name="P:u040.prespective.core.scenechangetracking.ObjectRecordingUtility.OBJECT_RECORDING_TYPEMAP">
            <summary>
            Mapping with the Types of Components that support recording
            This Array is lazily loaded so custom user-added type maps are considered
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.ObjectRecordingUtility.GetRecording(UnityEngine.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Retrieve a component recording of the Component
            </summary>
            <param name="_obj">an instance of a UnityEngine.Component cast as UnityEngine.Object</param>
            <param name="_settings">optional settings to apply in this recording</param>
            <returns></returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.ObjectRecordingUtility.RecordAllPossibleComponents(UnityEngine.GameObject,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Record all Possible components on this gameobject
            </summary>
            <param name="_obj">the gameobject to record components on</param>
            <param name="_settings">optional settings to consider</param>
            <returns></returns>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.ObjectRecordingUtility.GetComponentExplicit(u040.prespective.core.scenechangetracking.ComponentRecording,UnityEngine.GameObject)">
            <summary>
            Get the component on _obj explicitly typed as required by the recording
            </summary>
            <param name="_c">the recording with the type definition</param>
            <param name="_obj">the gameobject to retrieve the object on</param>
            <returns></returns>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.ObjectRecordingUtility.GO_MATCH_FILTER_FUNCTIONS">
            <summary>
            Filter functions to apply on GameObject recordings to try and find the best match
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.ObjectRecordingUtility._output">
            <summary>
            If we make this concurrent bag local to the function 'getBestGameObjectRecordingMatchesConcurrent' it will cause a self-reference exception
            see : https://github.com/dotnet/corefx/issues/23068
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:u040.prespective.core.scenechangetracking.ObjectRecordingUtility.getBestGameObjectRecordingMatchesHardFiltering(System.Collections.Generic.List{u040.prespective.core.scenechangetracking.GameObjectRecording},System.Collections.Generic.List{u040.prespective.core.scenechangetracking.GameObjectRecording})" -->
        <!-- Badly formed XML comment ignored for member "M:u040.prespective.core.scenechangetracking.ObjectRecordingUtility.checkPrefectMatch(u040.prespective.core.scenechangetracking.GameObjectRecording,u040.prespective.core.scenechangetracking.components.TransformRecording,u040.prespective.core.scenechangetracking.components.MeshFilterRecording,u040.prespective.core.scenechangetracking.GameObjectRecording)" -->
        <!-- Badly formed XML comment ignored for member "M:u040.prespective.core.scenechangetracking.ObjectRecordingUtility.transformMatch(u040.prespective.core.scenechangetracking.components.TransformRecording,u040.prespective.core.scenechangetracking.components.TransformRecording)" -->
        <!-- Badly formed XML comment ignored for member "M:u040.prespective.core.scenechangetracking.ObjectRecordingUtility.getBestMatchHardFilter(u040.prespective.core.scenechangetracking.GameObjectRecording,System.Collections.Generic.List{u040.prespective.core.scenechangetracking.GameObjectRecording},System.Boolean[])" -->
        <!-- Badly formed XML comment ignored for member "M:u040.prespective.core.scenechangetracking.ObjectRecordingUtility.processMatches(u040.prespective.core.scenechangetracking.GameObjectRecording,System.Collections.Generic.List{u040.prespective.core.scenechangetracking.GameObjectRecording},System.Boolean[])" -->
        <!-- Badly formed XML comment ignored for member "M:u040.prespective.core.scenechangetracking.ObjectRecordingUtility.findBestMatch(System.Collections.Generic.List{u040.prespective.core.scenechangetracking.ObjectRecordingUtility.MatchData})" -->
        <!-- Badly formed XML comment ignored for member "M:u040.prespective.core.scenechangetracking.ObjectRecordingUtility.MatchData.#ctor(System.Int32,u040.prespective.core.scenechangetracking.GameObjectRecording,u040.prespective.core.scenechangetracking.GameObjectRecording)" -->
        <member name="T:u040.prespective.core.scenechangetracking.ObjectRecordingType">
            <summary>
            Mapping describing what Component Recording type should be used to Record a specific type of UnityEngine.Component
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.ObjectRecordingType.typePriority">
            <summary>
            The priority this recording type (map) holds
            x = Recording order, allows you to 'inject' a recording between the recordings of 2 other components
            y = Recording prefference, allows you to hide or override the recording of a type, with the recording of another one (without negatively affecting recording order)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.ObjectRecordingType.recordingType">
            <summary>
            The type 'generally' recorded by this mapping
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.ObjectRecordingType.explicitComponentGetter">
            <summary>
            Function to closure a explicit variant of a getter of this component - used for efficiency
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.ObjectRecordingType.factory">
            <summary>
            Factory function to record an object (and create a explicitly typed recording)
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenechangetracking.ObjectRecordingType.recordingTypeExclusion">
            <summary>
            Types that inherit the recording type but should be excluded as recorded here
            (possibly because you want to use another recording type for them)
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenechangetracking.ObjectRecordingType.matchesType(System.Type,System.Collections.Generic.List{System.Type},System.Collections.Generic.List{System.Type}@)">
            <summary>
            Determine if the type matches the type managed by this recording, taking the ignored and overriden types in account 
            </summary>
            <param name="_t">the type to compare</param>
            <param name="_manuallyIgnored">the types we want to manually ignore (filter setting)</param>
            <param name="_ignoredThroughOverride">the types we want to ignore because theyve been overriden by extension classes</param>
            <returns>whether this mapped type may be used to record a specific type</returns>
        </member>
        <member name="T:u040.prespective.core.topology.AGroupMeshScriptBase">
            <summary>
            Controls the ungrouping and regrouping of a group of meshes
            
            <para>Copyright (c) 2015-2023 Prespective, Unit040 Beheer B.V. All Rights Reserved. See License.txt in the project Prespective folder for license information.</para>
            </summary>
        </member>
        <member name="F:u040.prespective.core.topology.AGroupMeshScriptBase.FilenameGroupPackedMesh">
            <summary>
            Filename of Group and PackedMesh
            </summary>
        </member>
        <member name="F:u040.prespective.core.topology.AGroupMeshScriptBase.FilepathGroupData">
            <summary>
            Filepath of GroupData
            </summary>
        </member>
        <member name="F:u040.prespective.core.topology.AGroupMeshScriptBase.MD5CheckSum">
            <summary>
            Check sum (to see if GroupData files are equal)
            </summary>
        </member>
        <member name="F:u040.prespective.core.topology.AGroupMeshScriptBase.Packed">
            <summary>
            if the group is open or closed
            </summary>
        </member>
        <member name="M:u040.prespective.core.topology.AGroupMeshScriptBase.OnAfterDeserialize">
            <summary>
            serialization functions
            </summary>
        </member>
        <member name="M:u040.prespective.core.topology.AGroupMeshScriptBase.OnBeforeSerialize">
            <summary>
            serialization functions
            </summary>
        </member>
        <member name="P:u040.prespective.core.topology.AGroupMeshScriptBase.GetAppliedHistory">
            <summary>
            get history
            </summary>
        </member>
        <member name="M:u040.prespective.core.topology.AGroupMeshScriptBase.ReadHistory(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,UnityEngine.Transform}},u040.prespective.core.scenechangetracking.SaveChangesData,System.Exception@)">
            <summary>
            read history
            </summary>
            <param name="_connections">transform connection history</param>
            <param name="_data">data to process</param>
            <param name="_error">error's found</param>
            <returns>if successful</returns>
        </member>
        <member name="M:u040.prespective.core.topology.AGroupMeshScriptBase.ApplyExternalHistory(u040.prespective.core.topology.GroupHistoryData,System.Boolean,System.Exception@)">
            <summary>
            apply history
            </summary>
            <param name="_data">data to process</param>
            <param name="_rollback">if roll back</param>
            <param name="_error">error's found</param>
            <returns>if successful</returns>
        </member>
        <member name="M:u040.prespective.core.topology.AGroupMeshScriptBase.PartOfClosedGroup(UnityEngine.Transform)">
            <summary>
            checks if is part of a closed group
            </summary>
            <param name="_t">transform to check</param>
            <returns>if part of closed group</returns>
        </member>
        <member name="M:u040.prespective.core.topology.AGroupMeshScriptBase.PartOfGroup(UnityEngine.Transform)">
            <summary>
            checks if is part of a group
            </summary>
            <param name="_t">transform to check</param>
            <returns>if part of closed group</returns>
        </member>
        <member name="T:u040.prespective.core.topology.GroupHistoryData">
            <summary>
            History data of a group
            </summary>
        </member>
        <member name="T:u040.prespective.core.topology.ABasicLockableTransform">
            <summary>
            Basic object used to lock the setting of a transform in the Unity Editor
            
            <para>Copyright (c) 2015-2023 Prespective, Unit040 Beheer B.V. All Rights Reserved. See License.txt in the project Prespective folder for license information.</para>
            </summary>
        </member>
        <member name="F:u040.prespective.core.topology.ABasicLockableTransform.lockPositionStored">
            <summary>
            Whether and how the position of this transform should be locked
            </summary>
        </member>
        <member name="F:u040.prespective.core.topology.ABasicLockableTransform.lockRotationStored">
            <summary>
            Whether and how the rotation of this transform should be locked
            </summary>
        </member>
        <member name="F:u040.prespective.core.topology.ABasicLockableTransform.lockScaleStored">
            <summary>
            Whether and how the scale of this Transform should be locked
            </summary>
        </member>
        <member name="F:u040.prespective.core.topology.ABasicLockableTransform.lockSelectionStored">
            <summary>
            Whether and how the selection of this Transform should be locked
            </summary>
        </member>
        <member name="F:u040.prespective.core.topology.ABasicLockableTransform.lockHierarchyStored">
            <summary>
            Whether and how the hierarchy of this transform should be locked
            </summary>
        </member>
        <member name="F:u040.prespective.core.topology.ABasicLockableTransform.lockChildrenStored">
            <summary>
            Whether and how the locking should affect child transforms 
            </summary>
        </member>
        <member name="F:u040.prespective.core.topology.ABasicLockableTransform.lockInPlayModeStored">
            <summary>
            Whether and how these locking effects should be present in play mode (when running in the Unity Editor)
            </summary>
        </member>
        <member name="P:u040.prespective.core.topology.ABasicLockableTransform.LockPosition">
            <summary>
            Whether or not the position of this transform should be locked, and in what space
            </summary>
        </member>
        <member name="P:u040.prespective.core.topology.ABasicLockableTransform.LockRotation">
            <summary>
            Whether or not the rotation of this transform should be locked, and in what space
            </summary>
        </member>
        <member name="P:u040.prespective.core.topology.ABasicLockableTransform.LockScale">
            <summary>
            Whether or not the scale of this transform should be locked, and in what space
            </summary>
        </member>
        <member name="P:u040.prespective.core.topology.ABasicLockableTransform.LockSelection">
            <summary>
            Whether or not the selection of this object (when selecting multiple objects) should be prevented
            </summary>
        </member>
        <member name="P:u040.prespective.core.topology.ABasicLockableTransform.LockChildren">
            <summary>
            Whether or not the locking effect is also applied on the children of this transform
            </summary>
        </member>
        <member name="P:u040.prespective.core.topology.ABasicLockableTransform.LockInPlayMode">
            <summary>
            Whether or not the locking effect is also applied in play mode
            </summary>
        </member>
        <member name="P:u040.prespective.core.topology.ABasicLockableTransform.LockHierarchy">
            <summary>
            Whether or not the hierarchy of this transform should be locked
            </summary>
        </member>
        <member name="M:u040.prespective.core.topology.ABasicLockableTransform.BubbleLockingData(u040.prespective.core.topology.ILockableTransform)">
            <summary>
            Called when a iLockableTransform higher in the scene Hierarchy changed its locking settings
            </summary>
            <param name="_parentLockData"></param>
        </member>
        <member name="M:u040.prespective.core.topology.ABasicLockableTransform.TestHierarchyChangeAllowed(UnityEngine.Transform,System.Int32[],System.Int32[]@)">
            <summary>
            Test whether a hierarchy change affecting this transform should be allowed
            </summary>
            <param name="_target">the target transform making a change in hierarchy position</param>
            <param name="_previousChildIndex">the hierarchical path the child previously had within this transform - if empty the child previously wasn't part of our hierarchy (was added)</param>
            <param name="_newChildIndex">the new hierarchical path the child now has within this transform - if empty the child is leaving our hierarchical structure</param>
            <returns>whether the suggested change in hierarchy should be allowed</returns>
        </member>
        <member name="F:u040.prespective.core.topology.ABasicLockableTransform.explicitBuffer">
            <summary>
            buffered type
            </summary>
        </member>
        <member name="P:u040.prespective.core.topology.ABasicLockableTransform.GetConcreteExplicitType">
            <summary>
            Retrieve the preferred Concrete Explicit Inheritance Class of ABasicLockableTransform 
            (which is located in a different assembly, so we need to index it in runtime)
            </summary>
        </member>
        <member name="T:u040.prespective.core.topology.TransformLockSpace">
            <summary>
            The Space in which a transform should be locked
            </summary>
        </member>
        <member name="T:u040.prespective.core.topology.SelectionLockOptions">
            <summary>
            Selection locking options
            </summary>
        </member>
        <member name="T:u040.prespective.core.topology.ChildLockOptions">
            <summary>
            Child locking options
            </summary>
        </member>
        <member name="T:u040.prespective.core.topology.HierarchyLockOptions">
            <summary>
            Hierarchy locking options
            </summary>
        </member>
        <member name="T:u040.prespective.core.topology.ILockableTransform">
            <summary>
            Interface used to lock the setting of a transform in the Unity Editor
            
            <para>Copyright (c) 2015-2023 Prespective, Unit040 Beheer B.V. All Rights Reserved. See License.txt in the project Prespective folder for license information.</para>
            </summary>
        </member>
        <member name="P:u040.prespective.core.topology.ILockableTransform.LockPosition">
            <summary>
            Whether or not the position of this transform should be locked, and in what space
            </summary>
        </member>
        <member name="P:u040.prespective.core.topology.ILockableTransform.LockRotation">
            <summary>
            Whether or not the rotation of this transform should be locked, and in what space
            </summary>
        </member>
        <member name="P:u040.prespective.core.topology.ILockableTransform.LockScale">
            <summary>
            Whether or not the scale of this transform should be locked, and in what space
            </summary>
        </member>
        <member name="P:u040.prespective.core.topology.ILockableTransform.LockSelection">
            <summary>
            Whether or not the selection of this object (when selecting multiple objects) should be prevented
            </summary>
        </member>
        <member name="P:u040.prespective.core.topology.ILockableTransform.LockChildren">
            <summary>
            Whether or not the locking effect is also applied on the children of this transform
            </summary>
        </member>
        <member name="P:u040.prespective.core.topology.ILockableTransform.LockHierarchy">
            <summary>
            Whether or not the hierarchy of this transform should be locked
            </summary>
        </member>
        <member name="P:u040.prespective.core.topology.ILockableTransform.LockInPlayMode">
            <summary>
            Whether or not the locking effect is also applied in play mode
            </summary>
        </member>
        <member name="M:u040.prespective.core.topology.ILockableTransform.BubbleLockingData(u040.prespective.core.topology.ILockableTransform)">
            <summary>
            Called when a iLockableTransform higher in the scene Hierarchy changed its locking settings
            </summary>
            <param name="_parentLockData"></param>
        </member>
        <member name="M:u040.prespective.core.topology.ILockableTransform.TestHierarchyChangeAllowed(UnityEngine.Transform,System.Int32[],System.Int32[]@)">
            <summary>
            Test whether a hierarchy change affecting this transform should be allowed
            </summary>
            <param name="_target">the target transform making a change in hierarchy position</param>
            <param name="_previousChildIndex">the hierarchical path the child previously had within this transform - if empty the child previously wasn't part of our hierarchy (was added)</param>
            <param name="_newChildIndex">the new hierarchical path the child now has within this transform - if empty the child is leaving our hierarchical structure</param>
            <returns>whether the suggested change in hierarchy should be allowed</returns>
        </member>
        <member name="T:u040.prespective.core.topology.PivotMover">
            <summary>
            Moves the pivot to given location and rotates a given rotation
            
            <para>Copyright (c) 2015-2023 Prespective, Unit040 Beheer B.V. All Rights Reserved. See License.txt in the project Prespective folder for license information.</para>
            </summary>
        </member>
        <member name="M:u040.prespective.core.topology.PivotMover.ChangePivot(UnityEngine.GameObject[],UnityEngine.Vector3,System.Boolean)">
            <summary>
            moves the pivots by translation
            </summary>
            <param name="_ngo">objects to move pivot</param>
            <param name="_trans">translation amount</param>
            <param name="_save">if should save</param>
        </member>
        <member name="M:u040.prespective.core.topology.PivotMover.ChangePivot(UnityEngine.GameObject,UnityEngine.Vector3,System.Boolean)">
            <summary>
            moves the pivot by translation
            </summary>
            <param name="_go">object to move pivot</param>
            <param name="_trans">translation amount</param>
            <param name="_save">if should save</param>
        </member>
        <member name="M:u040.prespective.core.topology.PivotMover.ChangePivotToLocation(UnityEngine.GameObject[],UnityEngine.Vector3,System.Boolean)">
            <summary>
            moves the pivots to location
            </summary>
            <param name="_ngo">objects to move pivot</param>
            <param name="_pos">pivot location in global space</param>
            <param name="_save">if should save</param>
        </member>
        <member name="M:u040.prespective.core.topology.PivotMover.ChangePivotToLocation(UnityEngine.GameObject,UnityEngine.Vector3,System.Boolean)">
            <summary>
            moves the pivot to location
            </summary>
            <param name="_go">object to move pivot</param>
            <param name="_pos">pivot location in global space</param>
            <param name="_save">if should save</param>
        </member>
        <member name="M:u040.prespective.core.topology.PivotMover.ChangePivot(UnityEngine.GameObject[],UnityEngine.Quaternion,System.Boolean)">
            <summary>
            checks if the function for all game objects given
            </summary>
            <param name="_ngo">objects to rotate pivot</param>
            <param name="_rot">pivot rotation</param>
            <param name="_save">if should save</param>
        </member>
        <member name="M:u040.prespective.core.topology.PivotMover.ChangePivot(UnityEngine.GameObject,UnityEngine.Quaternion,System.Boolean)">
            <summary>
            checks if the function
            </summary>
            <param name="_go">object to rotate pivot</param>
            <param name="_rot">pivot rotation</param>
            <param name="_save">if should save</param>
        </member>
        <member name="M:u040.prespective.core.topology.PivotMover.ChangePivotToRotation(UnityEngine.GameObject[],UnityEngine.Quaternion,System.Boolean)">
            <summary>
            rotates the game objects to a desired angle
            </summary>
            <param name="_ngo">objects to rotate pivot</param>
            <param name="_rot">pivot rotation</param>
            <param name="_save">if should save</param>
        </member>
        <member name="M:u040.prespective.core.topology.PivotMover.ChangePivotToRotation(UnityEngine.GameObject,UnityEngine.Quaternion,System.Boolean)">
            <summary>
            rotates the game object to a desired angle
            </summary>
            <param name="_go">object to rotate pivot</param>
            <param name="_rot">pivot rotation</param>
            <param name="_save">if should save</param>
        </member>
        <member name="M:u040.prespective.core.topology.PivotMover.changePivotInternal(UnityEngine.GameObject[],UnityEngine.Vector3,System.Boolean)">
            <summary>
            moves the pivots by translation
            </summary>
            <param name="_ngo">objects to move pivot</param>
            <param name="_trans">translation amount</param>
            <param name="_save">if should save</param>
        </member>
        <member name="M:u040.prespective.core.topology.PivotMover.changePivotInternal(UnityEngine.GameObject,UnityEngine.Vector3,System.Boolean)">
            <summary>
            moves the pivot by translation
            </summary>
            <param name="_go">object to move pivot</param>
            <param name="_trans">translation amount</param>
            <param name="_save">if should save</param>
        </member>
        <member name="M:u040.prespective.core.topology.PivotMover.changePivotToLocationInternal(UnityEngine.GameObject[],UnityEngine.Vector3,System.Boolean)">
            <summary>
            moves the pivots to location
            </summary>
            <param name="_ngo">objects to move pivot</param>
            <param name="_pos">pivot location in global space</param>
            <param name="_save">if should save</param>
        </member>
        <member name="M:u040.prespective.core.topology.PivotMover.changePivotToLocationInternal(UnityEngine.GameObject,UnityEngine.Vector3,System.Boolean)">
            <summary>
            moves the pivot to location
            </summary>
            <param name="_go">object to move pivot</param>
            <param name="_pos">pivot location in global space</param>
            <param name="_save">if should save</param>
        </member>
        <member name="M:u040.prespective.core.topology.PivotMover.movePivotBy(UnityEngine.GameObject,UnityEngine.Vector3,System.Boolean)">
            <summary>
            moves the pivot a certain amount.
            </summary>
            <param name="_go">game object</param>
            <param name="_trans">translation amount</param>
            <param name="_save">if should save</param>
        </member>
        <member name="M:u040.prespective.core.topology.PivotMover.moveBackChild(UnityEngine.Transform,UnityEngine.Vector3)">
            <summary>
            this moves the children in correct position to correct for movement parent
            </summary>
            <param name="_t">parent</param>
            <param name="_move"> distance moved</param>
        </member>
        <member name="M:u040.prespective.core.topology.PivotMover.changePivotInternal(UnityEngine.GameObject[],UnityEngine.Quaternion,System.Boolean)">
            <summary>
            checks if the function for all game objects given
            </summary>
            <param name="_ngo">objects to rotate pivot</param>
            <param name="_rot">pivot rotation</param>
            <param name="_save">if should save</param>
        </member>
        <member name="M:u040.prespective.core.topology.PivotMover.changePivotInternal(UnityEngine.GameObject,UnityEngine.Quaternion,System.Boolean)">
            <summary>
            checks if the function
            </summary>
            <param name="_go">object to rotate pivot</param>
            <param name="_rot">pivot rotation</param>
            <param name="_save">if should save</param>
        </member>
        <member name="M:u040.prespective.core.topology.PivotMover.changePivotToRotationInternal(UnityEngine.GameObject[],UnityEngine.Quaternion,System.Boolean)">
            <summary>
            rotates the game objects to a desired angle
            </summary>
            <param name="_ngo">objects to rotate pivot</param>
            <param name="_rot">pivot rotation</param>
            <param name="_save">if should save</param>
        </member>
        <member name="M:u040.prespective.core.topology.PivotMover.changePivotToRotationInternal(UnityEngine.GameObject,UnityEngine.Quaternion,System.Boolean)">
            <summary>
            rotates the game object to a desired angle
            </summary>
            <param name="_go">object to rotate pivot</param>
            <param name="_rot">pivot rotation</param>
            <param name="_save">if should save</param>
        </member>
        <member name="M:u040.prespective.core.topology.PivotMover.rotatePivotBy(UnityEngine.GameObject,UnityEngine.Quaternion,System.Boolean)">
            <summary>
            moves the pivot with a certain rotation
            </summary>
            <param name="_go">game object</param>
            <param name="_rot">rotation moved</param>
            <param name="_save">if should save</param>
        </member>
        <member name="M:u040.prespective.core.topology.PivotMover.addGameObjectForRotation(UnityEngine.GameObject,UnityEngine.Quaternion)">
            <summary>
            moves the pivot by adding a game object parent on the game object and changes that ones pivot
            </summary>
            <param name="_go">game object</param>
            <param name="_rot">added rotation</param>
        </member>
        <member name="M:u040.prespective.core.topology.PivotMover.rotateBackChild(UnityEngine.Transform,UnityEngine.Quaternion)">
            <summary>
            this rotates the children in correct position to correct for rotations parent
            </summary>
            <param name="_t">parent</param>
            <param name="_rot">rotation added</param>
        </member>
        <member name="M:u040.prespective.core.topology.PivotMover.processOtherGOWithSameMeshPosition(UnityEngine.GameObject,UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            fixes the position that has also been applied to the other meshes in the scene
            </summary>
            <param name="_originalGO">original game object that had its pivot changed</param>
            <param name="_mesh">mesh that has been changed</param>
            <param name="_trans">position moved</param>
            <param name="_move">location difference</param>
        </member>
        <member name="M:u040.prespective.core.topology.PivotMover.processOtherGOWithSameMeshRotation(UnityEngine.GameObject,UnityEngine.Mesh,UnityEngine.Quaternion,UnityEngine.Vector3)">
            <summary>
            fixes the rotation that has also been applied to the other meshes in the scene
            </summary>
            <param name="_originalGO">original game object that had its pivot changed</param>
            <param name="_mesh">mesh that has been changed</param>
            <param name="_rot">rotation difference</param>
            <param name="_diff">original difference between pivot point and centre of mesh</param>
        </member>
        <member name="T:u040.prespective.core.topology.PivotMover.OnFixOtherGameObject">
            <summary>
            
            </summary>
            <param name="_go"></param>
            <param name="_mf"></param>
        </member>
        <member name="M:u040.prespective.core.topology.PivotMover.basProcessOtherGO(UnityEngine.GameObject,UnityEngine.Mesh,u040.prespective.core.topology.PivotMover.OnFixOtherGameObject)">
            <summary>
            basic processing of other game object translation rotation change
            </summary>
            <param name="_originalGO"></param>
            <param name="_mesh"></param>
            <param name="_act"></param>
        </member>
        <member name="M:u040.prespective.core.topology.PivotMover.fixMoveColliders(UnityEngine.MeshFilter,UnityEngine.Vector3)">
            <summary>
            moves the collider to correct location
            </summary>
            <param name="_mf">mesh filter</param>
            <param name="_move">location difference</param>
        </member>
        <member name="M:u040.prespective.core.topology.PivotMover.fixRotateColliders(UnityEngine.MeshFilter,UnityEngine.Quaternion,UnityEngine.Vector3)">
            <summary>
            rotates the collider to correct location
            </summary>
            <param name="_mf">mesh filter</param>
            <param name="_rot">rotation difference</param>
            <param name="_diff">original difference between pivot point and centre of mesh</param>
        </member>
        <member name="M:u040.prespective.core.topology.PivotMover.saveMesh(UnityEngine.MeshFilter,UnityEngine.Vector3[])">
            <summary>
            saves the mesh if necessary
            </summary>
            <param name="_mf">mesh filter</param>
            <param name="_originalVertices">original vertices</param>
        </member>
        <member name="M:u040.prespective.core.topology.PivotMover.makeHistory(u040.prespective.core.scenechangetracking.ASceneChangeTrackingBase,UnityEngine.Vector3,UnityEngine.Quaternion,System.String,System.String)">
            <summary>
            makes history for pivot mover
            </summary>
            <param name="_hist">prehistory</param>
            <param name="_trans">movement translated</param>
            <param name="_rot">rotation added</param>
            <param name="_t">transform applied on</param>
            <param name="_type">movement type</param>
        </member>
        <member name="M:u040.prespective.core.topology.PivotMover.ReadHistory(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,UnityEngine.Transform}},u040.prespective.core.scenechangetracking.SaveChangesData,System.Exception@)">
            <summary>
            reads the data given and implements the pivot movement
            </summary>
            <param name="_connections">transform path transform connections</param>
            <param name="_data">pivot movement data</param>
            <param name="_error">exceptions</param>
            <returns>if successful</returns>
        </member>
        <member name="T:u040.prespective.core.topology.PivotMover.PivotMoverData">
            <summary>
            pivot moving data
            </summary>
        </member>
        <member name="F:u040.prespective.core.topology.PivotMover.PivotMoverData.TransformPath">
            <summary>
            transform path pivot moved object
            </summary>
        </member>
        <member name="F:u040.prespective.core.topology.PivotMover.PivotMoverData.Type">
            <summary>
            type of pivot moving
            </summary>
        </member>
        <member name="F:u040.prespective.core.topology.PivotMover.PivotMoverData.Translation">
            <summary>
            amount of translation
            </summary>
        </member>
        <member name="F:u040.prespective.core.topology.PivotMover.PivotMoverData.Rotation">
            <summary>
            amount of rotation
            </summary>
        </member>
        <member name="M:u040.prespective.core.topology.PivotMover.PivotMoverData.#ctor(System.String,System.String,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            constructor
            </summary>
            <param name="_dummyTransformPath">transform path pivot moved object</param>
            <param name="_dummyType">type of pivot moving</param>
            <param name="_dummyTranslation">amount of translation</param>
            <param name="_dummyRotation">amount of rotation</param>
        </member>
        <member name="M:u040.prespective.core.topology.PivotMover.groupCheck(UnityEngine.GameObject)">
            <summary>
            checks if is part of a group and if that is allowed
            </summary>
            <param name="_go">game object</param>
            <returns>if allowed</returns>
        </member>
        <member name="T:u040.prespective.core.topology.ATrackableGameObject">
            <summary>
            <description>
            Unity Currently does not offer a Unique identifier for tracking a gameobject in the scene (outside playmode)
            this monobehavior makes sure 
            </description>
            <version 
                ver="1.0.0" 
                author="PWS" 
                date="200819">
                First implementation for use with the MotionPathGraph, to prevent it losing references
            </version>
            </summary>
        </member>
        <member name="F:u040.prespective.core.topology.ATrackableGameObject.TrackingAddress">
            <summary>
            The Unique Tracking address of this trackable GameObject
            </summary>
        </member>
        <member name="P:u040.prespective.core.topology.ATrackableGameObject.AllTrackableGameObjectsInScene">
            <summary>
            Overview of all trackable gameobjects in the scene
            </summary>
        </member>
        <member name="P:u040.prespective.core.topology.ATrackableGameObject.GetConcreteExplicitType">
            <summary>
            Getter for the preferred Concrete implementation of this class
            </summary>
        </member>
        <member name="M:u040.prespective.core.topology.ATrackableGameObject.Reset">
            <summary>
            Reset gets called on adding the component, or resetting so we use this function to update the tracking address
            and register this instance as trackable
            </summary>
        </member>
        <member name="M:u040.prespective.core.topology.ATrackableGameObject.GetTrackableGameObject(System.String,u040.prespective.core.topology.ATrackableGameObject@)">
            <summary>
            Return the trackingGameObject By Address
            </summary>
            <param name="_trackingAddress">the ID or tracking address to look for</param>
            <param name="_trackableGameObject">the found AtrackableGameObject Instance</param>
            <returns>whether a ATrackableGameObject with the ID could be found</returns>
        </member>
        <member name="M:u040.prespective.core.topology.ATrackableGameObject.FeedGetter(UnityEngine.GameObject@,System.String)">
            <summary>
            Utility Function commonly used when storing a gameobject as string
            This function feeds the GameObject found at _goPath into the _goBuffer
            </summary>
            <param name="_goBuffer">buffer object used to store a gameobject reference</param>
            <param name="_goPath">ID or Path used to find the GameObject</param>
        </member>
        <member name="M:u040.prespective.core.topology.ATrackableGameObject.FeedSetter(System.String@,UnityEngine.GameObject@,UnityEngine.GameObject)">
            <summary>
            Utility Function commonly used when assinging a gameobject to a buffer
            This function saves the GameObject found at _goBuffer into the serializable string _goPath
            </summary>
            <param name="_goPath">the path to store the GO to</param>
            <param name="_goBuffer">the buffer to use</param>
            <param name="_newGOValue">new value to load into buffer and export to string</param>
        </member>
        <member name="M:u040.prespective.core.topology.ATrackableGameObject.FeedGetter``1(``0@,System.String,System.Action{UnityEngine.GameObject})">
            <summary>
            Utility Function commonly used when storing an Component as string
            This function feeds the GameObject found at _goPath into the _goBuffer
            </summary>
            <typeparam name="T">the component type (generally infered from input)</typeparam>
            <param name="_goBuffer">buffer object used to store a gameobject reference</param>
            <param name="_goPath">ID or Path used to find the GameObject</param>
            <param name="_onGOFound">Optional Override for what to do with the gameobject when found</param>
        </member>
        <member name="M:u040.prespective.core.topology.ATrackableGameObject.FeedSetter``1(System.String@,``0@,``0)">
            <summary>
            Utility Function commonly used when assinging a Component to a buffer
            This function saves the GameObject found at _goBuffer into the serializable string _goPath
            </summary>
            <typeparam name="T">the component type (generally infered from input)</typeparam>
            <param name="_goPath">the path to store the GO to</param>
            <param name="_goBuffer">the buffer to use</param>
            <param name="_newGOValue">new value to load into buffer and export to string</param>
        </member>
        <member name="M:u040.prespective.core.topology.ATrackableGameObject.ResetTrackingIndex">
            <summary>
            Reset the tracking Index;
            </summary>
        </member>
        <member name="M:u040.prespective.core.topology.ATrackableGameObject.RefreshTrackingAddress">
            <summary>
            Forces this tracking address to refresh
            </summary>
        </member>
        <member name="M:u040.prespective.core.topology.ATrackableGameObject.GetTrackingIndex(u040.prespective.core.topology.ATrackableGameObject)">
            <summary>
            Retrieves the index of this trackableGameObject
            </summary>
            <param name="_go"></param>
            <returns>the index of the sought ID</returns>
        </member>
        <member name="M:u040.prespective.core.topology.ATrackableGameObject.GetTrackingIndex(System.String,System.Boolean)">
            <summary>
            Look for the tracking index by ID (Tracking Address)
            </summary>
            <param name="_ID">the Tracking Address to look for</param>
            <param name="_searchSceneFirst">whether to check the scene first, or only look in index instances</param>
            <returns>the index of the sought ID</returns>
        </member>
        <member name="P:u040.prespective.core.scenestreaming.serialization.ZfMesh.Triangles">
            <summary>
            x = subMesh
            y = triangle array
            </summary>
        </member>
        <member name="T:u040.prespective.core.scenemanagement.DSceneVector">
            <summary>
            A vector for control through inspector with multiple space indications in doubles
            
            <para>Copyright (c) 2015-2023 Prespective, Unit040 Beheer B.V. All Rights Reserved. See License.txt in the project Prespective folder for license information.</para>
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenemanagement.DSceneVector.localParentvector">
            <summary>
            Buffered local parent vector
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenemanagement.DSceneVector.localChildvector">
            <summary>
            Buffered local child vector
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenemanagement.DSceneVector.globalVector">
            <summary>
            Buffered Global vector
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenemanagement.DSceneVector.dtransform">
            <summary>
            Buffered Transform
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenemanagement.DSceneVector.transformPath">
            <summary>
            Transform path of connected transform
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenemanagement.DSceneVector.VectorSpace">
            <summary>
            The VectorSpace this vector was stored in
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenemanagement.DSceneVector.TrackingSpace">
            <summary>
            Tracking space of vector
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenemanagement.DSceneVector.DefaultDirection">
            <summary>
            Present default direction
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenemanagement.DSceneVector.VectorColor">
            <summary>
            Colour this vector should have in the scene
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenemanagement.DSceneVector.OnVectorChanged">
            <summary>
            What to do if vector changes
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenemanagement.DSceneVector.FoldOutInInspector">
            <summary>
            Whether the vector settings should be folded out in the inspector
            </summary>
        </member>
        <member name="F:u040.prespective.core.scenemanagement.DSceneVector.ShowGizmoInScene">
            <summary>
            Whether the gizmo should be visible in the scene
            </summary>
        </member>
        <member name="P:u040.prespective.core.scenemanagement.DSceneVector.CurrentSpaceVector">
            <summary>
            Return the vector in the currently selected space
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenemanagement.DSceneVector.getVectorOfCurrentVectorSpace(u040.prespective.math.doubles.DVector3)">
            <summary>
            Get this space here vector from global vector
            </summary>
            <param name="_globalVector">global vector</param>
            <returns>this space vector</returns>
        </member>
        <member name="P:u040.prespective.core.scenemanagement.DSceneVector.GlobalVector">
            <summary>
            Return the global vector
            </summary>
        </member>
        <member name="P:u040.prespective.core.scenemanagement.DSceneVector.localVector">
            <summary>
            Return the local vector
            </summary>
        </member>
        <member name="P:u040.prespective.core.scenemanagement.DSceneVector.localChildVector">
            <summary>
            Return local child vector
            </summary>
        </member>
        <member name="P:u040.prespective.core.scenemanagement.DSceneVector.HasTransform">
            <summary>
            If scene vector has a transform stored
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenemanagement.DSceneVector.SetTransform(u040.prespective.core.transformation.ADTransform)">
            <summary>
            Set DTransform
            </summary>
            <param name="_dTransform">DTransform</param>
        </member>
        <member name="P:u040.prespective.core.scenemanagement.DSceneVector.SilentLocalVector">
            <summary>
            Set the vector locally without triggering a Vector changed event
            </summary>
        </member>
        <member name="P:u040.prespective.core.scenemanagement.DSceneVector.SilentGlobalVector">
            <summary>
            Set the global vector without triggering a Vector changed event
            </summary>
        </member>
        <member name="P:u040.prespective.core.scenemanagement.DSceneVector.ConnectedTransform">
            <summary>
            Gets the connected transform and if none found check if it can reattach one
            </summary>
        </member>
        <member name="P:u040.prespective.core.scenemanagement.DSceneVector.Initialized">
            <summary>
            Check whether DSceneVector has been initialized
            </summary>
        </member>
        <member name="M:u040.prespective.core.scenemanagement.DSceneVector.#ctor(u040.prespective.math.doubles.DVector3,u040.prespective.utility.scenemanagement.VectorSpace,u040.prespective.core.transformation.ADTransform,u040.prespective.core.scenemanagement.DSceneVector)">
            <summary>
            Default constructor for the Scene Vector
            </summary>
            <param name="_value">Value used for the vector</param>
            <param name="_space">whether the supplied vector is in local or global space</param>
            /// <param name="_t">transform connected to scene vector</param>
            /// <param name="_sv">scene vector to fill values with</param>
        </member>
        <member name="M:u040.prespective.core.scenemanagement.DSceneVector.#ctor(u040.prespective.math.doubles.DVector3,u040.prespective.utility.scenemanagement.VectorSpace,u040.prespective.utility.scenemanagement.VectorSpace,u040.prespective.core.transformation.ADTransform)">
            <summary>
            Constructor
            </summary>
            <param name="_value">Value used for the vector</param>
            <param name="_trackingSpace">tracking space</param>
            <param name="_vectorSpace">vector space</param>
            /// <param name="_t">transform connected to scene vector</param>
        </member>
        <member name="M:u040.prespective.core.scenemanagement.DSceneVector.setVector(u040.prespective.math.doubles.DVector3,u040.prespective.utility.scenemanagement.VectorSpace,u040.prespective.core.transformation.ADTransform)">
            <summary>
            Actually set the vectors
            </summary>
            <param name="_vector"></param>
            <param name="_space">space vector is in</param>
            <param name="_t">transform calculate space in</param>
            <returns>is setting was successful</returns>
        </member>
        <member name="M:u040.prespective.core.scenemanagement.DSceneVector.Validate(u040.prespective.core.scenemanagement.DSceneVector,u040.prespective.math.doubles.DVector3,u040.prespective.utility.scenemanagement.VectorSpace,u040.prespective.core.transformation.ADTransform,UnityEngine.Color,System.Action)">
            <summary>
            Validate a scene vector with certain default values. If null of magnitude == 0d, reset Global Vector with default values.
            </summary>
            <param name="_vector"></param>
            <param name="_defaultDirection"></param>
            <param name="_defaultSpace"></param>
            <param name="_transform"></param>
            <param name="_defaultColor"></param>
            <param name="_onVectorChanged"></param>
            <returns></returns>
        </member>
        <member name="M:u040.prespective.core.spline.SplineDrawingUtility.DrawSplineInEditorUsingGPU(u040.prespective.core.spline.ADSpline,UnityEngine.ComputeShader,System.Single,System.Boolean,UnityEngine.Bounds,UnityEngine.Material@,UnityEngine.ComputeBuffer@,UnityEngine.ComputeBuffer@,UnityEngine.Material@,UnityEngine.ComputeBuffer@,UnityEngine.Material@,UnityEngine.ComputeBuffer@,UnityEngine.Material@,UnityEngine.ComputeBuffer@)">
            <summary>
            Draw the spline and forward, up and right line using GPU
            </summary>
            <param name="_spline">spline</param>
            <param name="_splineDrawComputeShader">compute shader</param>
            <param name="_radius">radius drawn spline lines</param>
            <param name="_updateDrawSplinePoints">update spline</param>
            <param name="_bounds">bounds</param>
            <param name="_splineMaterial">spline line material</param>
            <param name="_pointBuffer">spline points buffer</param>
            <param name="_linesBuffer">main line buffer</param>
            <param name="_upSplineMaterial">up line material</param>
            <param name="_upLinesBuffer">up line buffer</param>
            <param name="_forwardSplineMaterial">forward line material</param>
            <param name="_forwardLinesBuffer">forward line buffer</param>
            <param name="_rightSplineMaterial">right line material</param>
            <param name="_rightLinesBuffer">right line buffer</param>
        </member>
        <member name="M:u040.prespective.core.spline.SplineDrawingUtility.DrawSplineControlPointsInEditorUsingGPU(u040.prespective.core.spline.ADSpline,System.Single,System.Boolean,UnityEngine.Bounds,UnityEngine.Material@,UnityEngine.ComputeBuffer@)">
            <summary>
            Draw the spline control points using GPU
            </summary>
            <param name="_spline">spline</param>
            <param name="_size">size drawn control points</param>
            <param name="_updateDrawSplinePoints">if update spline points</param>
            <param name="_bounds">bounds</param>
            <param name="_controlPointMaterial">material</param>
            <param name="_controlPointPositionBuffer">point buffer</param>
        </member>
        <member name="F:u040.prespective.core.spline.SplineDrawingUtility.SplinePointData.Position">
            <summary>
            Point position
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.SplineDrawingUtility.SplinePointData.Rotation">
            <summary>
            Point Rotation
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.SplineDrawingUtility.PointData.Position">
            <summary>
            Control point position
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.SplineDrawingUtility.PointData.Colour">
            <summary>
            Point color
            </summary>
        </member>
        <member name="T:u040.prespective.core.spline.DSplineCurveSegment">
            <summary>
            <description>
            Description of a Spline curve segment
            </description>
            <version 
                ver="1.0.0" 
                author="TDK" 
                date="191114">
                Refactored from the original spline tooling
            </version>
            </summary>
        </member>
        <member name="T:u040.prespective.core.spline.DSplineCurveSegment.RotationDirection">
            <summary>
            how to process the rotation
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.DSplineCurveSegment.TesselationBuffer">
            <summary>
            the buffered amount of tessellation points
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.DSplineCurveSegment.SegmentColor">
            <summary>
            Colour this segment currently has
            (Note that this may be used in production code to colour a potential mesh)
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.DSplineCurveSegment.OpenInInspector">
            <summary>
            if should open tab in inspector
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.DSplineCurveSegment.RotationType">
            <summary>
            with type of rotation processing is done over the segment
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.DSplineCurveSegment.curveSegmentLength">
            <summary>
            curve length of segment
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.DSplineCurveSegment.startControlPoint">
            <summary>
            begin spline control point segment
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.DSplineCurveSegment.endControlPoint">
            <summary>
            end spline control point segment
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.DSplineCurveSegment.traversalManager">
            <summary>
            traversal manager
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.DSplineCurveSegment.nurbsCurve">
            <summary>
            connected NURBS curve
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.DSplineCurveSegment.tesselatedRotationBuffer">
            <summary>
            rotation buffer
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.DSplineCurveSegment.tesselatedPositionBuffer">
            <summary>
            position buffer
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.DSplineCurveSegment.tolerance">
            <summary>
            Maximum tolerance of the segment
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.DSplineCurveSegment.tesselatedNormalBuffer">
            <summary>
            normal buffer
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.DSplineCurveSegment.lastAngleBetweenSampels">
            <summary>
            last used angle between samples
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.DSplineCurveSegment.storedSetBuffer">
            <summary>
            If should buffer its calls to the transform and then use those buffered value instead of the transform values
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.DSplineCurveSegment.bufferedLocalToWorld">
            <summary>
            Buffered local to world matrix
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.DSplineCurveSegment.bufferdWorldToLocal">
            <summary>
            Buffered world to local matrix
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.DSplineCurveSegment.CurveSegmentLength">
            <summary>
            Get the length of this curve segment
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.DSplineCurveSegment.SegmentOrder">
            <summary>
            Retrieves the NURBS curve order of this segment (for now we only support 1st and 2nd order)
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.DSplineCurveSegment.StartPoint">
            <summary>
            Start(control)point of this curve segment
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.DSplineCurveSegment.EndPoint">
            <summary>
            End(control)point of this curve segment
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.DSplineCurveSegment.ControlPolygon">
            <summary>
            Retrieve the control polygon of this Curve Segment
            A control polygon is the NURBS control polygon that describes a simple shape
            containing the *entire* curve
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.DSplineCurveSegment.NurbsCurve">
            <summary>
            The Actual curve description
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.DSplineCurveSegment.TesselationSamples">
            <summary>
            The sample setting for tessellation of this curve segment;
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.DSplineCurveSegment.AngleBetweenSamples">
            <summary>
            Amount of angle between samples
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.DSplineCurveSegment.TessellatedNormalBuffer">
            <summary>
            the buffer of tessellated values of this segment
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.DSplineCurveSegment.Tolerance">
            <summary>
            Maximum tolerance of the segment
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.DSplineCurveSegment.SetBuffer">
            <summary>
            If should buffer its calls to the transform and then use those buffered value instead of the transform values
            </summary>
        </member>
        <member name="M:u040.prespective.core.spline.DSplineCurveSegment.#ctor(u040.prespective.core.spline.ADSplineControlPoint,u040.prespective.core.spline.ADSplineControlPoint,System.Double,u040.prespective.core.spline.DSplineCurveSegment.RotationDirection)">
            <summary>
            Create a new Spline Curve Segment from _startPoint to _endPoint
            </summary>
            <param name="_startPoint">start point segment</param>
            <param name="_endPoint">end point segment</param>
            <param name="_angleBetweenSamples">optional; angle between samples</param>
            <param name="_rotationType">optional; type of rotation processing</param>
        </member>
        <member name="M:u040.prespective.core.spline.DSplineCurveSegment.setupCurveSegment(u040.prespective.core.spline.ADSplineControlPoint,u040.prespective.core.spline.ADSplineControlPoint,System.Double,u040.prespective.core.spline.DSplineCurveSegment.RotationDirection)">
            <summary>
            sets up curve segment
            </summary>
            <param name="_startPoint">start point segment</param>
            <param name="_endPoint">end point segment</param>
            <param name="_angleBetweenSamples">optional; angle between samples</param>
            <param name="_rotationType">optional; type of rotation processing</param>
        </member>
        <member name="M:u040.prespective.core.spline.DSplineCurveSegment.UpdateCurveSegment(u040.prespective.core.spline.ADSplineControlPoint,u040.prespective.core.spline.ADSplineControlPoint,System.Double)">
            <summary>
            Update the curve segment calculation
            </summary>
            <param name="_startPoint">optional; update for the start point</param>
            <param name="_endPoint">optional; update for the end point</param>
            <param name="_angleBetweenSamples">optional; angle between samples</param>
            <returns></returns>
        </member>
        <member name="M:u040.prespective.core.spline.DSplineCurveSegment.GetClosestPointOnLine(u040.prespective.math.doubles.DVector3,System.Double@,System.Double@)">
            <summary>
            get closeted point on segment
            </summary>
            <param name="_worldPoint">point to check against</param>
            <param name="_distance">distance between given point and found point</param>
            <param name="_eqPerc">percentage of found point</param>
            <returns>found point</returns>
        </member>
        <member name="M:u040.prespective.core.spline.DSplineCurveSegment.GetPointAtEquidistantPerc(System.Double)">
            <summary>
            get point at equidistant percentage
            </summary>
            <param name="_perc">percentage</param>
            <returns>found point</returns>
        </member>
        <member name="M:u040.prespective.core.spline.DSplineCurveSegment.GetRotationAtEquidistantPerc(System.Double,u040.prespective.math.doubles.DVector3@,System.Double,System.Double,System.Double)">
            <summary>
            get rotation at equidistant percentage
            </summary>
            <param name="_perc">percentage</param>
            <param name="_pos">found point</param>
            <param name="_precision">precision</param>
            <param name="_margin">margin</param>
            <returns>found rotation</returns>
        </member>
        <member name="M:u040.prespective.core.spline.DSplineCurveSegment.getAngleDifferenceBetweenPoints(u040.prespective.math.doubles.DQuaternion,u040.prespective.core.spline.ADSplineControlPoint,u040.prespective.core.spline.ADSplineControlPoint,u040.prespective.math.doubles.DVector3,u040.prespective.math.doubles.DVector3)">
            <summary>
            gets the angle difference between begin and end of segment
            </summary>
            <param name="_parentGlobalRotation">global rotation</param>
            <param name="_startPoint">start point segment</param>
            <param name="_endPoint">end point segment</param>
            <param name="_forwardBegin">forward of begin segment</param>
            <param name="_forwardEnd">forward of end segment</param>
            <returns>angle difference in degrees</returns>
        </member>
        <member name="M:u040.prespective.core.spline.DSplineCurveSegment.GetIntersectPointsWithLine(u040.prespective.math.spline.doubles.DNURBSCurve3D,System.Collections.Generic.List{u040.prespective.math.doubles.DVector3}@,System.Int32,System.Double)">
            <summary>
            gets intersection points between segment and given line
            </summary>
            <param name="_line">line</param>
            <param name="_intersectpoints">found intersect points</param>
            <param name="_numberOfPasses">number of passes of the Casteljau algorithm</param>
            <param name="_minimumDistanceValue">minimum distance between which it is assumed that 2 intersection points are actually the same intersection point</param>
            <returns>if has intersection</returns>
        </member>
        <member name="M:u040.prespective.core.spline.DSplineCurveSegment.CalculateMaximumTolerance">
            <summary>
            calculates the maximum tolerance of segment between implicit and tessellated curve
            </summary>
        </member>
        <member name="T:u040.prespective.core.spline.TesselatedNormalDescription">
            <summary>
            the point value from tessellation
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.TesselatedNormalDescription.LocalPoint">
            <summary>
            local point
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.TesselatedNormalDescription.LocalRotation">
            <summary>
            local rotation
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.TesselatedNormalDescription.LocalPointFloat">
            <summary>
            local point in floating point precision
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.TesselatedNormalDescription.LocalRotationFloat">
            <summary>
            local rotation in floating point precision
            </summary>
        </member>
        <member name="M:u040.prespective.core.spline.TesselatedNormalDescription.ToString">
            <summary>
            to string
            </summary>
            <returns>string value of struct</returns>
        </member>
        <member name="T:u040.prespective.core.spline.ADSplineControlPoint">
            <summary>
            Model containing data and algorithms for positioning and orienting a single spline control point
            
            <para>Copyright (c) 2015-2023 Prespective, Unit040 Beheer B.V. All Rights Reserved. See License.txt in the project Prespective folder for license information.</para>
            </summary>
        </member>
        <member name="T:u040.prespective.core.spline.ADSplineControlPoint.HandleSpace">
            <summary>
            Transformation space to use for setting the handles by value and the Scene Gizmo Alignment
            Local = aligned with the Control points' local space
            Global = aligned with the scene
            </summary>
        </member>
        <member name="T:u040.prespective.core.spline.ADSplineControlPoint.RotationAlignmentMode">
            <summary>
            The direction space we want to match the control point rotation with:
            Spline = z-axis matches the spline direction on the control point, Y-axis matches nearest control point triangle,
            Local = z-axis matches the spline direction on the control point, Y-axis attempts to match the spline Y-axis
            Global = z-axis matches the spline direction on the control point, Y-axis attempts to match the scene Y-axis
            Free = Control point rotation is free and matches the rotation of the Control point transform
            </summary>
        </member>
        <member name="T:u040.prespective.core.spline.ADSplineControlPoint.HandleGizmo">
            <summary>
            The Handle Mode to use when editing this control point
            Free = Use a free movement gizmo (classic), this gizmo is visually less obtrusive, but is not constrained in movement axis
            Position = Use a Position gizmo, this gizmo visually more obtrusive, but does constrain movement conform the set Handle Value Space
            </summary>
        </member>
        <member name="T:u040.prespective.core.spline.ADSplineControlPoint.HandleStyle">
            <summary>
            The Handle style used for this control point
            None = this control point has no handles, resulting in straight lines to the preceding and trailing control points (1st order NURBS Curve)
            InOnly = this control point has only a handle leading in, resulting in a curved section leading in and a straight section leading out (2nd order NURBS Curve in, 1st order out)
            OutOnly = this control point has only a handle leading out, resulting in a straight section leading in, and a curved section leading out (1nd order NURBS Curve in, 2nd order out)
            Continuous = this control point has a handle leading in and out, but in order to maintain curvature both handles mirror each other over the control point (2nd order NURBS Curve in and out)
            Broken = this control point has a handle leading in and out, and both can be freely manipulated leading to a hard edged corner on the control point (2nd order NURBS Curve in and out)
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSplineControlPoint.MINIMUM_RESPONSE_TRANSLATION_DISTANCE">
            <summary>
            minimum distance to response to change
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSplineControlPoint.MINIMUM_RESPONSE_ROTATION_ANGLE">
            <summary>
            minimum angle to response to change
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSplineControlPoint.NormalSVMultiplier">
            <summary>
            Multiplier of the scene view normal gizmo magnitude 
            (making it longer or shorter to best fit your zoom level)
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSplineControlPoint.ShowNormalXAxis">
            <summary>
            Whether or not to show the X normal direction in scene
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSplineControlPoint.ShowNormalYAxis">
            <summary>
            Whether or not the show the Y normal direction in scene
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSplineControlPoint.ShowNormalZAxis">
            <summary>
            Whether or not to show the Z normal direction in scene
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSplineControlPoint.ShowGizmoWhenNotInSelection">
            <summary>
            Whether or not to show the Gizmos in scene when this control point is not part of the scene selection
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSplineControlPoint.ShowHandleLimitUpDirection">
            <summary>
            whether or not to show the handle limit up direction (if applicable)
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSplineControlPoint.ControlPointMNormalLength">
            <summary>
            control point normal length
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSplineControlPoint.HandleValueSpace">
            <summary>
            the space the handle is in
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSplineControlPoint.UseHandleLimits">
            <summary>
            Whether to apply a limit to the handles
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSplineControlPoint.HandleLimitSpace">
            <summary>
            the space the handle limits are in
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSplineControlPoint.HandleGizmoMode">
            <summary>
            The Handle Gizmo to use for setting the handles
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSplineControlPoint.PlanarLimitDirection">
            <summary>
            The direction of the plane we'll be limiting to
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSplineControlPoint.SplineNormalRotationAngle">
            <summary>
            Around the spline forward direction, the rotation in Euler degrees we want to rotate our up direction
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSplineControlPoint.CurrentLocalRotation">
            <summary>
            The recorded Current Rotation in double precision
            TODO : change/merge this with seperatedRotation
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSplineControlPoint.SeperatedRotation">
            <summary>
            The recorded Current Rotation in double precision
            TODO : change/merge this with CurrentRotation
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSplineControlPoint.RotationDiff">
            <summary>
            The tracked Difference in rotation between the owned transform and this control point
            TODO: determine if its worth to keep this?
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSplineControlPoint.MatchRotationSpace">
            <summary>
            The direction we want to use for matching our up direction
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSplineControlPoint.SeperateTransformRotation">
            <summary>
            Whether this control point (script and result on spline) 
            should use a separate rotation from the transform
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSplineControlPoint.OptionalTransformFollower">
            <summary>
            When Transform Tracking is enabled, this tracker does the syncing in the update loop
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSplineControlPoint.IsStatic">
            <summary>
            Whether the spline of the control point is static (is assumed the local points of spline are not changed anymore)
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSplineControlPoint.storedSetBuffer">
            <summary>
            If should buffer its calls to the transform and then use those buffered value instead of the transform values
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSplineControlPoint.storedBufferedParentRotation">
            <summary>
            Buffered global rotation of parent of this control point
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSplineControlPoint.storedBufferdGlobalPosition">
            <summary>
            Buffered global position of this control point
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSplineControlPoint.storedIsSelected">
            <summary>
            If the control point is selected right now
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSplineControlPoint.HandleStyleSplineControlPoint">
            <summary>
            Handle style used for this control point
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSplineControlPoint.ParentSpline">
            <summary>
            the spline connected to this spline control point
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSplineControlPoint.SetBuffer">
            <summary>
            If should buffer its calls to the transform and then use those buffered value instead of the transform values
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSplineControlPoint.BufferedGlobalPosition">
            <summary>
            Buffered global position of this control point
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSplineControlPoint.BufferedGlobalParentRotation">
            <summary>
            Buffered global parent rotation of this control point
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSplineControlPoint.UserAdjustedRotation">
            <summary>
            user adjusted rotation
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSplineControlPoint.VectorDescription">
            <summary>
            Set or get this control point via vector description
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSplineControlPoint.LocalVectorDescription">
            <summary>
            Set or get this control point via vector description
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSplineControlPoint.UpMatchDirectionLocal">
            <summary>
            When match space is set to local or world, match the up direction in this direction
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSplineControlPoint.NPrecisionAffectedChildComponentTypes">
            <summary>
            The DSplineControlPoint has no child types it needs to consider updating the Transform type for
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSplineControlPoint.CurvePercentage">
            <summary>
            percentage of the curve at this point
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSplineControlPoint.HasChanged">
            <summary>
            if spline control point has changed
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSplineControlPoint.Handle1">
            <summary>
            incoming handle control point
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSplineControlPoint.Handle2">
            <summary>
            outgoing handle control point
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSplineControlPoint.Handle1Length">
            <summary>
            incoming handle handle length
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSplineControlPoint.Handle2Length">
            <summary>
            outgoing handle handle length
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSplineControlPoint.GlobalHandle1">
            <summary>
            incoming handle in global space
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSplineControlPoint.GlobalHandle2">
            <summary>
            outgoing handle in global space
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSplineControlPoint.IsSelected">
            <summary>
            If the control point is selected right now
            </summary>
        </member>
        <member name="M:u040.prespective.core.spline.ADSplineControlPoint.Update">
            <summary>
            Unity Update (also called every editor update)
            </summary>
        </member>
        <member name="M:u040.prespective.core.spline.ADSplineControlPoint.onUpdate">
            <summary>
            Function run on Unity Update
            </summary>
        </member>
        <member name="M:u040.prespective.core.spline.ADSplineControlPoint.UpdateControlPointRotation(System.Boolean)">
            <summary>
            Every (editor) update; update the rotation of this control point
            </summary>
        </member>
        <member name="M:u040.prespective.core.spline.ADSplineControlPoint.GetRotationAtControlPoint(u040.prespective.math.doubles.DVector3,u040.prespective.math.doubles.DVector3)">
            <summary>
            Returns the Rotation of the spline at this control point
            </summary>
            <param name="_globalZDirAtControlPoint">the z-direction at the control point</param>
            <param name="_globalYAtControlPoint"></param>
            <returns></returns>
        </member>
        <member name="M:u040.prespective.core.spline.ADSplineControlPoint.forceUpdateChangeBuffers">
            <summary>
            Force the update to Change Buffers
            (Included as part of DES)
            </summary>
        </member>
        <member name="M:u040.prespective.core.spline.ADSplineControlPoint.ApplyHandleLimits">
            <summary>
            Applies the current handle limit to this control point (projects the current handles onto the limiting plane
            </summary>
        </member>
        <member name="M:u040.prespective.core.spline.ADSplineControlPoint.DuplicateControlPointSettings(u040.prespective.core.spline.ADSplineControlPoint)">
            <summary>
            gets and applies the values from given spline control point
            </summary>
            <param name="_controlPointToGetValuesFrom">to get values from</param>
        </member>
        <member name="M:u040.prespective.core.spline.ADSplineControlPoint.SetStandardValues(u040.prespective.core.spline.ADSplineControlPoint.HandleStyle)">
            <summary>
            The standard values of the handle components are set, depending on the handle style of this point.
            </summary>
            <param name="_chosenHandleStyle">handle style</param>
        </member>
        <member name="M:u040.prespective.core.spline.ADSplineControlPoint.SetTransform(UnityEngine.Vector3,UnityEngine.Quaternion,System.Boolean,System.Boolean)">
            <summary>
            set transformation of control point
            </summary>
            <param name="_position">position</param>
            <param name="_rotation">rotation</param>
            <param name="_isLocal">is in local space</param>
            <param name="_update">if should do spline update</param>
        </member>
        <member name="M:u040.prespective.core.spline.ADSplineControlPoint.SetTransform(u040.prespective.math.doubles.DVector3,u040.prespective.math.doubles.DQuaternion,System.Boolean,System.Boolean)">
            <summary>
            set transformation of control point
            </summary>
            <param name="_position">position</param>
            <param name="_rotation">rotation</param>
            <param name="_isLocal">is in local space</param>
            <param name="_update">if should do spline update</param>
        </member>
        <member name="M:u040.prespective.core.spline.ADSplineControlPoint.SetupAssignedRigidBody">
            <summary>
            set if assigned rigid body from NPrecision
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSplineControlPoint.GetConcreteExplicitType">
            <summary>
            Retrieve the preferred Concrete Explicit Inheritance Class of ADSplineControlPoint
            (which is located in a different assembly, so we need to index it in runtime)
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSplineControlPoint.explicitBuffer">
            <summary>
            buffered type
            </summary>
        </member>
        <member name="T:u040.prespective.core.spline.SplineCPLabelMode">
            <summary>
            Spline label type
            </summary>
        </member>
        <member name="T:u040.prespective.core.spline.ADSpline">
            <summary>
            Creates a Spline with double precision in the Unity Editor
            
            <para>Copyright (c) 2015-2023 Prespective, Unit040 Beheer B.V. All Rights Reserved. See License.txt in the project Prespective folder for license information.</para>
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.CONTROL_POINT_CONTAINER_NAME">
            <summary>
            Default name to use for the container GO child we'll use for storing our control points
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.CONTROL_POINT_NAME">
            <summary>
            Default naming structure to use for automatically generated control points
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.CONTROL_POINT_CHECK_INTERVAL">
            <summary>
            Default interval in milliseconds between change checks (generally only relevant in editor mode)
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.RADIUS">
            <summary>
            Radius of the drawn spline
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.SIZE">
            <summary>
            Size of the control points drawing
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.OnSplineChanged">
            <summary>
            Event triggered when the spline has changed (shape)
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.AngleBetweenSamples">
            <summary>
            Angle between samples
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.NormalDisplayModifier">
            <summary>
            normal display modifier
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.SplineSegmentDefaultColor">
            <summary>
            spline segment colour
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.DefaultNormalUpColor">
            <summary>
            The Default Normal color to use for this spline
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.DefaultNormalFwdColor">
            <summary>
            The Default Normal color to use for this spline
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.DefaultNormalRightColor">
            <summary>
            The Default Normal color to use for this spline
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.controlPointBackgroundTexture">
            <summary>
            The texture to use for the control point backdrop
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.splineLabelTextColor">
            <summary>
            spline text colour
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.DefaultRotationType">
            <summary>
            The default clockwise used by spline segments
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.UniqueID">
            <summary>
            splines identifier
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.isClosed">
            <summary>
            Whether the spline is closed (a closed loop)
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.storedIsStatic">
            <summary>
            Whether the spline is static (is assumed the local points of spline are not changed anymore)
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.previousControlPoints">
            <summary>
            Buffer with previously indexed control points
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.CpLabelMode">
            <summary>
            Whether or not Control point labels should be displayed in the scene view
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.LoDInScene">
            <summary>
            The Level of detail to show the spline in the scene
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.ShowWhenNotInSelection">
            <summary>
            Whether or not to show the spline when its part of the selection
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.ShowInSceneView">
            <summary>
            Whether or not to show this spline at all in scene view
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.ShowUpNormalLine">
            <summary>
            Whether or not to show the spline normal as a line
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.ShowFwdNormalLine">
            <summary>
            Whether or not to show the spline forward as a line
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.ShowRightNormalLine">
            <summary>
            Whether or not to show the spline right as a line
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.FoldOutAddPoint">
            <summary>
            Whether or not the add point in editor is folded out
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.sLen">
            <summary>
            buffer for spline length
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.localControlPolygon">
            <summary>
            Runtime Buffer field for retaining the current control polygon
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.localControlRotationPolygon">
            <summary>
            Runtime Buffer field for retaining the current control polygon rotations
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.splineSegments">
            <summary>
            Buffer for the spline segments
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.controlPointContainer">
            <summary>
            Buffer for the control point container
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.tolerance">
            <summary>
            Maximum tolerance of the segment
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.splineControlPoints">
            <summary>
            Buffer for the current indexed control points
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.storedSetBuffer">
            <summary>
            If should buffer its calls to the transform and then use those buffered value instead of the transform values
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.lastCPCheck">
            <summary>
            Buffer for recording the last time a control point index was performed
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.PreventChangeCheck">
            <summary>
            prevents change being applied
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.splineCPsChanged">
            <summary>
            runtime buffer field for recording whether the control points on this spline have recently changed
            (only set in 'SplineControlPoints', only unset in 'UpdateSpline'
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.updateDrawSplinePoints">
            <summary>
            Update the drawing points of the spline
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.storedWatch">
            <summary>
            Internal watch to check against if should check for update
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.DrawGizmo">
            <summary>
            If the gizmo is drawn
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSpline.NPrecisionAffectedChildComponentTypes">
            <summary>
            The Component types in children that are affected when the precision of this type changes
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSpline.ControlPointType">
            <summary>
            type of the control point
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSpline.SplineID">
            <summary>
            Lazy generator for a Spline ID; used for DES
            (DES Update - Do not serialize this field because we want it to regenerate every run)
            </summary>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.SetSplineID(System.Int32)">
            <summary>
            Forces the spline ID to a specific new ID
            </summary>
            <param name="_newID"></param>
        </member>
        <member name="P:u040.prespective.core.spline.ADSpline.splineLength">
            <summary>
            Runtime Buffer field for recording the total length of this spline
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSpline.SplineLength">
            <summary>
            Returns the full curve length of the spline
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSpline.SplineLabelTextColor">
            <summary>
            Field for getting and setting spline label color
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSpline.ControlPointBackgroundColor">
            <summary>
            Color to be used for the Control point Label Background
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSpline.ControlPointLabelStyle">
            <summary>
            The control point label style 
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSpline.IsClosed">
            <summary>
            Whether this spline is closed
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSpline.IsStatic">
            <summary>
            Whether the spline is static (is assumed the local points of spline are not changed anymore)
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSpline.ControlPolygon">
            <summary>
            the control polygon describing this spline in world space as Vector3
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSpline.LocalControlPolygon">
            <summary>
            the control polygon describing this spline in local space as Vector3
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSpline.ControlPolygonWithRotation">
            <summary>
            the control polygon describing this spline in world space as Vector3 and rotation as Quaternion
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSpline.LocalControlPolygonWithRotation">
            <summary>
            the control polygon describing this spline in world space as Vector3 and rotation as Quaternion
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSpline.SplineControlPoints">
            <summary>
            Retrieve all contained spline control points
            (regularly triggers a search - and forces a change check - since the hierarchy of control points can change at any time)
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSpline.SplineHasUnhandledControlPointChanges">
            <summary>
            Whether this spline has unhandled control point changes, and should thus receive an update before doing anything
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSpline.SplineSegments">
            <summary>
            Spline segments currently active in this spline
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSpline.ControlPointContainer">
            <summary>
            Get the child container for all control points; if no such child exists its created here (lazy)
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSpline.Tolerance">
            <summary>
            Maximum tolerance of the segment
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSpline.SetBuffer">
            <summary>
            If should buffer its calls to the transform and then use those buffered value instead of the transform values
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSpline.watch">
            <summary>
            Internal watch to check against if should check for update
            </summary>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.regenControlPointLabelStyle">
            <summary>
            Regenerates the label style for this spline
            </summary>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.Reset">
            <summary>
            Called when adding this script, or when the script is explicitly reset
            </summary>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.onReset">
            <summary>
            Function run on Unity Reset
            </summary>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.FixedUpdate">
            <summary>
            unity fixed updates
            </summary>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.onFixedUpdate">
            <summary>
            Function run on Unity Fixed Update
            </summary>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.LateUpdate">
            <summary>
            Unity late update
            </summary>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.onLateUpdate">
            <summary>
            Function run on Unity late Update (so it can be overwritten safely)
            </summary>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.OnDisable">
            <summary>
            Unity ons disable
            </summary>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.onOnDisable">
            <summary>
            Function run on Unity on disable (so it can be overwritten safely)
            </summary>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.RecalculateNormalLine">
            <summary>
            recalculates the normal lines along all spline segments
            </summary>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.GetControlPointIndex(u040.prespective.core.spline.ADSplineControlPoint)">
            <summary>
            gets index of control point in this spline
            </summary>
            <param name="_controlPoint">control point</param>
            <returns>index of control point (-1 if not found)</returns>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.AddPoint(u040.prespective.math.doubles.DVector3[],System.Int32,System.Boolean)">
            <summary>
            Adds a point via vector description
            </summary>
            <param name="_controlPoint">List with Vector3 describing the control point; format expected: {handle_in, position, handle_out} expects 1 point for Handlestyle.NONE, and 3 points for all others </param>
            <param name="_index">Index in the control polygon to insert this control point</param>
            <param name="_isLocal">whether or not this point is described in local space (of the spline)</param>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.AddPoint(u040.prespective.math.doubles.DVector3[],u040.prespective.math.doubles.DQuaternion,System.Int32,System.Boolean)">
            <summary>
            Adds a point via vector description
            </summary>
            <param name="_controlPoint">List with Vector3 describing the control point; format expected: {handle_in, position, handle_out} expects 1 point for Handlestyle.NONE, and 3 points for all others </param>
            <param name="_index">Index in the control polygon to insert this control point</param>
            <param name="_rotation">rotationOfPoint</param>
            <param name="_isLocal">whether or not this point is described in local space (of the spline)</param>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.AutoRenameControlpoints">
            <summary>
            automaticly renames the control points to fit their position in the chain
            </summary>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.InvertSpline">
            <summary>
            Inverts the spline
            </summary>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.getEqPercFromDistance(System.Double)">
            <summary>
            Get the equidistant percentage equal to the distance across this curve
            </summary>
            <param name="_distance">the distance in Unity Units (generally meters) to travel</param>
            <returns></returns>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.GetClosestPercentageToWorldPos(u040.prespective.math.doubles.DVector3,System.Double@,u040.prespective.math.doubles.DVector3@)">
            <summary>
            Get the percentage on this spline closest to the world position
            </summary>
            <param name="_worldPos">the world position to check for</param>
            <param name="_distance">the closest distance at the resulting point</param>
            <param name="_posOnSpline">the resulting point on the spline (in world space)</param>
            <returns>spline percentage</returns>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.GetRotationAndPositionAtEqPerc(System.Double,u040.prespective.math.doubles.DQuaternion@,u040.prespective.math.doubles.DVector3@)">
            <summary>
            Calculates the rotation and position of an object following the spline
            </summary>
            <param name="_currEqPerc">the target equidistant percentage along the spline</param>
            <param name="_rot">the output rotation at the resulting percentage</param>
            <param name="_pos">the output position at the resulting percentage</param>
            (Changed as part of DES)
            <returns></returns>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.MoveSplineToCrossPointAtPercentage(System.Double,u040.prespective.math.doubles.DVector3,System.Double@)">
            <summary>
            Translates this spline to cross the point _newpoint at spline percentage _perc
            (Implemented as part of DES)
            </summary>
            <param name="_perc">the percentage we want to change the alignment for</param>
            <param name="_newpoint">the point to cross at percentage</param>
            <returns></returns>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.getSegmentWithPerc(System.Double,System.Double@)">
            <summary>
            Utility function used to determine which segment holds the percentage '_perc'
            (Changed as part of DES)
            </summary>
            <param name="_perc">the total spline percentage to look for</param>
            <param name="_segPerc">the resulting segment percentage on the segment index returned</param>
            <returns></returns>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.GetPointAtEquidistantPerc(System.Double,System.Boolean)">
            <summary>
            Get the point in world space at equidistant curve percentage 
            </summary>
            <param name="_perc"></param>
            <param name="_verbose"></param>
            <returns></returns>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.forceReindexControlPoints">
            <summary>
            forces the spline control points to be reimported
            </summary>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.UpdateSpline(System.Boolean)">
            <summary>
            Update the spline curve
            </summary>
            <param name="_forceUpdate">if must update</param>
            <returns>if change happened because of update</returns>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.getIndexHierarchyChanged">
            <summary>
            Function to find from which point the control points have changed
            </summary>
            <returns></returns>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.updateSplineSegment(System.Int32,u040.prespective.core.spline.ADSplineControlPoint,u040.prespective.core.spline.ADSplineControlPoint)">
            <summary>
            Utility function that updates a specific segment
            </summary>
            <param name="_sIndex">index of the segment to update</param>
            <param name="_start">starting control point</param>
            <param name="_end">end control point</param>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.triangelateNormalAtControlPoint(System.Int32)">
            <summary>
            determines the normal direction of control point based on previous and next control point
            </summary>
            <param name="_index">index of control point</param>
            <returns>normal direction</returns>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.getRotationAtControlPoint(u040.prespective.core.spline.ADSplineControlPoint,System.Int32,System.Double)">
            <summary>
            Calculates the 'default' rotation at control point _target
            (requires the curve_percentage) to be set at the control point
            </summary>
            <param name="_target">the control point to calculate </param>
            <param name="_precision">the precision (p > 0) to use for forward direction calculation</param>
            <returns></returns>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.CalculateMaximumTolerance">
            <summary>
            calculates the maximum tolerance of spline between implicit and tessellated curve
            </summary>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.TranslateByDistance(System.Double,System.Double,u040.prespective.math.doubles.DVector3@,System.Double@,System.Boolean)">
            <summary>
            Translate over this spline by distance
            Round trips on the spline are returned as a list of CurveTraversalEvents registered by distance travelled when they occurred
            </summary>
            <param name="_currEqPerc">the equidistant percentage at the start of the translation</param>
            <param name="_dist">the distance in world space to travel (over the curve)</param>
            <param name="_pos">the resulting position in world space</param>
            <param name="_posEqPerc">the resulting equidistant percentage</param>
            <param name="_outputRecordByDistance">Whether the key of the output record should be in distance or equidistant curve percentage, default is percentage</param>
            <returns>a record of traversal events occurred during the translation (e.g. did we cross a curve boundary? and how many times)</returns>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.TranslateByEqPerc(System.Double,System.Double,u040.prespective.math.doubles.DVector3@,System.Double@)">
            <summary>
            Translate over this spline by equidistant percentage
            Round trips on the spline are returned as a list of CurveTraversalEvents registered by distance travelled when they occurred
            </summary>
            <param name="_currEqPerc">the equidistant percentage at the start of the translation</param>
            <param name="_pos">the resulting position in world space</param>
            <param name="_posEqPerc">the resulting equidistant percentage</param>
            <returns></returns>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.TranslateAndRotateByDistance(System.Double,System.Double,u040.prespective.math.doubles.DVector3@,u040.prespective.math.doubles.DQuaternion@,System.Double@,System.Boolean)">
            <summary>
            Returns the resulting position and rotation an object would get when translating and rotating over a spline
            Round trips on the spline are returned as a list of CurveTraversalEvents registered by distance travelled when they occurred
            </summary>
            <param name="_currEqPerc">the starting equidistant percentage on this spline</param>
            <param name="_translEqPerc">the (unbound) offset equidistant percentage to travel over this spline</param>
            <param name="_pos">the resulting position on this spline</param>
            <param name="_rot">the resulting rotation on this spline</param>
            <param name="_posEqPerc">the resulting bound percentage on this spline</param>
            <param name="_outputRecordByDistance">Whether the key of the output record should be in distance or equidistant curve percentage, default is percentage</param>
            <returns></returns>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.TranslateAndRotateByEqPerc(System.Double,System.Double,u040.prespective.math.doubles.DVector3@,u040.prespective.math.doubles.DQuaternion@,System.Double@)">
            <summary>
            Returns the resulting position and rotation an object would get when translating and rotating over a spline
            Round trips on the spline are returned as a list of CurveTraversalEvents registered by distance travelled when they occurred
            </summary>
            <param name="_currEqPerc">the starting equidistant percentage on this spline</param>
            <param name="_translEqPerc">the (unbound) offset equidistant percentage to travel over this spline</param>
            <param name="_pos">the resulting position on this spline</param>
            <param name="_rot">the resulting rotation on this spline</param>
            <param name="_posEqPerc">the resulting bound percentage on this spline</param>
            <returns></returns>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.GetBoundPerc(System.Double@,System.Double@)">
            <summary>
            Get a bound percentage for translation of '_translEqPerc' from the bound percentage '_currEqPerc' 
            Round trips on the spline are returned as a list of CurveTraversalEvents registered by distance travelled when they occurred
            </summary>
            <param name="_currEqPerc">the starting percentage on this spline</param>
            <param name="_translEqPerc">the signed translated percentage over this spline</param>
            <returns></returns>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.ApplyDefaultSettingsToSegments">
            <summary>
            Applies the default settings to all spline segments
            </summary>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.GetIntersectPointsWithLine(u040.prespective.math.doubles.DVector3,u040.prespective.math.doubles.DVector3,System.Int32,System.Double)">
            <summary>
            gets the intersections between this spline and a straight line using Casteljau algorithm
            </summary>
            <param name="_beginPointLine">begin point line</param>
            <param name="_endPointLine">end point line</param>
            <param name="_intersectPoints">found intersection points</param>
            <param name="_numberOfPasses">number of passes of the Casteljau algorithm</param>
            <param name="_minimumDistanceValue">minimum distance between which it is assumed that 2 intersection points are actually the same intersection point</param>
            <returns>if found intersection</returns>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.GetIntersectPointsWithSpline(u040.prespective.core.spline.ADSpline,System.Int32,System.Double)">
            <summary>
            gets the intersections between this spline and a other spline using Casteljau algorithm
            </summary>
            <param name="_intersectSpline">other spline</param>
            <param name="_intersectPoints">found intersection points</param>
            <param name="_numberOfPasses">number of passes of the Casteljau algorithm</param>
            <param name="_minimumDistanceValue">minimum distance between which it is assumed that 2 intersection points are actually the same intersection point</param>
            <returns>if found intersection</returns>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.TesselateByDegrees(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            tessellates the spline based on the degree difference
            </summary>
            <param name="_degPerSample">the maximum allowed degrees difference to tessellated</param>
            <param name="_startPerc">start percentage of the spline</param>
            <param name="_endPerc">end percentage of the spline</param>
            <param name="_tesselationSamples">amount of samples to take to check against</param>
            <returns>tessellated values</returns>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.OnSplineDataUpdate(UnityEngine.Object,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            on spline data update
            </summary>
            <param name="_origin"></param>
            <param name="_event"></param>
            <param name="_params"></param>
        </member>
        <member name="M:u040.prespective.core.spline.ADSpline.SetupAssignedRigidBody">
            <summary>
            to do if assigned rigid body from NPrecision
            </summary>
        </member>
        <member name="F:u040.prespective.core.spline.ADSpline.explicitBuffer">
            <summary>
            type buffered
            </summary>
        </member>
        <member name="P:u040.prespective.core.spline.ADSpline.GetConcreteExplicitType">
            <summary>
            Retrieve the preferred Concrete Explicit Inheritance Class of ADSpline 
            (which is located in a different assembly, so we need to index it in runtime)
            </summary>
        </member>
        <member name="T:u040.prespective.core.spline.DSplineChangeEvent">
            <summary>
            spline change event
            </summary>
        </member>
        <member name="T:u040.prespective.core.transformation.TransformationPrecision">
            <summary>
            Precision setting for this mono behavior
            </summary>
        </member>
        <member name="T:u040.prespective.core.transformation.NPrecisionMonoBehavior">
            <summary>
            Standard Model for Mono behaviour that supports multiple transformation precision modes
            
            <para>Copyright (c) 2015-2023 Prespective, Unit040 Beheer B.V. All Rights Reserved. See License.txt in the project Prespective folder for license information.</para>
            </summary>
        </member>
        <member name="F:u040.prespective.core.transformation.NPrecisionMonoBehavior.DOUBLE_MINIMUM_RESPONSE_TRANSLATION_DISTANCE">
            <summary>
            minimum amount see double translation difference
            </summary>
        </member>
        <member name="F:u040.prespective.core.transformation.NPrecisionMonoBehavior.DOUBLE_MINIMUM_RESPONSE_ROTATION_ANGLE">
            <summary>
            minimum amount see double rotation difference
            </summary>
        </member>
        <member name="F:u040.prespective.core.transformation.NPrecisionMonoBehavior.FLOAT_MINIMUM_RESPONSE_TRANSLATION_DISTANCE">
            <summary>
            minimum amount see float translation difference
            </summary>
        </member>
        <member name="F:u040.prespective.core.transformation.NPrecisionMonoBehavior.FLOAT_MINIMUM_RESPONSE_ROTATION_ANGLE">
            <summary>
            minimum amount see float rotation difference
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.NPrecisionMonoBehavior.TransformationPrecision">
            <summary>
            The Precision set for this precision behaviour
            </summary>
        </member>
        <member name="F:u040.prespective.core.transformation.NPrecisionMonoBehavior.UseRigidbody">
            <summary>
            Whether you want to assign your transform to the rigid body *first* which will result in
            better behaviour in a PhysX Simulation
            </summary>
        </member>
        <member name="F:u040.prespective.core.transformation.NPrecisionMonoBehavior.RigidBody">
            <summary>
            Reference to the Rigid body to assign transformation to - 
            it may be located on a child object, but note that may negatively affect simulation precision
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.NPrecisionMonoBehavior.NPrecisionAffectedChildComponentTypes">
            <summary>
            The Component types in children that are affected when the precision of this type changes
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.NPrecisionMonoBehavior.DoubleTransform">
            <summary>
            Reference to the DoubleTransform
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.NPrecisionMonoBehavior.FloatWorldPosition">
            <summary>
            The float precision World Position of this behaviours transform 
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.NPrecisionMonoBehavior.DoubleWorldPosition">
            <summary>
            The double precision World Position of this behaviours transform 
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.NPrecisionMonoBehavior.FloatLocalPosition">
            <summary>
            The float precision Local Position of this behaviours transform 
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.NPrecisionMonoBehavior.DoubleLocalPosition">
            <summary>
            The double precision Local Position of this behaviours transform 
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.NPrecisionMonoBehavior.DoubleLocalToWorldMatrix">
            <summary>
            The Double Precision Local to Global Matrix of this behaviours transform 
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.NPrecisionMonoBehavior.FloatLocalToWorldMatrix">
            <summary>
            The Floating precision Local to Global Matrix of this behaviours transform 
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.NPrecisionMonoBehavior.DoubleWorldToLocalMatrix">
            <summary>
            The Double Precision Local to Global Matrix of this behaviours transform 
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.NPrecisionMonoBehavior.FloatWorldToLocalMatrix">
            <summary>
            The Floating precision Local to Global Matrix of this behaviours transform 
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.NPrecisionMonoBehavior.DoubleLocalToWorldMatrixParent">
            <summary>
            The Double Precision Local to Global Matrix of this behaviours parent transform 
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.NPrecisionMonoBehavior.FloatLocalToWorldMatrixParent">
            <summary>
            The Floating precision Local to Global Matrix of this behaviours parent transform 
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.NPrecisionMonoBehavior.DoubleWorldToLocalMatrixParent">
            <summary>
            The Double Precision Local to Global Matrix of this behaviours parent transform 
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.NPrecisionMonoBehavior.FloatWorldToLocalMatrixParent">
            <summary>
            The Floating precision Local to Global Matrix of this behaviours parent transform 
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.NPrecisionMonoBehavior.FloatWorldRotation">
            <summary>
            The floating precision World Rotation of this behaviours transform 
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.NPrecisionMonoBehavior.DoubleWorldRotation">
            <summary>
            The floating precision World Rotation of this behaviours transform 
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.NPrecisionMonoBehavior.FloatLocalRotation">
            <summary>
            The floating precision Local Rotation of this behaviours transform 
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.NPrecisionMonoBehavior.DoubleLocalRotation">
            <summary>
            The Double precision Local Rotation of this behaviours transform 
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.NPrecisionMonoBehavior.FloatWorldParentRotation">
            <summary>
            The floating precision World Rotation of this behaviours transform parent
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.NPrecisionMonoBehavior.DoubleWorldParentRotation">
            <summary>
            The floating precision World Rotation of this behaviours transform parent
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.NPrecisionMonoBehavior.FloatLocalScale">
            <summary>
            The floating precision Local Scale of this behaviours transform 
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.NPrecisionMonoBehavior.DoubleLocalScale">
            <summary>
            The double precision Local Scale of this behaviours transform 
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.NPrecisionMonoBehavior.DoubleUpDirection">
            <summary>
            double up direction
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.NPrecisionMonoBehavior.FloatUpDirection">
            <summary>
            float up direction
            </summary>
        </member>
        <member name="M:u040.prespective.core.transformation.NPrecisionMonoBehavior.Awake">
            <summary>
            Unity awake function
            </summary>
        </member>
        <member name="M:u040.prespective.core.transformation.NPrecisionMonoBehavior.onAwake">
            <summary>
            function done in Unity Awake
            </summary>
        </member>
        <member name="M:u040.prespective.core.transformation.NPrecisionMonoBehavior.SetupAssignedRigidBody">
            <summary>
            Make sure that, if we're operating in RigidBody mode, the rigid body has been properly set up
            (e.g. in DES a rigid body must be kinematic)
            </summary>
        </member>
        <member name="M:u040.prespective.core.transformation.NPrecisionMonoBehavior.resolveRigidBody">
            <summary>
            Resolve and Set up a rigid body if none has been assigned in the inspector
            </summary>
            <returns></returns>
        </member>
        <member name="M:u040.prespective.core.transformation.NPrecisionMonoBehavior.resolveTransformSetConsideringRigidbody(System.Action,System.Action,System.Action{UnityEngine.Rigidbody})">
            <summary>
            Resolve the setting that should be applied on the transform
            taking into account the possibility of also having to set a rigid body
            </summary>
            <param name="_performDoubleSetAction">the action to perform to set a double value</param>
            <param name="_performSingleSetAction">the action to perform to set a single value</param>
            <param name="_perfomSetActionToRigidbody">the action to perform on the rigid body</param>
        </member>
        <member name="M:u040.prespective.core.transformation.NPrecisionMonoBehavior.GetObjectsAffectedByChange">
            <summary>
            Retrieve all objects that will be affected by a changing precision setting to be able to undo
            </summary>
            <returns>all components (and related gameObjects) affected by the change</returns>
        </member>
        <member name="M:u040.prespective.core.transformation.NPrecisionMonoBehavior.OnPrecisionChanged(u040.prespective.core.transformation.TransformationPrecision,u040.prespective.core.transformation.TransformationPrecision)">
            <summary>
            Callback made when the precision of this component has changed
            </summary>
            <param name="_from">the previous precision setting</param>
            <param name="_to">the new precision setting</param>
            <param name="_to">the new precision setting</param>
        </member>
        <member name="M:u040.prespective.core.transformation.NPrecisionMonoBehavior.addRemoveDTransform(u040.prespective.core.transformation.TransformationPrecision,UnityEngine.Component)">
            <summary>
            Add or remove a DTransform to the component/game object based on the precision that was just set
            </summary>
            <param name="_newPrecision">the newly set precision</param>
            <param name="_c">the component affected</param>
        </member>
        <member name="M:u040.prespective.core.transformation.NPrecisionMonoBehavior.SetParent(UnityEngine.Transform,System.Boolean)">
            <summary>
            set parent
            </summary>
            <param name="_parent">parent transform</param>
            <param name="_worldPositionStays">self world position stays</param>
        </member>
        <member name="M:u040.prespective.core.transformation.NPrecisionMonoBehavior.SetParent(u040.prespective.core.transformation.ADTransform,System.Boolean)">
            <summary>
            set parent
            </summary>
            <param name="_parent">parent DTransform</param>
            <param name="_worldPositionStays">self world position stays</param>
        </member>
        <member name="M:u040.prespective.core.transformation.NPrecisionMonoBehavior.SetParent(u040.prespective.core.transformation.NPrecisionMonoBehavior,System.Boolean)">
            <summary>
            set parent
            </summary>
            <param name="_parent">parent NPrecision</param>
            <param name="_worldPositionStays">self world position stays</param>
        </member>
        <member name="T:u040.prespective.core.transformation.ADTransform">
            <summary>
            Double implementation of the Unity3D Default float Transform class
            
            <para>Copyright (c) 2015-2023 Prespective, Unit040 Beheer B.V. All Rights Reserved. See License.txt in the project Prespective folder for license information.</para>
            </summary>
        </member>
        <member name="F:u040.prespective.core.transformation.ADTransform.DEFAULT_DISTANCE_MARGIN">
            <summary>
            default distance margin of DTransform
            </summary>
        </member>
        <member name="F:u040.prespective.core.transformation.ADTransform.DEFAULT_ANGLE_MARGIN">
            <summary>
            default angle margin of DTransform
            </summary>
        </member>
        <member name="F:u040.prespective.core.transformation.ADTransform.DistanceCheckMargin">
            <summary>
            distance to check difference between DTransform and transform
            </summary>
        </member>
        <member name="F:u040.prespective.core.transformation.ADTransform.AngleCheckMargin">
            <summary>
            angle to check difference between DTransform and transform
            </summary>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.syncTransformToDTransformAfterFixedUpdate">
            <summary>
            Makes sure the syncing of the DTransform with the Transform values is delayed until the physics update is completed
            </summary>
            <returns></returns>
        </member>
        <member name="F:u040.prespective.core.transformation.ADTransform._syncsTransformAfterPhyscisSimulationUpdate">
            <summary>
            Whether this DTransform should wait with updating its DTransform with Transform information until the 
            Physics Simulation has been completed
            </summary>
        </member>
        <member name="F:u040.prespective.core.transformation.ADTransform.managesOwnTransformSync">
            <summary>
            Whether this DTransform should manage its own Transformation Sync
            </summary>
        </member>
        <member name="F:u040.prespective.core.transformation.ADTransform.parent">
            <summary>
            parent of this transform (can not be set but still have a parent through connected transform)
            for getting use Parent
            </summary>
        </member>
        <member name="F:u040.prespective.core.transformation.ADTransform.localPosition">
            <summary>
            stored local position
            </summary>
        </member>
        <member name="F:u040.prespective.core.transformation.ADTransform.localRotation">
            <summary>
            stored local rotation
            </summary>
        </member>
        <member name="F:u040.prespective.core.transformation.ADTransform.localScale">
            <summary>
            stored local scale
            </summary>
        </member>
        <member name="F:u040.prespective.core.transformation.ADTransform.storedTransformLocalPosition">
            <summary>
            stored local position
            </summary>
        </member>
        <member name="F:u040.prespective.core.transformation.ADTransform.storedTransformLocalRotation">
            <summary>
            stored local rotation
            </summary>
        </member>
        <member name="F:u040.prespective.core.transformation.ADTransform.storedTransformLocalScale">
            <summary>
            stored local scale
            </summary>
        </member>
        <member name="F:u040.prespective.core.transformation.ADTransform.matrixHasChanged">
            <summary>
            if matrix has changed so should be remade
            </summary>
        </member>
        <member name="F:u040.prespective.core.transformation.ADTransform.storedLocalToWorldMatrix">
            <summary>
            stored local to world matrix on local level
            </summary>
        </member>
        <member name="F:u040.prespective.core.transformation.ADTransform.storedGlobalLocalToWorldMatrix">
            <summary>
            stored local to world matrix on global level
            </summary>
        </member>
        <member name="F:u040.prespective.core.transformation.ADTransform.rotationHasChanged">
            <summary>
            if local rotation has changed so stored global rotation should be remade
            </summary>
        </member>
        <member name="F:u040.prespective.core.transformation.ADTransform.storedRotation">
            <summary>
            stored global rotation
            </summary>
        </member>
        <member name="F:u040.prespective.core.transformation.ADTransform.storedChildren">
            <summary>
            stored direct children
            </summary>
        </member>
        <member name="F:u040.prespective.core.transformation.ADTransform.globalMatrixHasChanged">
            <summary>
            if global matrix has changed
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.ADTransform.SyncsTransformAfterPhyscisSimulationUpdate">
            <summary>
            Whether this DTransform should wait with updating its DTransform with Transform information until the 
            Physics Simulation has been completed
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.ADTransform.ManagesOwnTransformSync">
            <summary>
            Whether this DTransform should manage its own Transformation Sync
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.ADTransform.Parent">
            <summary>
            parent of transform
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.ADTransform.Root">
            <summary>
            highest parent of transform
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.ADTransform.LocalToWorldMatrix">
            <summary>
            local to world transformation matrix
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.ADTransform.WorldToLocalMatrix">
            <summary>
            world to local transformation matrix
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.ADTransform.LocalPosition">
            <summary>
            local position of transform
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.ADTransform.Position">
            <summary>
            global position of transform
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.ADTransform.LocalRotation">
            <summary>
            local rotation of transform
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.ADTransform.Rotation">
            <summary>
            global rotation of transform
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.ADTransform.LocalScale">
            <summary>
            local scale of transform
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.ADTransform.Right">
            <summary>
            the local right direction in global space
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.ADTransform.Up">
            <summary>
            the local up direction in global space
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.ADTransform.Forward">
            <summary>
            the local forward direction in global space
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.ADTransform.ChildCount">
            <summary>
            The number of children the parent Transform has
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.ADTransform.HierarchyCapacity">
            <summary>
            The transform capacity of the transform's hierarchy data structure
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.ADTransform.HierarchyCount">
            <summary>
            The number of transforms in the transform's hierarchy data structure
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.ADTransform.InternalStoredTransformLocalPosition">
            <summary>
            stored transform local position for moved check
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.ADTransform.InternalStoredTransformLocalRotation">
            <summary>
            stored transform local rotation for rotated check
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.ADTransform.InternalStoredTransformLocalScale">
            <summary>
            stored transform local scale for scaled check
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.ADTransform.treeChangeMatrix">
            <summary>
            Checks if their is a recalculations of matrix in the entire tree of this DTransform
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.ADTransform.treeChangeRotation">
            <summary>
            Checks if their is a recalculations of local rotation in the entire tree of this DTransform
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.ADTransform.children">
            <summary>
            direct children
            </summary>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.settingLocalPosition(u040.prespective.math.doubles.DVector3)">
            <summary>
            sets the local position transform
            </summary>
            <param name="_pos"></param>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.settingLocalRotation(u040.prespective.math.doubles.DQuaternion)">
            <summary>
            sets the local rotation transform
            </summary>
            <param name="_rot"></param>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.settingLocalScale(u040.prespective.math.doubles.DVector3)">
            <summary>
            sets the local scale of transform
            </summary>
            <param name="_sc"></param>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.globalChangeMatrixSetChild">
            <summary>
            setting it s children that global matrix has changed
            </summary>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.globalChangeRotationSetChild">
            <summary>
            setting it s children that global rotation has changed
            </summary>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.AddDTransformToTransform(UnityEngine.Transform)">
            <summary>
            constructor
            </summary>
            <param name="_transform">transform to make double precision</param>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.Initialize">
            <summary>
            set the values to that of transform
            </summary>
            <param name="_transform"></param>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.TransformPoint(System.Double,System.Double,System.Double)">
            <summary>
            Transforms position from local space to world space
            </summary>
            <param name="_x">local position x</param>
            <param name="_y">local position y</param>
            <param name="_z">local position z</param>
            <returns>global position</returns>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.TransformPoint(u040.prespective.math.doubles.DVector3)">
            <summary>
            Transforms position from local space to world space
            </summary>
            <param name="_position">local position</param>
            <returns>global position</returns>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.InverseTransformPoint(System.Double,System.Double,System.Double)">
            <summary>
            Transforms position from world space to local space
            </summary>
            <param name="_x">global position x</param>
            <param name="_y">global position y</param>
            <param name="_z">global position z</param>
            <returns>local position</returns>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.InverseTransformPoint(u040.prespective.math.doubles.DVector3)">
            <summary>
            Transforms position from world space to local space
            </summary>
            <param name="_position">global position</param>
            <returns>local position</returns>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.TransformDirection(System.Double,System.Double,System.Double)">
            <summary>
            Transforms a direction from local space to world space
            </summary>
            <param name="_x">local position x</param>
            <param name="_y">local position y</param>
            <param name="_z">local position z</param>
            <returns>local direction</returns>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.TransformDirection(u040.prespective.math.doubles.DVector3)">
            <summary>
            Transforms a direction from local space to world space
            </summary>
            <param name="_direction">global direction</param>
            <returns>local direction</returns>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.InverseTransformDirection(System.Double,System.Double,System.Double)">
            <summary>
            Transforms a direction from world space to local space
            </summary>
            <param name="_x">global position x</param>
            <param name="_y">global position y</param>
            <param name="_z">global position z</param>
            <returns>global direction</returns>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.InverseTransformDirection(u040.prespective.math.doubles.DVector3)">
            <summary>
            Transforms a direction from world space to local space
            </summary>
            <param name="_direction">local direction</param>
            <returns>global direction</returns>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.TransformVector(System.Double,System.Double,System.Double)">
            <summary>
            Transforms a vector from local space to world space
            </summary>
            <param name="_x">local position x</param>
            <param name="_y">local position y</param>
            <param name="_z">local position z</param>
            <returns>global vector</returns>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.TransformVector(u040.prespective.math.doubles.DVector3)">
            <summary>
            Transforms a vector from local space to world space
            </summary>
            <param name="_vector">local vector</param>
            <returns>global vector</returns>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.InverseTransformVector(System.Double,System.Double,System.Double)">
            <summary>
            Transforms a vector from world space to local space
            </summary>
            <param name="_x">global position x</param>
            <param name="_y">global position y</param>
            <param name="_z">global position z</param>
            <returns>local vector</returns>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.InverseTransformVector(u040.prespective.math.doubles.DVector3)">
            <summary>
            Transforms a vector from world space to local space
            </summary>
            <param name="_vector">global vector</param>
            <returns>local vector</returns>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.SetParent(u040.prespective.core.transformation.ADTransform)">
            <summary>
            sets parent
            </summary>
            <param name="_parent">new parent</param>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.SetParent(u040.prespective.core.transformation.ADTransform,System.Boolean)">
            <summary>
            sets parent
            </summary>
            <param name="_parent">new parent</param>
            <param name="_worldPositionStays">if transform stays in the same world position when parented</param>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.GetSiblingIndex">
            <summary>
            gets the child index of the transform in its parent
            </summary>
            <returns>sibling index</returns>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.ToFloat">
            <summary>
            sets the values of connected transform to the stored double values
            </summary>
            <returns>set connected transform</returns>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.FixedUpdate">
            <summary>
            fixed update
            </summary>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.bufferTransformState">
            <summary>
            Enumerator that checks if the transform has changed
            </summary>
            <returns></returns>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.checkUpdate">
            <summary>
            checks if values have been updated
            </summary>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.Reset">
            <summary>
            reset the system
            </summary>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.ResetTransform">
            <summary>
            Reset the transform to his default values
            </summary>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.ManualSyncTransform">
            <summary>
            manually force sync to transform
            </summary>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.syncTransformToDTransform">
            <summary>
            syncing the transform to the stored values of the DTransform
            </summary>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.syncTransform">
            <summary>
            syncs the stored transform values to current transform values
            </summary>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.TransformLocalPoint(u040.prespective.math.doubles.DVector3)">
            <summary>
            transform point of a local point
            </summary>
            <param name="_transform">transform</param>
            <param name="_point">local point</param>
            <returns>global point</returns>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.InverseTransformLocalPoint(u040.prespective.math.doubles.DVector3)">
            <summary>
            inverse transform point of global point
            </summary>
            <param name="_transform">transform</param>
            <param name="_point">global point</param>
            <returns>local point</returns>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.InverseTransformLocalDirection(u040.prespective.math.doubles.DVector3)">
            <summary>
            inverse transform direction of global direction
            </summary>
            <param name="_transform">transform</param>
            <param name="_direction">global direction</param>
            <returns>local direction</returns>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.TransformLocalDirection(u040.prespective.math.doubles.DVector3)">
            <summary>
            transform direction of local direction
            </summary>
            <param name="_transform">transform</param>
            <param name="_direction">local direction</param>
            <returns>global direction</returns>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.TransformLocalVector(u040.prespective.math.doubles.DVector3)">
            <summary>
            transform vector of local vector
            </summary>
            <param name="_transform">transform</param>
            <param name="_vector">local vector</param>
            <returns>global vector</returns>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.InverseTransformLocalVector(u040.prespective.math.doubles.DVector3)">
            <summary>
            inverse transform vector of global vector
            </summary>
            <param name="_transform">transform</param>
            <param name="_vector">global vector</param>
            <returns>local vector</returns>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.LookAtPoint(u040.prespective.math.doubles.DVector3,u040.prespective.math.doubles.DVector3,System.Double)">
            <summary>
            force transform to look at point
            </summary>
            <param name="_point">point in global space</param>
            <param name="_localAxisLookAt">direction to look in local space (default forward)</param>
            <param name="_margin">margin to see if in same direction already</param>
        </member>
        <member name="F:u040.prespective.core.transformation.ADTransform.explicitBuffer">
            <summary>
            Buffered type
            </summary>
        </member>
        <member name="P:u040.prespective.core.transformation.ADTransform.ConcreteExplicitType">
            <summary>
            Retrieve the preferred Concrete Explicit Inheritance Class of ADTransform 
            (which is located in a different assembly, so we need to index it in runtime)
            </summary>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.op_Explicit(UnityEngine.Transform)~u040.prespective.core.transformation.ADTransform">
            <summary>
            casting transform back to DTransform
            </summary>
            <param name="_t">transform</param>
        </member>
        <member name="M:u040.prespective.core.transformation.ADTransform.ApplyDifference(u040.prespective.math.doubles.DVector3,u040.prespective.math.doubles.DQuaternion,u040.prespective.math.doubles.DVector3)">
            <summary>
            apply difference to DTransform
            </summary>
            <param name="_positionDifference">position difference</param>
            <param name="_rotationDifference">rotation difference</param>
            <param name="_scaleDifference">scale difference</param>
        </member>
        <member name="T:u040.prespective.core.transformation.DTransformUtility">
            <summary>
            utility for the DTransform
            </summary>
        </member>
        <member name="M:u040.prespective.core.transformation.DTransformUtility.ToDouble(UnityEngine.Transform)">
            <summary>
            Gets the DTransform of transform if present else add a DTransform
            </summary>
            <param name="_fVal">transform</param>
            <returns>DTransform</returns>
        </member>
        <member name="T:u040.prespective.core.events.ALocalEventLink">
            <summary>
            This component links local events to external listeners
            
            <para>Copyright (c) 2015-2023 Prespective, Unit040 Beheer B.V. All Rights Reserved. See License.txt in the project Prespective folder for license information.</para>
            </summary>
        </member>
    </members>
</doc>
